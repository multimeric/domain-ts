/* tslint:disable */
/* eslint-disable */
/**
 * Domain Public API
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: latest
 * Contact: api@domain.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * APMAPIModelsTokenisedSearchV2AddressComponentModel
 * @export
 * @interface AddressLocatorsV1AddressComponents
 */
export interface AddressLocatorsV1AddressComponents {
    /**
     * Gets or Sets Component
     * @type {string}
     * @memberof AddressLocatorsV1AddressComponents
     */
    'component'?: AddressLocatorsV1AddressComponentsComponentEnum;
    /**
     * Gets or Sets ShortName
     * @type {string}
     * @memberof AddressLocatorsV1AddressComponents
     */
    'shortName'?: string | null;
}

export const AddressLocatorsV1AddressComponentsComponentEnum = {
    UnitNumber: 'UnitNumber',
    StreetNumber: 'StreetNumber',
    StreetName: 'StreetName',
    StreetType: 'StreetType',
    Suburb: 'Suburb',
    Postcode: 'Postcode',
    State: 'State'
} as const;

export type AddressLocatorsV1AddressComponentsComponentEnum = typeof AddressLocatorsV1AddressComponentsComponentEnum[keyof typeof AddressLocatorsV1AddressComponentsComponentEnum];

/**
 * APMAPIModelsTokenisedSearchV3AddressDataModel
 * @export
 * @interface AddressLocatorsV1AddressDataModel
 */
export interface AddressLocatorsV1AddressDataModel {
    /**
     * Gets or Sets Types
     * @type {Array<string>}
     * @memberof AddressLocatorsV1AddressDataModel
     */
    'types'?: Array<AddressLocatorsV1AddressDataModelTypesEnum>;
    /**
     * Gets or Sets AddressComponents
     * @type {Array<AddressLocatorsV1AddressComponents>}
     * @memberof AddressLocatorsV1AddressDataModel
     */
    'addressComponents'?: Array<AddressLocatorsV1AddressComponents> | null;
    /**
     * Gets or Sets Ids
     * @type {Array<AddressLocatorsV1ApmIdModel>}
     * @memberof AddressLocatorsV1AddressDataModel
     */
    'ids'?: Array<AddressLocatorsV1ApmIdModel> | null;
}

export const AddressLocatorsV1AddressDataModelTypesEnum = {
    Address: 'Address',
    Street: 'Street',
    Suburb: 'Suburb',
    Postcode: 'Postcode',
    State: 'State'
} as const;

export type AddressLocatorsV1AddressDataModelTypesEnum = typeof AddressLocatorsV1AddressDataModelTypesEnum[keyof typeof AddressLocatorsV1AddressDataModelTypesEnum];

/**
 * APMAPIModelsTokenisedSearchV3ApmIdModel
 * @export
 * @interface AddressLocatorsV1ApmIdModel
 */
export interface AddressLocatorsV1ApmIdModel {
    /**
     * Gets or Sets Level
     * @type {string}
     * @memberof AddressLocatorsV1ApmIdModel
     */
    'level'?: AddressLocatorsV1ApmIdModelLevelEnum;
    /**
     * Gets or Sets Id
     * @type {number}
     * @memberof AddressLocatorsV1ApmIdModel
     */
    'id'?: number | null;
}

export const AddressLocatorsV1ApmIdModelLevelEnum = {
    Address: 'Address',
    Street: 'Street',
    Suburb: 'Suburb',
    Postcode: 'Postcode',
    State: 'State'
} as const;

export type AddressLocatorsV1ApmIdModelLevelEnum = typeof AddressLocatorsV1ApmIdModelLevelEnum[keyof typeof AddressLocatorsV1ApmIdModelLevelEnum];

/**
 * AgentDto
 * @export
 * @interface AgenciesV1Agent
 */
export interface AgenciesV1Agent {
    /**
     * Gets or Sets DateUpdated
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'dateUpdated'?: string | null;
    /**
     * Gets or Sets AgencyId
     * @type {number}
     * @memberof AgenciesV1Agent
     */
    'agencyId'?: number | null;
    /**
     * Gets or Sets AgentId
     * @type {number}
     * @memberof AgenciesV1Agent
     */
    'agentId'?: number | null;
    /**
     * Gets or Sets Email
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'email'?: string | null;
    /**
     * Gets or Sets FirstName
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'firstName'?: string | null;
    /**
     * Gets or Sets Mobile
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'mobile'?: string | null;
    /**
     * Gets or Sets Photo
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'photo'?: string | null;
    /**
     * Gets or Sets LastName
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'lastName'?: string | null;
    /**
     * Gets or Sets IsActiveProfilePage
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'isActiveProfilePage'?: string | null;
    /**
     * Gets or Sets Phone
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'phone'?: string | null;
    /**
     * Gets or Sets SaleActive
     * @type {boolean}
     * @memberof AgenciesV1Agent
     */
    'saleActive'?: boolean | null;
    /**
     * Gets or Sets RentalActive
     * @type {boolean}
     * @memberof AgenciesV1Agent
     */
    'rentalActive'?: boolean | null;
    /**
     * Gets or Sets SecondaryEmail
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'secondaryEmail'?: string | null;
    /**
     * Gets or Sets FacebookUrl
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'facebookUrl'?: string | null;
    /**
     * Gets or Sets TwitterUrl
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'twitterUrl'?: string | null;
    /**
     * Gets or Sets AgentVideo
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'agentVideo'?: string | null;
    /**
     * Gets or Sets ProfileText
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'profileText'?: string | null;
    /**
     * Gets or Sets IsHideSoldLeasedListings
     * @type {boolean}
     * @memberof AgenciesV1Agent
     */
    'isHideSoldLeasedListings'?: boolean | null;
    /**
     * Gets or Sets GooglePlusUrl
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'googlePlusUrl'?: string | null;
    /**
     * Gets or Sets PersonalWebsiteUrl
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'personalWebsiteUrl'?: string | null;
    /**
     * Gets or Sets LinkedInUrl
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'linkedInUrl'?: string | null;
    /**
     * Gets or Sets Fax
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'fax'?: string | null;
    /**
     * Gets or Sets MugShotURL
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'mugShotURL'?: string | null;
    /**
     * Gets or Sets MugShotNew
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'mugShotNew'?: string | null;
    /**
     * Gets or Sets ContactTypeCode
     * @type {number}
     * @memberof AgenciesV1Agent
     */
    'contactTypeCode'?: number | null;
    /**
     * Gets or Sets ReceivesRequests
     * @type {boolean}
     * @memberof AgenciesV1Agent
     */
    'receivesRequests'?: boolean | null;
    /**
     * Gets or Sets CreAgentVideoURL
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'creAgentVideoURL'?: string | null;
    /**
     * Gets or Sets ReceiveScheduledReportEmail
     * @type {boolean}
     * @memberof AgenciesV1Agent
     */
    'receiveScheduledReportEmail'?: boolean | null;
    /**
     * Gets or Sets ProfileUrl
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'profileUrl'?: string | null;
    /**
     * Gets or Sets JobPosition
     * @type {string}
     * @memberof AgenciesV1Agent
     */
    'jobPosition'?: string | null;
}
/**
 * Agency
 * @export
 * @interface AgenciesV2Agency
 */
export interface AgenciesV2Agency {
    /**
     * Gets or Sets AccountType
     * @type {string}
     * @memberof AgenciesV2Agency
     */
    'accountType'?: AgenciesV2AgencyAccountTypeEnum;
    /**
     * 
     * @type {AgenciesV2AgencyProfile}
     * @memberof AgenciesV2Agency
     */
    'profile'?: AgenciesV2AgencyProfile;
    /**
     * Gets or Sets DateUpdated
     * @type {string}
     * @memberof AgenciesV2Agency
     */
    'dateUpdated'?: string | null;
    /**
     * Gets or Sets Name
     * @type {string}
     * @memberof AgenciesV2Agency
     */
    'name'?: string | null;
    /**
     * 
     * @type {AgenciesV2AgencyDetails}
     * @memberof AgenciesV2Agency
     */
    'details'?: AgenciesV2AgencyDetails;
    /**
     * Gets or Sets Id
     * @type {number}
     * @memberof AgenciesV2Agency
     */
    'id'?: number | null;
    /**
     * Gets or Sets CreId
     * @type {number}
     * @memberof AgenciesV2Agency
     */
    'creId'?: number | null;
    /**
     * Gets or Sets Agents
     * @type {Array<AgenciesV2ContactInAgencyList>}
     * @memberof AgenciesV2Agency
     */
    'agents'?: Array<AgenciesV2ContactInAgencyList> | null;
    /**
     * 
     * @type {AgenciesV2AgencyContactDetails}
     * @memberof AgenciesV2Agency
     */
    'contactDetails'?: AgenciesV2AgencyContactDetails;
    /**
     * Gets or Sets HomepassEnabled
     * @type {boolean}
     * @memberof AgenciesV2Agency
     */
    'homepassEnabled'?: boolean | null;
    /**
     * Gets or Sets SuburbsServed
     * @type {string}
     * @memberof AgenciesV2Agency
     */
    'suburbsServed'?: string | null;
    /**
     * Gets or Sets SubscribedToAgencyPerformanceReport
     * @type {boolean}
     * @memberof AgenciesV2Agency
     */
    'subscribedToAgencyPerformanceReport'?: boolean | null;
    /**
     * 
     * @type {AgenciesV2AgencyOptions}
     * @memberof AgenciesV2Agency
     */
    'agencyOptions'?: AgenciesV2AgencyOptions;
    /**
     * Gets or Sets WelcomeMessage
     * @type {string}
     * @memberof AgenciesV2Agency
     */
    'welcomeMessage'?: string | null;
    /**
     * Gets or Sets AdFormat
     * @type {string}
     * @memberof AgenciesV2Agency
     */
    'adFormat'?: string | null;
    /**
     * Gets or Sets ProviderAgencyId
     * @type {string}
     * @memberof AgenciesV2Agency
     */
    'providerAgencyId'?: string | null;
}

export const AgenciesV2AgencyAccountTypeEnum = {
    None: 'none',
    Residential: 'residential',
    CommercialLight: 'commercialLight',
    CommercialFull: 'commercialFull',
    Developer: 'developer',
    Holiday: 'holiday',
    Business: 'business'
} as const;

export type AgenciesV2AgencyAccountTypeEnum = typeof AgenciesV2AgencyAccountTypeEnum[keyof typeof AgenciesV2AgencyAccountTypeEnum];

/**
 * AgencyContactDetails
 * @export
 * @interface AgenciesV2AgencyContactDetails
 */
export interface AgenciesV2AgencyContactDetails {
    /**
     * 
     * @type {AgenciesV2EmailPhone}
     * @memberof AgenciesV2AgencyContactDetails
     */
    'businessSale'?: AgenciesV2EmailPhone;
    /**
     * 
     * @type {AgenciesV2EmailPhone}
     * @memberof AgenciesV2AgencyContactDetails
     */
    'businessRent'?: AgenciesV2EmailPhone;
    /**
     * 
     * @type {AgenciesV2EmailPhone}
     * @memberof AgenciesV2AgencyContactDetails
     */
    'commercialLease'?: AgenciesV2EmailPhone;
    /**
     * 
     * @type {AgenciesV2EmailPhone}
     * @memberof AgenciesV2AgencyContactDetails
     */
    'commercialSale'?: AgenciesV2EmailPhone;
    /**
     * Gets or Sets EmailDomains
     * @type {Array<AgenciesV2EmailDomain>}
     * @memberof AgenciesV2AgencyContactDetails
     */
    'emailDomains'?: Array<AgenciesV2EmailDomain> | null;
    /**
     * 
     * @type {AgenciesV2GeneralAgencyContactDetails}
     * @memberof AgenciesV2AgencyContactDetails
     */
    'general'?: AgenciesV2GeneralAgencyContactDetails;
    /**
     * 
     * @type {AgenciesV2EmailPhone}
     * @memberof AgenciesV2AgencyContactDetails
     */
    'residentialRent'?: AgenciesV2EmailPhone;
    /**
     * 
     * @type {AgenciesV2EmailPhone}
     * @memberof AgenciesV2AgencyContactDetails
     */
    'residentialSale'?: AgenciesV2EmailPhone;
}
/**
 * AgencyDetails
 * @export
 * @interface AgenciesV2AgencyDetails
 */
export interface AgenciesV2AgencyDetails {
    /**
     * Gets or Sets StreetAddress1
     * @type {string}
     * @memberof AgenciesV2AgencyDetails
     */
    'streetAddress1': string;
    /**
     * Gets or Sets StreetAddress2
     * @type {string}
     * @memberof AgenciesV2AgencyDetails
     */
    'streetAddress2'?: string | null;
    /**
     * Gets or Sets Suburb
     * @type {string}
     * @memberof AgenciesV2AgencyDetails
     */
    'suburb': string;
    /**
     * Gets or Sets State
     * @type {string}
     * @memberof AgenciesV2AgencyDetails
     */
    'state': string;
    /**
     * Gets or Sets Postcode
     * @type {string}
     * @memberof AgenciesV2AgencyDetails
     */
    'postcode': string;
    /**
     * Gets or Sets AgencyWebsite
     * @type {string}
     * @memberof AgenciesV2AgencyDetails
     */
    'agencyWebsite'?: string | null;
    /**
     * Gets or Sets PrincipalName
     * @type {string}
     * @memberof AgenciesV2AgencyDetails
     */
    'principalName'?: string | null;
    /**
     * Gets or Sets PrincipalEmail
     * @type {string}
     * @memberof AgenciesV2AgencyDetails
     */
    'principalEmail'?: string | null;
    /**
     * Gets or Sets ShowPastSalesPrices
     * @type {boolean}
     * @memberof AgenciesV2AgencyDetails
     */
    'showPastSalesPrices'?: boolean | null;
    /**
     * Gets or Sets IsAgencyReportEnabled
     * @type {boolean}
     * @memberof AgenciesV2AgencyDetails
     */
    'isAgencyReportEnabled'?: boolean | null;
    /**
     * Gets or Sets SalesEmail
     * @type {string}
     * @memberof AgenciesV2AgencyDetails
     */
    'salesEmail'?: string | null;
    /**
     * Gets or Sets RentalEmail
     * @type {string}
     * @memberof AgenciesV2AgencyDetails
     */
    'rentalEmail'?: string | null;
    /**
     * Gets or Sets IsPromotionalTelephoneActive
     * @type {boolean}
     * @memberof AgenciesV2AgencyDetails
     */
    'isPromotionalTelephoneActive'?: boolean | null;
    /**
     * Gets or Sets HideMarketPriceEstimate
     * @type {boolean}
     * @memberof AgenciesV2AgencyDetails
     */
    'hideMarketPriceEstimate': boolean;
    /**
     * Gets or Sets LimitEmailDomain
     * @type {boolean}
     * @memberof AgenciesV2AgencyDetails
     */
    'limitEmailDomain': boolean;
    /**
     * Gets or Sets ShowTabSoldLastYear
     * @type {boolean}
     * @memberof AgenciesV2AgencyDetails
     */
    'showTabSoldLastYear'?: boolean | null;
}
/**
 * AgencyOptions
 * @export
 * @interface AgenciesV2AgencyOptions
 */
export interface AgenciesV2AgencyOptions {
    /**
     * Gets or Sets SaleListingsGstOption
     * @type {number}
     * @memberof AgenciesV2AgencyOptions
     */
    'saleListingsGstOption': number;
    /**
     * Gets or Sets LeaseListingsGstOption
     * @type {number}
     * @memberof AgenciesV2AgencyOptions
     */
    'leaseListingsGstOption': number;
    /**
     * Gets or Sets ReceiveLookForPropertyRequests
     * @type {boolean}
     * @memberof AgenciesV2AgencyOptions
     */
    'receiveLookForPropertyRequests': boolean;
    /**
     * Gets or Sets ReceiveSellPropertyRequests
     * @type {boolean}
     * @memberof AgenciesV2AgencyOptions
     */
    'receiveSellPropertyRequests': boolean;
    /**
     * Gets or Sets ReceivePropertyValuationRequests
     * @type {boolean}
     * @memberof AgenciesV2AgencyOptions
     */
    'receivePropertyValuationRequests': boolean;
    /**
     * Gets or Sets AgentDirectoryListing
     * @type {boolean}
     * @memberof AgenciesV2AgencyOptions
     */
    'agentDirectoryListing': boolean;
}
/**
 * AgencyPhoto
 * @export
 * @interface AgenciesV2AgencyPhoto
 */
export interface AgenciesV2AgencyPhoto {
    /**
     * Gets or Sets Url
     * @type {string}
     * @memberof AgenciesV2AgencyPhoto
     */
    'url'?: string | null;
}
/**
 * AgencyProfile
 * @export
 * @interface AgenciesV2AgencyProfile
 */
export interface AgenciesV2AgencyProfile {
    /**
     * Gets or Sets AgencyPhotos
     * @type {Array<AgenciesV2AgencyPhoto>}
     * @memberof AgenciesV2AgencyProfile
     */
    'agencyPhotos'?: Array<AgenciesV2AgencyPhoto> | null;
    /**
     * Gets or Sets ProfileWebsite
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'profileWebsite'?: string | null;
    /**
     * Gets or Sets AgencyBanner
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'agencyBanner'?: string | null;
    /**
     * Gets or Sets AgencyWebsite
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'agencyWebsite'?: string | null;
    /**
     * Gets or Sets AgencyLogoStandard
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'agencyLogoStandard'?: string | null;
    /**
     * Gets or Sets AgencyLogoSmall
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'agencyLogoSmall'?: string | null;
    /**
     * Gets or Sets LogoColour
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'logoColour'?: string | null;
    /**
     * Gets or Sets PrimaryAgencyColour
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'primaryAgencyColour'?: string | null;
    /**
     * Gets or Sets BackgroundColour
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'backgroundColour'?: string | null;
    /**
     * Gets or Sets MapLatitude
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'mapLatitude'?: string | null;
    /**
     * Gets or Sets MapLongitude
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'mapLongitude'?: string | null;
    /**
     * Gets or Sets MapCertainty
     * @type {number}
     * @memberof AgenciesV2AgencyProfile
     */
    'mapCertainty'?: number | null;
    /**
     * Gets or Sets AgencyVideoUrl
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'agencyVideoUrl'?: string | null;
    /**
     * Gets or Sets AgencyDescription
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'agencyDescription'?: string | null;
    /**
     * Gets or Sets AgencyDescriptionCre
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'agencyDescriptionCre'?: string | null;
    /**
     * Gets or Sets CreProfileWebsite
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'creProfileWebsite'?: string | null;
    /**
     * Gets or Sets AgencyCreBanner
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'agencyCreBanner'?: string | null;
    /**
     * Gets or Sets AgencyCreWebsite
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'agencyCreWebsite'?: string | null;
    /**
     * Gets or Sets AgencyCreLogoStandard
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'agencyCreLogoStandard'?: string | null;
    /**
     * Gets or Sets NumberForSale
     * @type {number}
     * @memberof AgenciesV2AgencyProfile
     */
    'numberForSale'?: number | null;
    /**
     * Gets or Sets NumberForRent
     * @type {number}
     * @memberof AgenciesV2AgencyProfile
     */
    'numberForRent'?: number | null;
    /**
     * Gets or Sets NumberForSaleCommercial
     * @type {number}
     * @memberof AgenciesV2AgencyProfile
     */
    'numberForSaleCommercial'?: number | null;
    /**
     * Gets or Sets NumberForRentCommercial
     * @type {number}
     * @memberof AgenciesV2AgencyProfile
     */
    'numberForRentCommercial'?: number | null;
    /**
     * Gets or Sets CreAgencyVideoUrl
     * @type {string}
     * @memberof AgenciesV2AgencyProfile
     */
    'creAgencyVideoUrl'?: string | null;
}
/**
 * AgencySummary
 * @export
 * @interface AgenciesV2AgencySummary
 */
export interface AgenciesV2AgencySummary {
    /**
     * Gets or Sets InSuburb
     * @type {boolean}
     * @memberof AgenciesV2AgencySummary
     */
    'inSuburb'?: boolean | null;
    /**
     * Gets or Sets QuerySuburb
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'querySuburb'?: string | null;
    /**
     * Gets or Sets HasRecentlySold
     * @type {boolean}
     * @memberof AgenciesV2AgencySummary
     */
    'hasRecentlySold'?: boolean | null;
    /**
     * Gets or Sets Id
     * @type {number}
     * @memberof AgenciesV2AgencySummary
     */
    'id'?: number | null;
    /**
     * Gets or Sets Name
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'name'?: string | null;
    /**
     * Gets or Sets Suburb
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'suburb'?: string | null;
    /**
     * Gets or Sets LogoUrl
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'logoUrl'?: string | null;
    /**
     * Gets or Sets BaseUrl
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'baseUrl'?: string | null;
    /**
     * Gets or Sets Address1
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'address1'?: string | null;
    /**
     * Gets or Sets Address2
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'address2'?: string | null;
    /**
     * Gets or Sets Telephone
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'telephone'?: string | null;
    /**
     * Gets or Sets RentalTelephone
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'rentalTelephone'?: string | null;
    /**
     * Gets or Sets Mobile
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'mobile'?: string | null;
    /**
     * Gets or Sets Fax
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'fax'?: string | null;
    /**
     * Gets or Sets State
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'state'?: string | null;
    /**
     * Gets or Sets Description
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'description'?: string | null;
    /**
     * Gets or Sets Email
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'email'?: string | null;
    /**
     * Gets or Sets RentalEmail
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'rentalEmail'?: string | null;
    /**
     * Gets or Sets HomePageSearchOptions
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'homePageSearchOptions'?: string | null;
    /**
     * Gets or Sets AccountType
     * @type {number}
     * @memberof AgenciesV2AgencySummary
     */
    'accountType'?: number | null;
    /**
     * Gets or Sets NumberForSale
     * @type {number}
     * @memberof AgenciesV2AgencySummary
     */
    'numberForSale'?: number | null;
    /**
     * Gets or Sets NumberForRent
     * @type {number}
     * @memberof AgenciesV2AgencySummary
     */
    'numberForRent'?: number | null;
    /**
     * Gets or Sets DomainUrl
     * @type {string}
     * @memberof AgenciesV2AgencySummary
     */
    'domainUrl'?: string | null;
    /**
     * Gets or Sets ShowTabSoldLastYear
     * @type {boolean}
     * @memberof AgenciesV2AgencySummary
     */
    'showTabSoldLastYear'?: boolean | null;
}
/**
 * ContactInAgencyList
 * @export
 * @interface AgenciesV2ContactInAgencyList
 */
export interface AgenciesV2ContactInAgencyList {
    /**
     * Gets or Sets AgencyId
     * @type {number}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'agencyId'?: number | null;
    /**
     * Gets or Sets Id
     * @type {number}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'id'?: number | null;
    /**
     * Gets or Sets Email
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'email'?: string | null;
    /**
     * Gets or Sets FirstName
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'firstName'?: string | null;
    /**
     * Gets or Sets Mobile
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'mobile'?: string | null;
    /**
     * Gets or Sets Photo
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'photo'?: string | null;
    /**
     * Gets or Sets LastName
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'lastName'?: string | null;
    /**
     * Gets or Sets IsActiveProfilePage
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'isActiveProfilePage'?: string | null;
    /**
     * Gets or Sets Phone
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'phone'?: string | null;
    /**
     * Gets or Sets SaleActive
     * @type {boolean}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'saleActive'?: boolean | null;
    /**
     * Gets or Sets RentalActive
     * @type {boolean}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'rentalActive'?: boolean | null;
    /**
     * Gets or Sets SecondaryEmail
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'secondaryEmail'?: string | null;
    /**
     * Gets or Sets FacebookUrl
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'facebookUrl'?: string | null;
    /**
     * Gets or Sets TwitterUrl
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'twitterUrl'?: string | null;
    /**
     * Gets or Sets AgentVideo
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'agentVideo'?: string | null;
    /**
     * Gets or Sets ProfileText
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'profileText'?: string | null;
    /**
     * Gets or Sets IsHideSoldLeasedListings
     * @type {boolean}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'isHideSoldLeasedListings'?: boolean | null;
    /**
     * Gets or Sets GooglePlusUrl
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'googlePlusUrl'?: string | null;
    /**
     * Gets or Sets PersonalWebsiteUrl
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'personalWebsiteUrl'?: string | null;
    /**
     * Gets or Sets LinkedInUrl
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'linkedInUrl'?: string | null;
    /**
     * Gets or Sets Fax
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'fax'?: string | null;
    /**
     * Gets or Sets MugShotNew
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'mugShotNew'?: string | null;
    /**
     * Gets or Sets ContactTypeCode
     * @type {number}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'contactTypeCode'?: number | null;
    /**
     * Gets or Sets ReceivesRequests
     * @type {boolean}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'receivesRequests'?: boolean | null;
    /**
     * Gets or Sets CreAgentVideoURL
     * @type {string}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'creAgentVideoURL'?: string | null;
    /**
     * Gets or Sets ReceiveScheduledReportEmail
     * @type {boolean}
     * @memberof AgenciesV2ContactInAgencyList
     */
    'receiveScheduledReportEmail'?: boolean | null;
}
/**
 * EmailDomain
 * @export
 * @interface AgenciesV2EmailDomain
 */
export interface AgenciesV2EmailDomain {
    /**
     * Gets or Sets Domain
     * @type {string}
     * @memberof AgenciesV2EmailDomain
     */
    'domain'?: string | null;
}
/**
 * EmailPhone
 * @export
 * @interface AgenciesV2EmailPhone
 */
export interface AgenciesV2EmailPhone {
    /**
     * Gets or Sets Email
     * @type {string}
     * @memberof AgenciesV2EmailPhone
     */
    'email'?: string | null;
    /**
     * Gets or Sets Phone
     * @type {string}
     * @memberof AgenciesV2EmailPhone
     */
    'phone'?: string | null;
}
/**
 * GeneralAgencyContactDetails
 * @export
 * @interface AgenciesV2GeneralAgencyContactDetails
 */
export interface AgenciesV2GeneralAgencyContactDetails {
    /**
     * Gets or Sets Email
     * @type {string}
     * @memberof AgenciesV2GeneralAgencyContactDetails
     */
    'email'?: string | null;
    /**
     * Gets or Sets Fax
     * @type {string}
     * @memberof AgenciesV2GeneralAgencyContactDetails
     */
    'fax'?: string | null;
    /**
     * Gets or Sets Phone
     * @type {string}
     * @memberof AgenciesV2GeneralAgencyContactDetails
     */
    'phone'?: string | null;
    /**
     * Gets or Sets Mobile
     * @type {string}
     * @memberof AgenciesV2GeneralAgencyContactDetails
     */
    'mobile'?: string | null;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1Address
 */
export interface AuthoritiesV1Address {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1Address
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1Address
     */
    'number': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1Address
     */
    'postcode': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1Address
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1Address
     */
    'street': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1Address
     */
    'suburb': string;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1AgentRequest
 */
export interface AuthoritiesV1AgentRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentRequest
     */
    'user'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentRequest
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentRequest
     */
    'officeNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentRequest
     */
    'licenseNumber'?: string;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1AgentResponse
 */
export interface AuthoritiesV1AgentResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentResponse
     */
    'user'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentResponse
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentResponse
     */
    'officeNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AgentResponse
     */
    'licenseNumber'?: string;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1Attachments
 */
export interface AuthoritiesV1Attachments {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1Attachments
     */
    'id'?: string;
    /**
     * 
     * @type {File}
     * @memberof AuthoritiesV1Attachments
     */
    'attachment'?: File;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1Attachments
     */
    'fileType'?: string;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1AuthorityRequest
 */
export interface AuthoritiesV1AuthorityRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'id'?: string;
    /**
     * 
     * @type {AuthoritiesV1Address}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'address': AuthoritiesV1Address;
    /**
     * 
     * @type {Array<AuthoritiesV1MarketingCampaignRequest>}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'marketingCampaigns'?: Array<AuthoritiesV1MarketingCampaignRequest>;
    /**
     * 
     * @type {Array<AuthoritiesV1VendorRequest>}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'vendors'?: Array<AuthoritiesV1VendorRequest>;
    /**
     * 
     * @type {Array<AuthoritiesV1AgentRequest>}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'agents'?: Array<AuthoritiesV1AgentRequest>;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'bathrooms': number;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'bedrooms': number;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'parking': number;
    /**
     * Available options are: `ApartmentUnitFlat`, `House`, `Townhouse`, `VacantLand`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'propertyType': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'modified'?: string;
    /**
     * Available options are: `draft`, `missing sign`, `executed`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'administrationFee'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'agentDetailsDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'auctionDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'auctionType'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'chattelsExcluded'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'chattelsIncluded'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'continuingPeriod'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'espRangeHigher'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'espRangeLower'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'exclusivePeriod'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'exclusivePeriodStartDate'?: string;
    /**
     * Available options are: `Private Sale`, `Expression of Interest with the reserve to be advised prior to closing date`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'exclusiveSoldAs'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'isOwnersCorporationManaged'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'isPropertyTenanted'?: boolean;
    /**
     * Available options are: `With vacant possession`, `Subject to any tenancy`, `Both`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'occupationState'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'optOutInformation'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'payableIn'?: Array<number>;
    /**
     * Available options are: `Full purchase price`, `Payment of full deposit`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'paymentMethod'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'paymentSum'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'reservePrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'salePriceGstType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'saleSignPermission'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'searchCriteriaAmount'?: number;
    /**
     * Available options are: `amount`, `range`, `other`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'searchCriteriaPriceType'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'transactionType'?: string;
    /**
     * Available options are: `Exclusive Auction`, `Exclusive Sale`, `General Sale`, `Appraisal`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'type': string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'vendorMktPriceNa'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'waivedCoolingOff'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'lot'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'plan'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'titleReference'?: string;
    /**
     * This field is unique to SA
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'certificateOfTitleType'?: string;
    /**
     * This field is unique to SA
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'certificateOfTitleFolio'?: string;
    /**
     * This field is unique to SA
     * @type {string}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'certificateOfTitleVolume'?: string;
    /**
     * This field is unique to SA
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'improvedLand'?: boolean;
    /**
     * 
     * @type {AuthoritiesV1CrmDetails}
     * @memberof AuthoritiesV1AuthorityRequest
     */
    'crmDetails'?: AuthoritiesV1CrmDetails;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1AuthorityResponse
 */
export interface AuthoritiesV1AuthorityResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<AuthoritiesV1MarketingCampaignResponse>}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'marketingCampaigns'?: Array<AuthoritiesV1MarketingCampaignResponse>;
    /**
     * 
     * @type {Array<AuthoritiesV1VendorResponse>}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'vendors'?: Array<AuthoritiesV1VendorResponse>;
    /**
     * 
     * @type {Array<AuthoritiesV1AgentResponse>}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'agents'?: Array<AuthoritiesV1AgentResponse>;
    /**
     * 
     * @type {AuthoritiesV1Address}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'address': AuthoritiesV1Address;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'bathrooms': number;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'bedrooms': number;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'parking': number;
    /**
     * Available options are: `ApartmentUnitFlat`, `House`, `Townhouse`, `VacantLand`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'propertyType': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'modified'?: string;
    /**
     * Available options are: `draft`, `missing sign`, `executed`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'administrationFee'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'agentDetailsDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'auctionDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'auctionType'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'chattelsExcluded'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'chattelsIncluded'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'continuingPeriod'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'espRangeHigher'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'espRangeLower'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'exclusivePeriod'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'exclusivePeriodStartDate'?: string;
    /**
     * Available options are: `Private Sale`, `Expression of Interest with the reserve to be advised prior to closing date`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'exclusiveSoldAs'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'isOwnersCorporationManaged'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'isPropertyTenanted'?: boolean;
    /**
     * Available options are: `With vacant possession`, `Subject to any tenancy`, `Both`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'occupationState'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'optOutInformation'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'payableIn'?: Array<number>;
    /**
     * Available options are: `Full purchase price`, `Payment of full deposit`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'paymentMethod'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'paymentSum'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'reservePrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'salePriceGstType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'saleSignPermission'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'searchCriteriaAmount'?: number;
    /**
     * Available options are: `amount`, `range`, `other`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'searchCriteriaPriceType'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'transactionType'?: string;
    /**
     * Available options are: `Exclusive Auction`, `Exclusive Sale`, `General Sale`, `Appraisal`
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'type': string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'vendorMktPriceNa'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'waivedCoolingOff'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'lot'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'plan'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'titleReference'?: string;
    /**
     * This field is unique to SA
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'certificateOfTitleType'?: string;
    /**
     * This field is unique to SA
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'certificateOfTitleFolio'?: string;
    /**
     * This field is unique to SA
     * @type {string}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'certificateOfTitleVolume'?: string;
    /**
     * This field is unique to SA
     * @type {boolean}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'improvedLand'?: boolean;
    /**
     * 
     * @type {AuthoritiesV1CrmDetails}
     * @memberof AuthoritiesV1AuthorityResponse
     */
    'crmDetails'?: AuthoritiesV1CrmDetails;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1CompanyRequest
 */
export interface AuthoritiesV1CompanyRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyRequest
     */
    'id'?: string;
    /**
     * 
     * @type {AuthoritiesV1Address}
     * @memberof AuthoritiesV1CompanyRequest
     */
    'address': AuthoritiesV1Address;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyRequest
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyRequest
     */
    'fax'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyRequest
     */
    'abn'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyRequest
     */
    'acn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1CompanyRequest
     */
    'gstRegistered'?: boolean | null;
    /**
     * Available options are: `individual`, `company`
     * @type {string}
     * @memberof AuthoritiesV1CompanyRequest
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1CompanyResponse
 */
export interface AuthoritiesV1CompanyResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyResponse
     */
    'id': string;
    /**
     * 
     * @type {AuthoritiesV1Address}
     * @memberof AuthoritiesV1CompanyResponse
     */
    'address': AuthoritiesV1Address;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyResponse
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyResponse
     */
    'fax'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyResponse
     */
    'abn'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CompanyResponse
     */
    'acn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1CompanyResponse
     */
    'gstRegistered'?: boolean | null;
    /**
     * Available options are: `individual`, `company`
     * @type {string}
     * @memberof AuthoritiesV1CompanyResponse
     */
    'type'?: string;
}
/**
 * Details of CRM
 * @export
 * @interface AuthoritiesV1CrmDetails
 */
export interface AuthoritiesV1CrmDetails {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CrmDetails
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1CrmDetails
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1IndividualRequest
 */
export interface AuthoritiesV1IndividualRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualRequest
     */
    'id'?: string;
    /**
     * 
     * @type {AuthoritiesV1Address}
     * @memberof AuthoritiesV1IndividualRequest
     */
    'address': AuthoritiesV1Address;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualRequest
     */
    'dateOfBirth'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualRequest
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualRequest
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualRequest
     */
    'mobile': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualRequest
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualRequest
     */
    'title'?: string;
    /**
     * Available options are: `individual`, `company`
     * @type {string}
     * @memberof AuthoritiesV1IndividualRequest
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1IndividualResponse
 */
export interface AuthoritiesV1IndividualResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualResponse
     */
    'id': string;
    /**
     * 
     * @type {AuthoritiesV1Address}
     * @memberof AuthoritiesV1IndividualResponse
     */
    'address': AuthoritiesV1Address;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualResponse
     */
    'dateOfBirth'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualResponse
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualResponse
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualResponse
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualResponse
     */
    'mobile': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualResponse
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1IndividualResponse
     */
    'title'?: string;
    /**
     * Available options are: `individual`, `company`
     * @type {string}
     * @memberof AuthoritiesV1IndividualResponse
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1MarketingCampaignItemRequest
 */
export interface AuthoritiesV1MarketingCampaignItemRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignItemRequest
     */
    'itemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignItemRequest
     */
    'finalPrice'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignItemRequest
     */
    'vendorPrice'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignItemRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1MarketingCampaignItemRequest
     */
    'selected'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1MarketingCampaignItemRequest
     */
    'hidden'?: boolean;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1MarketingCampaignItemResponse
 */
export interface AuthoritiesV1MarketingCampaignItemResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignItemResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignItemResponse
     */
    'itemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignItemResponse
     */
    'finalPrice'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignItemResponse
     */
    'vendorPrice'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignItemResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1MarketingCampaignItemResponse
     */
    'selected'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1MarketingCampaignItemResponse
     */
    'hidden'?: boolean;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1MarketingCampaignRequest
 */
export interface AuthoritiesV1MarketingCampaignRequest {
    /**
     * advertising cost of this marketing campaign
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignRequest
     */
    'advertising'?: string;
    /**
     * Available options are: `To Be Advised`, `Paper Based`, `Campaign Track`, `Realhub`
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignRequest
     */
    'campaignType': string;
    /**
     * 
     * @type {Array<AuthoritiesV1MarketingCampaignItemRequest>}
     * @memberof AuthoritiesV1MarketingCampaignRequest
     */
    'marketingCampaignItems'?: Array<AuthoritiesV1MarketingCampaignItemRequest>;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignRequest
     */
    'comments'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignRequest
     */
    'commentsFallback'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignRequest
     */
    'discountAmount'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignRequest
     */
    'discountPercent'?: string | null;
    /**
     * Available options are: `Signing of this Authority`, `Written request`, `Specific Date`, `Signing of this Form 6`, `Signing of this Agency Agreement`, `Upon Invoice or Account`, `Prior to the commencement of marketing campaign`, `On Settlement or Withdrawal whichever occurs first`, `Vendor to pay through Campaign Agent v2`, `Vendor to pay through Market Now`, `Vendor to pay through Rello`, `Vendor to pay through List Ready`
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignRequest
     */
    'expense'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignRequest
     */
    'other'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignRequest
     */
    'payableOn'?: string | null;
    /**
     * Total cost of this marketing campaign. Total of the items cost if there are items or (advertising + other) cost for other types
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignRequest
     */
    'total'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignRequest
     */
    'realhubQuoteId'?: string | null;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1MarketingCampaignResponse
 */
export interface AuthoritiesV1MarketingCampaignResponse {
    /**
     * 
     * @type {Array<AuthoritiesV1MarketingCampaignItemResponse>}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'marketingCampaignItems'?: Array<AuthoritiesV1MarketingCampaignItemResponse>;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'id': string;
    /**
     * advertising cost of this marketing campaign
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'advertising'?: string;
    /**
     * Available options are: `To Be Advised`, `Paper Based`, `Campaign Track`, `Realhub`
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'campaignType': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'comments'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'commentsFallback'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'discountAmount'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'discountPercent'?: string | null;
    /**
     * Available options are: `Signing of this Authority`, `Written request`, `Specific Date`, `Signing of this Form 6`, `Signing of this Agency Agreement`, `Upon Invoice or Account`, `Prior to the commencement of marketing campaign`, `On Settlement or Withdrawal whichever occurs first`, `Vendor to pay through Campaign Agent v2`, `Vendor to pay through Market Now`, `Vendor to pay through Rello`, `Vendor to pay through List Ready`
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'expense'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'other'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'payableOn'?: string | null;
    /**
     * Total cost of this marketing campaign. Total of the items cost if there are items or (advertising + other) cost for other types
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'total'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1MarketingCampaignResponse
     */
    'realhubQuoteId'?: string | null;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1SubscriptionRequest
 */
export interface AuthoritiesV1SubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1SubscriptionRequest
     */
    'webhookId'?: string;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1SubscriptionResponse
 */
export interface AuthoritiesV1SubscriptionResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1SubscriptionResponse
     */
    'subscriptionId'?: string;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1VendorAttachments
 */
export interface AuthoritiesV1VendorAttachments {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1VendorAttachments
     */
    'id'?: string;
    /**
     * 
     * @type {File}
     * @memberof AuthoritiesV1VendorAttachments
     */
    'attachment'?: File;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1VendorRequest
 */
export interface AuthoritiesV1VendorRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1VendorRequest
     */
    'id'?: string;
    /**
     * 
     * @type {AuthoritiesV1IndividualRequest}
     * @memberof AuthoritiesV1VendorRequest
     */
    'contact': AuthoritiesV1IndividualRequest;
    /**
     * 
     * @type {AuthoritiesV1CompanyRequest}
     * @memberof AuthoritiesV1VendorRequest
     */
    'contactRepresented'?: AuthoritiesV1CompanyRequest;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1VendorRequest
     */
    'conciergeOptedIn'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1VendorRequest
     */
    'nature': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1VendorRequest
     */
    'trust'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1VendorRequest
     */
    'order': number;
    /**
     * An array of attachment IDs.
     * @type {Array<string>}
     * @memberof AuthoritiesV1VendorRequest
     */
    'authorityAttachments'?: Array<string>;
}
/**
 * 
 * @export
 * @interface AuthoritiesV1VendorResponse
 */
export interface AuthoritiesV1VendorResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1VendorResponse
     */
    'id': string;
    /**
     * 
     * @type {AuthoritiesV1IndividualResponse}
     * @memberof AuthoritiesV1VendorResponse
     */
    'contact': AuthoritiesV1IndividualResponse;
    /**
     * 
     * @type {AuthoritiesV1CompanyResponse}
     * @memberof AuthoritiesV1VendorResponse
     */
    'contactRepresented'?: AuthoritiesV1CompanyResponse;
    /**
     * 
     * @type {boolean}
     * @memberof AuthoritiesV1VendorResponse
     */
    'conciergeOptedIn'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1VendorResponse
     */
    'nature': string;
    /**
     * 
     * @type {string}
     * @memberof AuthoritiesV1VendorResponse
     */
    'trust'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AuthoritiesV1VendorResponse
     */
    'order': number;
    /**
     * An array of attachment IDs.
     * @type {Array<string>}
     * @memberof AuthoritiesV1VendorResponse
     */
    'authorityAttachments'?: Array<string>;
}
/**
 * NewListingRateResponse
 * @export
 * @interface BookingsV2RateForNewListing
 */
export interface BookingsV2RateForNewListing {
    /**
     * Gets or Sets CostExGst
     * @type {number}
     * @memberof BookingsV2RateForNewListing
     */
    'costExGst'?: number | null;
    /**
     * Gets or Sets CostIncGst
     * @type {number}
     * @memberof BookingsV2RateForNewListing
     */
    'costIncGst'?: number | null;
    /**
     * Gets or Sets ContractEndDate
     * @type {string}
     * @memberof BookingsV2RateForNewListing
     */
    'contractEndDate'?: string | null;
    /**
     * Gets or Sets Message
     * @type {string}
     * @memberof BookingsV2RateForNewListing
     */
    'message'?: string | null;
    /**
     * Gets or Sets PriceMatrixId
     * @type {number}
     * @memberof BookingsV2RateForNewListing
     */
    'priceMatrixId'?: number | null;
    /**
     * Gets or Sets ProductName
     * @type {string}
     * @memberof BookingsV2RateForNewListing
     */
    'productName'?: string | null;
}
/**
 * Provide a summary of the intended listing for which to calculate a rate.
 * @export
 * @interface BookingsV2RateForNewListingRequest
 */
export interface BookingsV2RateForNewListingRequest {
    /**
     * Id of the agency for whom rates are to be calculated.
     * @type {number}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'agencyId': number;
    /**
     * The first name of the primary agent associated with the listing.
     * @type {string}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'agentFirstName': string;
    /**
     * The last name of the primary agent associated with the listing
     * @type {string}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'agentLastName': string;
    /**
     * The email of the primary agent associated with the listing.
     * @type {string}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'agentEmail': string;
    /**
     * Suburb for which rates are to be calculated.
     * @type {string}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'suburb': string;
    /**
     * Postcode for which rates are to be calculated.
     * @type {string}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'postcode': string;
    /**
     * State for which rates are to be calculated
     * @type {string}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'state': string;
    /**
     * The property type of the listing e.g. House
     * @type {string}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'propertyType': BookingsV2RateForNewListingRequestPropertyTypeEnum;
    /**
     * Whether to return the normal or new development rates
     * @type {boolean}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'isNewDevelopment': boolean;
    /**
     * Type of the listing whether sale or rent
     * @type {string}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'listingType': BookingsV2RateForNewListingRequestListingTypeEnum;
    /**
     * The value of the listing
     * @type {number}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'price': number;
    /**
     * The intended channel of the listing.
     * @type {string}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'channel': BookingsV2RateForNewListingRequestChannelEnum;
    /**
     * Date at which the booking will start. Defaults to today. Allows for returning future contracts/price changes.
     * @type {string}
     * @memberof BookingsV2RateForNewListingRequest
     */
    'bookingStartDate'?: string | null;
}

export const BookingsV2RateForNewListingRequestPropertyTypeEnum = {
    Unknown: 'unknown',
    AcreageSemiRural: 'acreageSemiRural',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    BlockOfUnits: 'blockOfUnits',
    Carspace: 'carspace',
    DairyFarming: 'dairyFarming',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Duplex: 'duplex',
    Farm: 'farm',
    FishingForestry: 'fishingForestry',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HotelLeisure: 'hotelLeisure',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    IndustrialWarehouse: 'industrialWarehouse',
    IrrigationServices: 'irrigationServices',
    NewLand: 'newLand',
    Livestock: 'livestock',
    International: 'international',
    MedicalConsulting: 'medicalConsulting',
    NewApartments: 'newApartments',
    Offices: 'offices',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    Retail: 'retail',
    Retirement: 'retirement',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    SemiDetached: 'semiDetached',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    Studio: 'studio',
    Terrace: 'terrace',
    Townhouse: 'townhouse',
    VacantLand: 'vacantLand',
    Villa: 'villa',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
} as const;

export type BookingsV2RateForNewListingRequestPropertyTypeEnum = typeof BookingsV2RateForNewListingRequestPropertyTypeEnum[keyof typeof BookingsV2RateForNewListingRequestPropertyTypeEnum];
export const BookingsV2RateForNewListingRequestListingTypeEnum = {
    Sale: 'sale',
    Rent: 'rent'
} as const;

export type BookingsV2RateForNewListingRequestListingTypeEnum = typeof BookingsV2RateForNewListingRequestListingTypeEnum[keyof typeof BookingsV2RateForNewListingRequestListingTypeEnum];
export const BookingsV2RateForNewListingRequestChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
} as const;

export type BookingsV2RateForNewListingRequestChannelEnum = typeof BookingsV2RateForNewListingRequestChannelEnum[keyof typeof BookingsV2RateForNewListingRequestChannelEnum];

/**
 * DemographicsModel
 * @export
 * @interface DemographicsV2Demographics
 */
export interface DemographicsV2Demographics {
    /**
     * Gets or Sets Type
     * @type {string}
     * @memberof DemographicsV2Demographics
     */
    'type'?: string | null;
    /**
     * Gets or Sets Total
     * @type {number}
     * @memberof DemographicsV2Demographics
     */
    'total'?: number | null;
    /**
     * Gets or Sets Year
     * @type {number}
     * @memberof DemographicsV2Demographics
     */
    'year'?: number | null;
    /**
     * Gets or Sets Items
     * @type {Array<DemographicsV2DemographicsItem>}
     * @memberof DemographicsV2Demographics
     */
    'items'?: Array<DemographicsV2DemographicsItem> | null;
}
/**
 * DemographicsItemModel
 * @export
 * @interface DemographicsV2DemographicsItem
 */
export interface DemographicsV2DemographicsItem {
    /**
     * Gets or Sets Label
     * @type {string}
     * @memberof DemographicsV2DemographicsItem
     */
    'label'?: string | null;
    /**
     * Gets or Sets Value
     * @type {number}
     * @memberof DemographicsV2DemographicsItem
     */
    'value'?: number | null;
    /**
     * Gets or Sets Composition
     * @type {string}
     * @memberof DemographicsV2DemographicsItem
     */
    'composition'?: string | null;
}
/**
 * DemographicsResultsModel
 * @export
 * @interface DemographicsV2DemographicsResults
 */
export interface DemographicsV2DemographicsResults {
    /**
     * Gets or Sets Demographics
     * @type {Array<DemographicsV2Demographics>}
     * @memberof DemographicsV2DemographicsResults
     */
    'demographics'?: Array<DemographicsV2Demographics> | null;
}
/**
 * APMAPIModelsDisclaimerV2DisclaimerModel
 * @export
 * @interface DisclaimersV1DisclaimerModel
 */
export interface DisclaimersV1DisclaimerModel {
    /**
     * Gets or Sets Id
     * @type {string}
     * @memberof DisclaimersV1DisclaimerModel
     */
    'id'?: string | null;
    /**
     * Gets or Sets Version
     * @type {string}
     * @memberof DisclaimersV1DisclaimerModel
     */
    'version'?: string | null;
    /**
     * Gets or Sets Text
     * @type {string}
     * @memberof DisclaimersV1DisclaimerModel
     */
    'text'?: string | null;
    /**
     * Gets or Sets Imageurl
     * @type {string}
     * @memberof DisclaimersV1DisclaimerModel
     */
    'imageurl'?: string | null;
    /**
     * Gets or Sets Authorityname
     * @type {string}
     * @memberof DisclaimersV1DisclaimerModel
     */
    'authorityname'?: string | null;
}
/**
 * 
 * @export
 * @interface DomainAgentSearchV1ModelAutoSuggestAgentResultDto
 */
export interface DomainAgentSearchV1ModelAutoSuggestAgentResultDto {
    /**
     * 
     * @type {number}
     * @memberof DomainAgentSearchV1ModelAutoSuggestAgentResultDto
     */
    'agentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainAgentSearchV1ModelAutoSuggestAgentResultDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainAgentSearchV1ModelAutoSuggestAgentResultDto
     */
    'agencyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainAgentSearchV1ModelAutoSuggestAgentResultDto
     */
    'suburb'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainAgentSearchV1ModelAutoSuggestAgentResultDto
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainAgentSearchV1ModelAutoSuggestAgentResultDto
     */
    'profileUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainAgentSearchV1ModelAutoSuggestAgentResultDto
     */
    'thumbnail'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DomainAvmPIV1ConfidenceEnum = {
    High: 'high',
    Medium: 'medium',
    Low: 'low'
} as const;

export type DomainAvmPIV1ConfidenceEnum = typeof DomainAvmPIV1ConfidenceEnum[keyof typeof DomainAvmPIV1ConfidenceEnum];


/**
 * 
 * @export
 * @interface DomainAvmPIV1ProblemDetails
 */
export interface DomainAvmPIV1ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof DomainAvmPIV1ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DomainAvmPIV1ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DomainAvmPIV1ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof DomainAvmPIV1ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DomainAvmPIV1ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface DomainAvmPIV1PropertyPriceEstimate
 */
export interface DomainAvmPIV1PropertyPriceEstimate {
    /**
     * 
     * @type {string}
     * @memberof DomainAvmPIV1PropertyPriceEstimate
     */
    'date'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DomainAvmPIV1PropertyPriceEstimate
     */
    'lowerPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DomainAvmPIV1PropertyPriceEstimate
     */
    'midPrice'?: number | null;
    /**
     * 
     * @type {DomainAvmPIV1ConfidenceEnum}
     * @memberof DomainAvmPIV1PropertyPriceEstimate
     */
    'priceConfidence'?: DomainAvmPIV1ConfidenceEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainAvmPIV1PropertyPriceEstimate
     */
    'source'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DomainAvmPIV1PropertyPriceEstimate
     */
    'upperPrice'?: number | null;
    /**
     * 
     * @type {Array<DomainAvmPIV1PropertyPriceEstimateHistory>}
     * @memberof DomainAvmPIV1PropertyPriceEstimate
     */
    'history'?: Array<DomainAvmPIV1PropertyPriceEstimateHistory> | null;
}


/**
 * 
 * @export
 * @interface DomainAvmPIV1PropertyPriceEstimateHistory
 */
export interface DomainAvmPIV1PropertyPriceEstimateHistory {
    /**
     * 
     * @type {DomainAvmPIV1ConfidenceEnum}
     * @memberof DomainAvmPIV1PropertyPriceEstimateHistory
     */
    'confidence'?: DomainAvmPIV1ConfidenceEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainAvmPIV1PropertyPriceEstimateHistory
     */
    'date'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DomainAvmPIV1PropertyPriceEstimateHistory
     */
    'lowerPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DomainAvmPIV1PropertyPriceEstimateHistory
     */
    'midPrice'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof DomainAvmPIV1PropertyPriceEstimateHistory
     */
    'source'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DomainAvmPIV1PropertyPriceEstimateHistory
     */
    'upperPrice'?: number | null;
}


/**
 * 
 * @export
 * @interface DomainAvmPIV1RentalEstimate
 */
export interface DomainAvmPIV1RentalEstimate {
    /**
     * 
     * @type {number}
     * @memberof DomainAvmPIV1RentalEstimate
     */
    'weeklyRentEstimate'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DomainAvmPIV1RentalEstimate
     */
    'percentYieldRentEstimate'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DomainAvmPIV1RentalEstimate
     */
    'rentalFsd'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof DomainAvmPIV1RentalEstimate
     */
    'estimateDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DomainAvmPIV1RentalEstimate
     */
    'propertyType'?: string | null;
}
/**
 * The Address model used.
 * @export
 * @interface DomainAvmV1Address
 */
export interface DomainAvmV1Address {
    /**
     * The unit number of the address.
     * @type {string}
     * @memberof DomainAvmV1Address
     */
    'unitNumber'?: string | null;
    /**
     * The street number of the address.
     * @type {string}
     * @memberof DomainAvmV1Address
     */
    'streetNumber'?: string | null;
    /**
     * The street name of the address.
     * @type {string}
     * @memberof DomainAvmV1Address
     */
    'streetName'?: string | null;
    /**
     * The street type of the address.
     * @type {string}
     * @memberof DomainAvmV1Address
     */
    'streetType'?: string | null;
    /**
     * The suburb/locality of the address.
     * @type {string}
     * @memberof DomainAvmV1Address
     */
    'locality'?: string | null;
    /**
     * The postcode of the address.
     * @type {string}
     * @memberof DomainAvmV1Address
     */
    'postcode'?: string | null;
    /**
     * The defined State or Territory in Australia (in abbreviated format) where the specific address is located.
     * @type {string}
     * @memberof DomainAvmV1Address
     */
    'state'?: string | null;
}
/**
 * 
 * @export
 * @interface DomainAvmV1ProblemDetails
 */
export interface DomainAvmV1ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof DomainAvmV1ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DomainAvmV1ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DomainAvmV1ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof DomainAvmV1ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DomainAvmV1ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * The model used to request a bank grade valuation.
 * @export
 * @interface DomainAvmV1Request
 */
export interface DomainAvmV1Request {
    /**
     * The client identification for the valuation transaction.
     * @type {string}
     * @memberof DomainAvmV1Request
     */
    'valExJobNumber': string;
    /**
     * 
     * @type {DomainAvmV1Address}
     * @memberof DomainAvmV1Request
     */
    'address'?: DomainAvmV1Address;
    /**
     * The purchase price of the property to nearest AUD.
     * @type {number}
     * @memberof DomainAvmV1Request
     */
    'purchasePrice'?: number | null;
    /**
     * Property type to be used when estimating value of property. Valid values: [House, Unit].
     * @type {string}
     * @memberof DomainAvmV1Request
     */
    'propertyType'?: string | null;
    /**
     * Land area in square meters to be used when estimating value of property, for houses only not units.
     * @type {number}
     * @memberof DomainAvmV1Request
     */
    'landarea'?: number | null;
    /**
     * Number of bedrooms to be used when estimating value of property.
     * @type {number}
     * @memberof DomainAvmV1Request
     */
    'bedrooms'?: number | null;
    /**
     * Number of bathrooms to be used when estimating value of property.
     * @type {number}
     * @memberof DomainAvmV1Request
     */
    'bathrooms'?: number | null;
    /**
     * Number of carparks to be used when estimating value of property.
     * @type {number}
     * @memberof DomainAvmV1Request
     */
    'carparks'?: number | null;
    /**
     * Geocoded National Address File. A G-NAF Persistent ID is a unique combination of address detail used to identify each property in Australia.
     * @type {string}
     * @memberof DomainAvmV1Request
     */
    'gnafPId'?: string | null;
}
/**
 * The response model used to provide the bank grade valuation.
 * @export
 * @interface DomainAvmV1Response
 */
export interface DomainAvmV1Response {
    /**
     * The client identification for the valuation transaction from request.
     * @type {string}
     * @memberof DomainAvmV1Response
     */
    'valExJobNumber'?: string | null;
    /**
     * The estimate.
     * @type {number}
     * @memberof DomainAvmV1Response
     */
    'estimate'?: number | null;
    /**
     * The estimate low range.
     * @type {number}
     * @memberof DomainAvmV1Response
     */
    'estimateLow'?: number | null;
    /**
     * The estimate high range.
     * @type {number}
     * @memberof DomainAvmV1Response
     */
    'estimateHigh'?: number | null;
    /**
     * The confidence level of the estimates.
     * @type {string}
     * @memberof DomainAvmV1Response
     */
    'confidence'?: string | null;
    /**
     * The forecast standard deviation of the property.
     * @type {number}
     * @memberof DomainAvmV1Response
     */
    'percentFsd'?: number | null;
    /**
     * The date the estimates were generated.
     * @type {string}
     * @memberof DomainAvmV1Response
     */
    'estimateDate'?: string | null;
    /**
     * Property type used when estimating the value of property. Valid values: [House, Unit].
     * @type {string}
     * @memberof DomainAvmV1Response
     */
    'propertyType'?: string | null;
    /**
     * The year of construction.
     * @type {string}
     * @memberof DomainAvmV1Response
     */
    'yearBuilt'?: string | null;
    /**
     * The amount of bedrooms.
     * @type {number}
     * @memberof DomainAvmV1Response
     */
    'bedrooms'?: number | null;
    /**
     * The amount of bathrooms.
     * @type {number}
     * @memberof DomainAvmV1Response
     */
    'bathrooms'?: number | null;
    /**
     * The amount of carparks.
     * @type {number}
     * @memberof DomainAvmV1Response
     */
    'carparks'?: number | null;
    /**
     * Building area in square meters to be used when estimating value of property, for houses only not units.
     * @type {number}
     * @memberof DomainAvmV1Response
     */
    'buildingArea'?: number | null;
    /**
     * Land area in square meters to be used when estimating value of property, for houses only not units.
     * @type {number}
     * @memberof DomainAvmV1Response
     */
    'landArea'?: number | null;
    /**
     * 
     * @type {DomainAvmV1Address}
     * @memberof DomainAvmV1Response
     */
    'address'?: DomainAvmV1Address;
    /**
     * The B64 encoded pdf of the valuation report.
     * @type {string}
     * @memberof DomainAvmV1Response
     */
    'report'?: string | null;
}
/**
 * 
 * @export
 * @interface DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse
 */
export interface DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse {
    /**
     * 
     * @type {string}
     * @memberof DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse
     */
    's3Key'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse
     */
    'enquiryReceiptTimestamp'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse
     */
    'warnings'?: Array<string>;
}
/**
 * Address structure for property
 * @export
 * @interface DomainListingAdminServiceV1ModelAddress
 */
export interface DomainListingAdminServiceV1ModelAddress {
    /**
     * What granularity to display the properties location at. For residential listings, the accepted displayOption values are `FullAddress`, `StreetAndSuburb` or `SuburbOnly`.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelAddress
     */
    'displayOption'?: DomainListingAdminServiceV1ModelAddressDisplayOptionEnum;
    /**
     * State
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelAddress
     */
    'state'?: DomainListingAdminServiceV1ModelAddressStateEnum;
    /**
     * Unit number for apartments, maximum 30 characters
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelAddress
     */
    'unitNumber'?: string;
    /**
     * Street name, maximum 100 characters
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelAddress
     */
    'street'?: string;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelGeoLocation}
     * @memberof DomainListingAdminServiceV1ModelAddress
     */
    'suggestedGeoLocation'?: DomainListingAdminServiceV1ModelGeoLocation;
    /**
     * Street number, maximum 20 characters
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelAddress
     */
    'streetNumber'?: string;
    /**
     * Suburb name , maximum 50 characters
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelAddress
     */
    'suburb'?: string;
    /**
     * Postcode
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelAddress
     */
    'postcode'?: string;
}

export const DomainListingAdminServiceV1ModelAddressDisplayOptionEnum = {
    Unspecified: 'unspecified',
    FullAddress: 'fullAddress',
    StreetAndSuburb: 'streetAndSuburb',
    SuburbOnly: 'suburbOnly',
    RegionOnly: 'regionOnly',
    AreaOnly: 'areaOnly',
    StateOnly: 'stateOnly'
} as const;

export type DomainListingAdminServiceV1ModelAddressDisplayOptionEnum = typeof DomainListingAdminServiceV1ModelAddressDisplayOptionEnum[keyof typeof DomainListingAdminServiceV1ModelAddressDisplayOptionEnum];
export const DomainListingAdminServiceV1ModelAddressStateEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Act: 'act',
    Sa: 'sa',
    Wa: 'wa',
    Tas: 'tas',
    Qld: 'qld',
    Nt: 'nt'
} as const;

export type DomainListingAdminServiceV1ModelAddressStateEnum = typeof DomainListingAdminServiceV1ModelAddressStateEnum[keyof typeof DomainListingAdminServiceV1ModelAddressStateEnum];

/**
 * Area information, Either single value or from and To must be provided
 * @export
 * @interface DomainListingAdminServiceV1ModelArea
 */
export interface DomainListingAdminServiceV1ModelArea {
    /**
     * Unit of measure, defaults to SquareMetres if not provided.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelArea
     */
    'unit'?: DomainListingAdminServiceV1ModelAreaUnitEnum;
    /**
     * Area. Will be rounded to 2 decimals.
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelArea
     */
    'value'?: number;
    /**
     * Minimum area
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelArea
     */
    'from'?: number;
    /**
     * Maximum area
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelArea
     */
    'to'?: number;
}

export const DomainListingAdminServiceV1ModelAreaUnitEnum = {
    SquareMetres: 'squareMetres',
    Acres: 'acres',
    Hectares: 'hectares',
    SquareFeet: 'squareFeet',
    SquareYards: 'squareYards',
    Squares: 'squares'
} as const;

export type DomainListingAdminServiceV1ModelAreaUnitEnum = typeof DomainListingAdminServiceV1ModelAreaUnitEnum[keyof typeof DomainListingAdminServiceV1ModelAreaUnitEnum];

/**
 * Auction Details
 * @export
 * @interface DomainListingAdminServiceV1ModelAuction
 */
export interface DomainListingAdminServiceV1ModelAuction {
    /**
     * Date of the auction. format: yyyy-MM-ddTHH:mm:ss
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelAuction
     */
    'dateTime'?: string;
    /**
     * Optional. Venue for the Auction. String max 100 characters. If the Location is omitted, or included but empty, the Venue will default to \\\"On Site\\\".
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelAuction
     */
    'location'?: string;
    /**
     * Optional on-line auction URL. Must be a valid URL and maximum 255 characters. If an empty string is received, the property will be re-set.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelAuction
     */
    'url'?: string;
}
/**
 * Basic price information
 * @export
 * @interface DomainListingAdminServiceV1ModelBasicPrice
 */
export interface DomainListingAdminServiceV1ModelBasicPrice {
    /**
     * Lowest price the property is expected to sell/rent for to set search price. For a fixed price, set this value the same as To
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelBasicPrice
     */
    'from'?: number;
    /**
     * Highest price the property is expected to sell/rent for to set search price.   For a fixed price, set this value the same as From
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelBasicPrice
     */
    'to'?: number;
}
/**
 * Business Listing
 * @export
 * @interface DomainListingAdminServiceV1ModelBusinessListing
 */
export interface DomainListingAdminServiceV1ModelBusinessListing {
    /**
     * Sale or Rent
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'listingAction'?: DomainListingAdminServiceV1ModelBusinessListingListingActionEnum;
    /**
     * Indicates the listing preferred contact method. Default by both phone and email if not provided.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'contactPreference'?: DomainListingAdminServiceV1ModelBusinessListingContactPreferenceEnum;
    /**
     * Set for Sale listings only
     * @type {boolean}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'underOfferOrContract'?: boolean;
    /**
     * The NABERS Rating is the energy efficiency rating that the property has been measured to have.   This rating is measured in increments of .5 and can range from 0 to 6.   The NABERS rating is required for spaces within office buildings of 1000 square metres or more.  For more information on the NABERS rating system please visit http://www.nabers.gov.au
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'nabers'?: number;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelBusinessProperty}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'propertyDetails'?: DomainListingAdminServiceV1ModelBusinessProperty;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelLeaseHoldDetail}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'leaseHoldDetails'?: DomainListingAdminServiceV1ModelLeaseHoldDetail;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelSaleInfo}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'saleInfo'?: DomainListingAdminServiceV1ModelSaleInfo;
    /**
     * The ad id of the commercial property with a freehold that the business belongs to.   Leasehold and freehold are mutually exclusive properties, only specify one
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'freeholdCommercialAdId'?: number;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelPrice}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'price'?: DomainListingAdminServiceV1ModelPrice;
    /**
     * Domain Advertisement Id, not applicable for creating new ads.  Mandatory when updating a listing that belongs to an agency that  is in the process of being migrated between listing providers.
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'domainAdId'?: number;
    /**
     * The Domain Agency Id number
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'domainAgencyID'?: number;
    /**
     * External Advertisement Id of up to 50 characters will be stored.&lt;br /&gt;  This value is used to identify an Advertisement for updates and should be unique for listing provider.&lt;br /&gt;  This value is case-insensitive (meaning AAAA will update aaaa).
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'providerAdId'?: string;
    /**
     * Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.  INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.  OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.  LOCATION: Ground floor, Water Views, North Facing, City Views.  ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'features'?: string;
    /**
     * Description of the property.  6000 characters in length. The following HTML elements are permitted: &amp;lt;br /&amp;gt;, &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;, &amp;amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade.  Unicode characters which are unsupported by Latin-1 (ISO-8859-1 range from U+0080 to U+00FF), will be removed https://en.wikipedia.org/wiki/ISO/IEC_8859-1
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'description'?: string;
    /**
     * \'Headline\' Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'summary'?: string;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelInspectionDetails}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'inspectionDetails'?: DomainListingAdminServiceV1ModelInspectionDetails;
    /**
     * Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters.
     * @type {Array<DomainListingAdminServiceV1ModelPropertyMedia>}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'media'?: Array<DomainListingAdminServiceV1ModelPropertyMedia>;
    /**
     * Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.
     * @type {Array<DomainListingAdminServiceV1ModelContact>}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'contacts'?: Array<DomainListingAdminServiceV1ModelContact>;
    /**
     * Sets an additional Email Address to which enquiries on the Listing will be sent
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'otherEnquiryEmail'?: string;
    /**
     * Send email enquiries to the default address for this listing type
     * @type {boolean}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'receiveEmailsToDefaultAddress'?: boolean;
    /**
     * True if the property is rural
     * @type {boolean}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'isRural'?: boolean;
    /**
     * Rural attributes    *Improvements* (optional)    Available `types` (fixed list, optional):  * Machinery Shed  * Shearing Shed  * Workshop  * Shearers Quarters  * Silos  * Other Housing  * Managers Accommodation    *Fencing* (optional)    `description` (string, optional): free text fencing description, maximum 250 characters.    *Yards* (optional)    Available `types` (fixed list, optional):  * Sheep  * Cattle    *Homestead* (optional)    `description` (string, optional): description of the homestead and construction, maximum 250 characters.    `metadata` (optional)  * `area` (decimal, optional): homestead area in square metres.    Available `types` (fixed list, optional):  * Office  * Ensuite  * Tennis Court  * Mains Gas  * Floorboards  * Internal Laundry    *Water* (optional)    `description` (string, optional): water comments, maximum 250 characters.    Available `types` (fixed list, optional):  * Tank  * Well  * Reticulated  * Bores  * Springs  * Creeks  * Dams  * River    *Crops* (optional)    `description` (string, optional): description of the crops, maximum 250 characters.    `metadata` (optional)  * `croppedAnnually` (decimal, optional): average annual area cropped in hectares.  * `fallowAnnually` (decimal, optional): average annual fallow area in hectares.  * `pastures` (string, optional): description of pastures available, maximum 250 characters.    *Livestock* (optional)    `description` (string, optional): additional comments, maximum 250 characters.    `metadata` (optional)  * `capacity` (decimal, optional): property carrying capacity in DSE (unit of carry capacity).    Available `types` (fixed list, optional):  * Sheep  * Pigs  * Cattle  * Poultry  * Horses  * Exotic  * Goats  * Stud    *Inclusions* (optional)    `description` (string, optional): description of plant and machinery included in sale, maximum 250 characters.    `metadata` (optional)  * `livestock` (string, optional): description of livestock included in sale, maximum 250 characters.  * `crop` (string, optional): description of crops included in sale, maximum 250 characters.    *Irrigation* (optional)    `description` (string, optional): irrigation comments, maximum 250 characters    `metadata` (optional)  * `rainfall` (decimal, optional): annual rainfall in millimetres.
     * @type {Array<DomainListingAdminServiceV1ModelListingSupplementary>}
     * @memberof DomainListingAdminServiceV1ModelBusinessListing
     */
    'supplementary'?: Array<DomainListingAdminServiceV1ModelListingSupplementary>;
}

export const DomainListingAdminServiceV1ModelBusinessListingListingActionEnum = {
    Sale: 'sale',
    Rent: 'rent',
    SaleAndLease: 'saleAndLease'
} as const;

export type DomainListingAdminServiceV1ModelBusinessListingListingActionEnum = typeof DomainListingAdminServiceV1ModelBusinessListingListingActionEnum[keyof typeof DomainListingAdminServiceV1ModelBusinessListingListingActionEnum];
export const DomainListingAdminServiceV1ModelBusinessListingContactPreferenceEnum = {
    ByPhone: 'byPhone'
} as const;

export type DomainListingAdminServiceV1ModelBusinessListingContactPreferenceEnum = typeof DomainListingAdminServiceV1ModelBusinessListingContactPreferenceEnum[keyof typeof DomainListingAdminServiceV1ModelBusinessListingContactPreferenceEnum];

/**
 * Business Property
 * @export
 * @interface DomainListingAdminServiceV1ModelBusinessProperty
 */
export interface DomainListingAdminServiceV1ModelBusinessProperty {
    /**
     * Business property types [\'accessoriesParts\', \'accommodationTourism\', \'accounting\', \'adult\', \'advertisingMarketing\', \'aerial\', \'aeronautical\', \'agedCare\', \'agricultural\', \'air\', \'aircraft\', \'alarms\', \'alcoholLiquor\', \'amusements\', \'animalRelated\', \'aquaculture\', \'aquaticMarineMarinaBerth\', \'artsCrafts\', \'autoElectrical\', \'automotive\', \'backpackerHostel\', \'bakery\', \'barsNightclubs\', \'beautyHealth\', \'beautyProducts\', \'beautySalon\', \'bikeAndMotorcycle\', \'boardingKennels\', \'boatsMarineMarinaBerth\', \'bookkeeping\', \'brokerage\', \'builder\', \'buildingAndConstruction\', \'bus\', \'butcher\', \'cafeCoffeeShop\', \'car\', \'carBusTruck\', \'carDealership\', \'carRental\', \'carWash\', \'caravanPark\', \'carpenter\', \'catering\', \'childCare\', \'civil\', \'cleaning\', \'cleaningAndMaintenance\', \'clinicalPractice\', \'clothingAccessories\', \'clothingFootwear\', \'communication\', \'communications\', \'computerIT\', \'computerAndInternet\', \'construction\', \'convenienceStore\', \'copyLaminate\', \'courier\', \'cropHarvesting\', \'customs\', \'dairyFarming\', \'deli\', \'dental\', \'detailing\', \'distributors\', \'drivingSchools\', \'educationTraining\', \'educational\', \'electrical\', \'employmentRecruitment\', \'entertainment\', \'entertainmentTechnology\', \'export\', \'farming\', \'fertiliser\', \'finance\', \'financialServices\', \'fishingForestry\', \'floristNursery\', \'foodBeverage\', \'foodBeverageHospitality\', \'franchiseBusinessOpportunities\', \'freight\', \'fruitVegFreshProduce\', \'fruitPicking\', \'functionCentre\', \'furnitureTimber\', \'gambling\', \'gardenHousehold\', \'gardenNurseries\', \'gardening\', \'glassCeramic\', \'guestHouseBB\', \'hairdresser\', \'healthBeauty\', \'healthSpa\', \'hire\', \'homeGarden\', \'homeBased\', \'homewareHardware\', \'hospital\', \'hotel\', \'huntingTrap\', \'import\', \'importExportWholesale\', \'industrialManufacturing\', \'insemination\', \'insurance\', \'internet\', \'irrigationServices\', \'juiceBar\', \'landClearing\', \'landscaping\', \'laundryDryCleaning\', \'legal\', \'leisureEntertainment\', \'limousineTaxi\', \'livestock\', \'machinery\', \'machineryMetal\', \'managementRights\', \'manufacturers\', \'manufacturingEngineering\', \'marine\', \'massage\', \'mechanicalRepair\', \'media\', \'medical\', \'medicalPractice\', \'miningEarthMoving\', \'mobileServices\', \'motel\', \'motorcycle\', \'musicRelated\', \'mustering\', \'nails\', \'naturalTherapies\', \'newsagency\', \'nursery\', \'nursingHome\', \'officeSupplies\', \'oilGas\', \'panelBeating\', \'paperPrinting\', \'parkingCarSpace\', \'pestRelated\', \'pharmacies\', \'plastic\', \'plumbing\', \'poolWater\', \'postOffices\', \'printPhoto\', \'professional\', \'propertyRealEstate\', \'rail\', \'recreationSport\', \'recruitment\', \'repair\', \'resort\', \'restaurant\', \'retail\', \'retailer\', \'retirement\', \'retirementVillage\', \'road\', \'rural\', \'scientific\', \'sea\', \'security\', \'serviceStation\', \'services\', \'shearing\', \'sportsComplexGym\', \'supermarket\', \'takeawayFood\', \'taxi\', \'themePark\', \'tours\', \'training\', \'transportDistribution\', \'travel\', \'truck\', \'vending\', \'water\', \'welding\', \'wholesale\', \'wholesalers\', \'woolClassing\', \'wreckers\', \'alcoholGrocery\', \'cafeRestaurants\', \'discountStore\', \'ecoFriendly\', \'green\', \'grocery\', \'specialityRetail\', \'storage\', \'travelAgency\', \'varietyStore\', \'chickenShop\', \'seafoodShop\', \'deliCafe\', \'cropping\', \'viticulture\', \'grazing\', \'horticulture\', \'equine\', \'farmlet\', \'orchard\', \'ruralLifestyle\', \'onlineBusiness\'].
     * @type {Array<string>}
     * @memberof DomainListingAdminServiceV1ModelBusinessProperty
     */
    'propertyType'?: Array<DomainListingAdminServiceV1ModelBusinessPropertyPropertyTypeEnum>;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelLandArea}
     * @memberof DomainListingAdminServiceV1ModelBusinessProperty
     */
    'landArea'?: DomainListingAdminServiceV1ModelLandArea;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelParking}
     * @memberof DomainListingAdminServiceV1ModelBusinessProperty
     */
    'parking'?: DomainListingAdminServiceV1ModelParking;
    /**
     * List of PDF files related to the listing
     * @type {Array<DomainListingAdminServiceV1ModelPropertyPdf>}
     * @memberof DomainListingAdminServiceV1ModelBusinessProperty
     */
    'pdfs'?: Array<DomainListingAdminServiceV1ModelPropertyPdf>;
    /**
     * Is the property liveability compliant
     * @type {boolean}
     * @memberof DomainListingAdminServiceV1ModelBusinessProperty
     */
    'isMarkedForLiveability'?: boolean;
    /**
     * Name of the property up to 70 characters
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelBusinessProperty
     */
    'propertyName'?: string;
    /**
     * Short location information up to 30 character, e.g.: Greenhills Beach
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelBusinessProperty
     */
    'location'?: string;
    /**
     * List of image files, photos or floor plans related to the listing.
     * @type {Array<DomainListingAdminServiceV1ModelPropertyMedia>}
     * @memberof DomainListingAdminServiceV1ModelBusinessProperty
     */
    'images'?: Array<DomainListingAdminServiceV1ModelPropertyMedia>;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelAddress}
     * @memberof DomainListingAdminServiceV1ModelBusinessProperty
     */
    'address'?: DomainListingAdminServiceV1ModelAddress;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelArea}
     * @memberof DomainListingAdminServiceV1ModelBusinessProperty
     */
    'area'?: DomainListingAdminServiceV1ModelArea;
}

export const DomainListingAdminServiceV1ModelBusinessPropertyPropertyTypeEnum = {
    AccessoriesParts: 'accessoriesParts',
    AccommodationTourism: 'accommodationTourism',
    Accounting: 'accounting',
    Adult: 'adult',
    AdvertisingMarketing: 'advertisingMarketing',
    Aerial: 'aerial',
    Aeronautical: 'aeronautical',
    AgedCare: 'agedCare',
    Agricultural: 'agricultural',
    Air: 'air',
    Aircraft: 'aircraft',
    Alarms: 'alarms',
    AlcoholLiquor: 'alcoholLiquor',
    Amusements: 'amusements',
    AnimalRelated: 'animalRelated',
    Aquaculture: 'aquaculture',
    AquaticMarineMarinaBerth: 'aquaticMarineMarinaBerth',
    ArtsCrafts: 'artsCrafts',
    AutoElectrical: 'autoElectrical',
    Automotive: 'automotive',
    BackpackerHostel: 'backpackerHostel',
    Bakery: 'bakery',
    BarsNightclubs: 'barsNightclubs',
    BeautyHealth: 'beautyHealth',
    BeautyProducts: 'beautyProducts',
    BeautySalon: 'beautySalon',
    BikeAndMotorcycle: 'bikeAndMotorcycle',
    BoardingKennels: 'boardingKennels',
    BoatsMarineMarinaBerth: 'boatsMarineMarinaBerth',
    Bookkeeping: 'bookkeeping',
    Brokerage: 'brokerage',
    Builder: 'builder',
    BuildingAndConstruction: 'buildingAndConstruction',
    Bus: 'bus',
    Butcher: 'butcher',
    CafeCoffeeShop: 'cafeCoffeeShop',
    Car: 'car',
    CarBusTruck: 'carBusTruck',
    CarDealership: 'carDealership',
    CarRental: 'carRental',
    CarWash: 'carWash',
    CaravanPark: 'caravanPark',
    Carpenter: 'carpenter',
    Catering: 'catering',
    ChildCare: 'childCare',
    Civil: 'civil',
    Cleaning: 'cleaning',
    CleaningAndMaintenance: 'cleaningAndMaintenance',
    ClinicalPractice: 'clinicalPractice',
    ClothingAccessories: 'clothingAccessories',
    ClothingFootwear: 'clothingFootwear',
    Communication: 'communication',
    Communications: 'communications',
    ComputerIt: 'computerIT',
    ComputerAndInternet: 'computerAndInternet',
    Construction: 'construction',
    ConvenienceStore: 'convenienceStore',
    CopyLaminate: 'copyLaminate',
    Courier: 'courier',
    CropHarvesting: 'cropHarvesting',
    Customs: 'customs',
    DairyFarming: 'dairyFarming',
    Deli: 'deli',
    Dental: 'dental',
    Detailing: 'detailing',
    Distributors: 'distributors',
    DrivingSchools: 'drivingSchools',
    EducationTraining: 'educationTraining',
    Educational: 'educational',
    Electrical: 'electrical',
    EmploymentRecruitment: 'employmentRecruitment',
    Entertainment: 'entertainment',
    EntertainmentTechnology: 'entertainmentTechnology',
    Export: 'export',
    Farming: 'farming',
    Fertiliser: 'fertiliser',
    Finance: 'finance',
    FinancialServices: 'financialServices',
    FishingForestry: 'fishingForestry',
    FloristNursery: 'floristNursery',
    FoodBeverage: 'foodBeverage',
    FoodBeverageHospitality: 'foodBeverageHospitality',
    FranchiseBusinessOpportunities: 'franchiseBusinessOpportunities',
    Freight: 'freight',
    FruitVegFreshProduce: 'fruitVegFreshProduce',
    FruitPicking: 'fruitPicking',
    FunctionCentre: 'functionCentre',
    FurnitureTimber: 'furnitureTimber',
    Gambling: 'gambling',
    GardenHousehold: 'gardenHousehold',
    GardenNurseries: 'gardenNurseries',
    Gardening: 'gardening',
    GlassCeramic: 'glassCeramic',
    GuestHouseBb: 'guestHouseBB',
    Hairdresser: 'hairdresser',
    HealthBeauty: 'healthBeauty',
    HealthSpa: 'healthSpa',
    Hire: 'hire',
    HomeGarden: 'homeGarden',
    HomeBased: 'homeBased',
    HomewareHardware: 'homewareHardware',
    Hospital: 'hospital',
    Hotel: 'hotel',
    HuntingTrap: 'huntingTrap',
    Import: 'import',
    ImportExportWholesale: 'importExportWholesale',
    IndustrialManufacturing: 'industrialManufacturing',
    Insemination: 'insemination',
    Insurance: 'insurance',
    Internet: 'internet',
    IrrigationServices: 'irrigationServices',
    JuiceBar: 'juiceBar',
    LandClearing: 'landClearing',
    Landscaping: 'landscaping',
    LaundryDryCleaning: 'laundryDryCleaning',
    Legal: 'legal',
    LeisureEntertainment: 'leisureEntertainment',
    LimousineTaxi: 'limousineTaxi',
    Livestock: 'livestock',
    Machinery: 'machinery',
    MachineryMetal: 'machineryMetal',
    ManagementRights: 'managementRights',
    Manufacturers: 'manufacturers',
    ManufacturingEngineering: 'manufacturingEngineering',
    Marine: 'marine',
    Massage: 'massage',
    MechanicalRepair: 'mechanicalRepair',
    Media: 'media',
    Medical: 'medical',
    MedicalPractice: 'medicalPractice',
    MiningEarthMoving: 'miningEarthMoving',
    MobileServices: 'mobileServices',
    Motel: 'motel',
    Motorcycle: 'motorcycle',
    MusicRelated: 'musicRelated',
    Mustering: 'mustering',
    Nails: 'nails',
    NaturalTherapies: 'naturalTherapies',
    Newsagency: 'newsagency',
    Nursery: 'nursery',
    NursingHome: 'nursingHome',
    OfficeSupplies: 'officeSupplies',
    OilGas: 'oilGas',
    PanelBeating: 'panelBeating',
    PaperPrinting: 'paperPrinting',
    ParkingCarSpace: 'parkingCarSpace',
    PestRelated: 'pestRelated',
    Pharmacies: 'pharmacies',
    Plastic: 'plastic',
    Plumbing: 'plumbing',
    PoolWater: 'poolWater',
    PostOffices: 'postOffices',
    PrintPhoto: 'printPhoto',
    Professional: 'professional',
    PropertyRealEstate: 'propertyRealEstate',
    Rail: 'rail',
    RecreationSport: 'recreationSport',
    Recruitment: 'recruitment',
    Repair: 'repair',
    Resort: 'resort',
    Restaurant: 'restaurant',
    Retail: 'retail',
    Retailer: 'retailer',
    Retirement: 'retirement',
    RetirementVillage: 'retirementVillage',
    Road: 'road',
    Rural: 'rural',
    Scientific: 'scientific',
    Sea: 'sea',
    Security: 'security',
    ServiceStation: 'serviceStation',
    Services: 'services',
    Shearing: 'shearing',
    SportsComplexGym: 'sportsComplexGym',
    Supermarket: 'supermarket',
    TakeawayFood: 'takeawayFood',
    Taxi: 'taxi',
    ThemePark: 'themePark',
    Tours: 'tours',
    Training: 'training',
    TransportDistribution: 'transportDistribution',
    Travel: 'travel',
    Truck: 'truck',
    Vending: 'vending',
    Water: 'water',
    Welding: 'welding',
    Wholesale: 'wholesale',
    Wholesalers: 'wholesalers',
    WoolClassing: 'woolClassing',
    Wreckers: 'wreckers',
    AlcoholGrocery: 'alcoholGrocery',
    CafeRestaurants: 'cafeRestaurants',
    DiscountStore: 'discountStore',
    EcoFriendly: 'ecoFriendly',
    Green: 'green',
    Grocery: 'grocery',
    SpecialityRetail: 'specialityRetail',
    Storage: 'storage',
    TravelAgency: 'travelAgency',
    VarietyStore: 'varietyStore',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
} as const;

export type DomainListingAdminServiceV1ModelBusinessPropertyPropertyTypeEnum = typeof DomainListingAdminServiceV1ModelBusinessPropertyPropertyTypeEnum[keyof typeof DomainListingAdminServiceV1ModelBusinessPropertyPropertyTypeEnum];

/**
 * Information regarding past comparable   property sales that influenced the setting of teh estimationPrice
 * @export
 * @interface DomainListingAdminServiceV1ModelComparableData
 */
export interface DomainListingAdminServiceV1ModelComparableData {
    /**
     * To be comparable, property must be Of a similar standard or condition to the property for sale  And Sold in the last six months and be within two kilometres of the property for sale (if the property for sale is in the Melbourne metropolitan area)  Or Sold in the last 18 months and be within five kilometres of the property for sale (if the property for sale is outside the Melbourne metropolitan area).
     * @type {Array<DomainListingAdminServiceV1ModelPastSaleData>}
     * @memberof DomainListingAdminServiceV1ModelComparableData
     */
    'comparableProperty'?: Array<DomainListingAdminServiceV1ModelPastSaleData>;
    /**
     * Text description should be provided   If you reasonably believe that there are less than three comparable sales within the prescribed period outlined above  for ComparableProperty {Domain.Listing.Admin.Model.Entities.ComparableData.ComparableProperty}  Required when no past sale property data   was provided
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelComparableData
     */
    'declarationText'?: string;
}
/**
 * Contact domain model
 * @export
 * @interface DomainListingAdminServiceV1ModelContact
 */
export interface DomainListingAdminServiceV1ModelContact {
    /**
     * Domain ID of the contact person at the agency
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelContact
     */
    'domainAgentId'?: number;
    /**
     * First name. Maximum 50 characters.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelContact
     */
    'firstName'?: string;
    /**
     * Last name. Maximum 50 characters.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelContact
     */
    'lastName'?: string;
    /**
     * Phone. Maximum 20 characters.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelContact
     */
    'phone'?: string;
    /**
     * Fax. Maximum 20 characters.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelContact
     */
    'fax'?: string;
    /**
     * Mobile. Maximum 20 characters.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelContact
     */
    'mobile'?: string;
    /**
     * Email. Maximum 100 characters.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelContact
     */
    'email'?: string;
    /**
     * Indicates whether the contact person should receive emails for the listing
     * @type {boolean}
     * @memberof DomainListingAdminServiceV1ModelContact
     */
    'receiveEmails'?: boolean;
}
/**
 * Contains geocoding of an address
 * @export
 * @interface DomainListingAdminServiceV1ModelGeoLocation
 */
export interface DomainListingAdminServiceV1ModelGeoLocation {
    /**
     * Latitude
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelGeoLocation
     */
    'latitude'?: number;
    /**
     * Longitude
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelGeoLocation
     */
    'longitude'?: number;
}
/**
 * Inspection times
 * @export
 * @interface DomainListingAdminServiceV1ModelInspection
 */
export interface DomainListingAdminServiceV1ModelInspection {
    /**
     * Format: yyyy-mm-dd HH:mm:ss eg: 2015-10-20 13:30:00
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelInspection
     */
    'from'?: string;
    /**
     * Format: yyyy-mm-dd HH:mm:ss, eg: 2015-10-20 14:30:00
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelInspection
     */
    'to'?: string;
    /**
     * Specifies if the inspection is recurring weekly
     * @type {boolean}
     * @memberof DomainListingAdminServiceV1ModelInspection
     */
    'repeat'?: boolean;
}
/**
 * Inspection details
 * @export
 * @interface DomainListingAdminServiceV1ModelInspectionDetails
 */
export interface DomainListingAdminServiceV1ModelInspectionDetails {
    /**
     * Free text field for inspections
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelInspectionDetails
     */
    'inspectionDescription'?: string;
    /**
     * Inspection times of the listing
     * @type {Array<DomainListingAdminServiceV1ModelInspection>}
     * @memberof DomainListingAdminServiceV1ModelInspectionDetails
     */
    'inspections'?: Array<DomainListingAdminServiceV1ModelInspection>;
}
/**
 * Area information, Either single value or from and To must be provided
 * @export
 * @interface DomainListingAdminServiceV1ModelLandArea
 */
export interface DomainListingAdminServiceV1ModelLandArea {
    /**
     * Unit of measure
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelLandArea
     */
    'unit'?: DomainListingAdminServiceV1ModelLandAreaUnitEnum;
    /**
     * Area. Will be rounded to 2 decimals.
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelLandArea
     */
    'value'?: number;
    /**
     * Minimum area
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelLandArea
     */
    'from'?: number;
    /**
     * Maximum area
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelLandArea
     */
    'to'?: number;
}

export const DomainListingAdminServiceV1ModelLandAreaUnitEnum = {
    SquareMetres: 'squareMetres',
    Acres: 'acres',
    Hectares: 'hectares',
    SquareFeet: 'squareFeet',
    SquareYards: 'squareYards',
    Squares: 'squares'
} as const;

export type DomainListingAdminServiceV1ModelLandAreaUnitEnum = typeof DomainListingAdminServiceV1ModelLandAreaUnitEnum[keyof typeof DomainListingAdminServiceV1ModelLandAreaUnitEnum];

/**
 * Contains additional details about a business listing
 * @export
 * @interface DomainListingAdminServiceV1ModelLeaseHoldDetail
 */
export interface DomainListingAdminServiceV1ModelLeaseHoldDetail {
    /**
     * Rent period for the existing lease, can be: [\'perMonth\', \'perAnnum\']
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelLeaseHoldDetail
     */
    'leaseholdRentPeriod'?: DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdRentPeriodEnum;
    /**
     * Price unit for the existing lease, can be:  [\'totalAmount\', \'perSqm\']
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelLeaseHoldDetail
     */
    'leaseholdPriceUnit'?: DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdPriceUnitEnum;
    /**
     * Term of existing lease
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelLeaseHoldDetail
     */
    'leaseholdTerm'?: number;
    /**
     * Start of existing lease
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelLeaseHoldDetail
     */
    'leaseholdStart'?: string;
    /**
     * Rent amount for the existing lease
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelLeaseHoldDetail
     */
    'leaseholdRent'?: number;
}

export const DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdRentPeriodEnum = {
    PerMonth: 'perMonth',
    PerAnnum: 'perAnnum'
} as const;

export type DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdRentPeriodEnum = typeof DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdRentPeriodEnum[keyof typeof DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdRentPeriodEnum];
export const DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdPriceUnitEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
} as const;

export type DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdPriceUnitEnum = typeof DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdPriceUnitEnum[keyof typeof DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdPriceUnitEnum];

/**
 * Listing development project details.
 * @export
 * @interface DomainListingAdminServiceV1ModelListingProject
 */
export interface DomainListingAdminServiceV1ModelListingProject {
    /**
     * Domain\'s development project identifier. If the value is not provided, the listing will be unlinked.
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelListingProject
     */
    'id'?: number;
    /**
     * Listing\'s order. If the value is not provided, the listing will be last.
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelListingProject
     */
    'order'?: number;
}
/**
 * Represent current listing status and aggregation of status messages
 * @export
 * @interface DomainListingAdminServiceV1ModelListingReport
 */
export interface DomainListingAdminServiceV1ModelListingReport {
    /**
     * Status of listing been processed  * Queued - We received request  * Processing - Request been processed  * Processed - Successful processed request  * Failed - Processing failed  * Error - Individual errors encountered
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelListingReport
     */
    'processStatus'?: DomainListingAdminServiceV1ModelListingReportProcessStatusEnum;
    /**
     * AgencyId from Domain
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelListingReport
     */
    'agencyId'?: number;
    /**
     * ProviderId for the agency
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelListingReport
     */
    'providerId'?: string;
    /**
     * Listing identifier provided by CRM
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelListingReport
     */
    'providerAdId'?: string;
    /**
     * Advertisement Id from domain
     * @type {Array<number>}
     * @memberof DomainListingAdminServiceV1ModelListingReport
     */
    'adId'?: Array<number>;
    /**
     * Quality score of the listing, based on data completeness
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelListingReport
     */
    'qualityScore'?: number;
    /**
     * All Events associated with this processing request
     * @type {Array<DomainListingAdminServiceV1ModelModelEvent>}
     * @memberof DomainListingAdminServiceV1ModelListingReport
     */
    'events'?: Array<DomainListingAdminServiceV1ModelModelEvent>;
    /**
     * version list
     * @type {Array<DomainListingAdminServiceV1ModelReportVersion>}
     * @memberof DomainListingAdminServiceV1ModelListingReport
     */
    'versions'?: Array<DomainListingAdminServiceV1ModelReportVersion>;
}

export const DomainListingAdminServiceV1ModelListingReportProcessStatusEnum = {
    Queued: 'queued',
    Processing: 'processing',
    Processed: 'processed',
    Searchable: 'searchable',
    Failed: 'failed',
    Error: 'error'
} as const;

export type DomainListingAdminServiceV1ModelListingReportProcessStatusEnum = typeof DomainListingAdminServiceV1ModelListingReportProcessStatusEnum[keyof typeof DomainListingAdminServiceV1ModelListingReportProcessStatusEnum];

/**
 * Represent the listing job.
 * @export
 * @interface DomainListingAdminServiceV1ModelListingResponse
 */
export interface DomainListingAdminServiceV1ModelListingResponse {
    /**
     * Status of listing been processed
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelListingResponse
     */
    'processStatus'?: DomainListingAdminServiceV1ModelListingResponseProcessStatusEnum;
    /**
     * The listing job Id.   This job will eventually be processed.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelListingResponse
     */
    'id'?: string;
    /**
     * Agency Id from Domain.
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelListingResponse
     */
    'agencyId'?: number;
    /**
     * Provider Id for the agency.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelListingResponse
     */
    'providerId'?: string;
    /**
     * Listing identifier provided by CRM.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelListingResponse
     */
    'providerAdId'?: string;
    /**
     * Version Id
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelListingResponse
     */
    'versionId'?: string;
}

export const DomainListingAdminServiceV1ModelListingResponseProcessStatusEnum = {
    Queued: 'queued',
    Processing: 'processing',
    Processed: 'processed',
    Searchable: 'searchable',
    Failed: 'failed',
    Error: 'error'
} as const;

export type DomainListingAdminServiceV1ModelListingResponseProcessStatusEnum = typeof DomainListingAdminServiceV1ModelListingResponseProcessStatusEnum[keyof typeof DomainListingAdminServiceV1ModelListingResponseProcessStatusEnum];

/**
 * Listing supplementary
 * @export
 * @interface DomainListingAdminServiceV1ModelListingSupplementary
 */
export interface DomainListingAdminServiceV1ModelListingSupplementary {
    /**
     * Name
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelListingSupplementary
     */
    'name'?: string;
    /**
     * Description
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelListingSupplementary
     */
    'description'?: string;
    /**
     * Types
     * @type {Array<string>}
     * @memberof DomainListingAdminServiceV1ModelListingSupplementary
     */
    'types'?: Array<string>;
    /**
     * Metadata
     * @type {Array<DomainListingAdminServiceV1ModelSupplementaryMetadata>}
     * @memberof DomainListingAdminServiceV1ModelListingSupplementary
     */
    'metadata'?: Array<DomainListingAdminServiceV1ModelSupplementaryMetadata>;
}
/**
 * Information regarding median house/unit price   for the suburb
 * @export
 * @interface DomainListingAdminServiceV1ModelMedianPriceData
 */
export interface DomainListingAdminServiceV1ModelMedianPriceData {
    /**
     * Type of property this median price is based on .
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelMedianPriceData
     */
    'priceType'?: DomainListingAdminServiceV1ModelMedianPriceDataPriceTypeEnum;
    /**
     * Name of the suburb median price is based on.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelMedianPriceData
     */
    'suburb'?: string;
    /**
     * Postcode of the suburb
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelMedianPriceData
     */
    'postcode'?: string;
    /**
     * Median price for the suburb .
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelMedianPriceData
     */
    'medianPrice'?: number;
    /**
     * Where the Median Price come from
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelMedianPriceData
     */
    'source'?: string;
    /**
     * Median Price Source Data From Date
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelMedianPriceData
     */
    'sourceDateFrom'?: string;
    /**
     * Median Price Source Data To Date
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelMedianPriceData
     */
    'sourceDateTo'?: string;
    /**
     * Declaration text should be provided when no median price data available
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelMedianPriceData
     */
    'declarationText'?: string;
}

export const DomainListingAdminServiceV1ModelMedianPriceDataPriceTypeEnum = {
    House: 'house',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    VacantLand: 'vacantLand'
} as const;

export type DomainListingAdminServiceV1ModelMedianPriceDataPriceTypeEnum = typeof DomainListingAdminServiceV1ModelMedianPriceDataPriceTypeEnum[keyof typeof DomainListingAdminServiceV1ModelMedianPriceDataPriceTypeEnum];

/**
 * Processing Event, use to show information, warnings or Errors
 * @export
 * @interface DomainListingAdminServiceV1ModelModelEvent
 */
export interface DomainListingAdminServiceV1ModelModelEvent {
    /**
     * Severity of the Event
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelModelEvent
     */
    'severity'?: DomainListingAdminServiceV1ModelModelEventSeverityEnum;
    /**
     * Type of the issue
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelModelEvent
     */
    'issueType'?: DomainListingAdminServiceV1ModelModelEventIssueTypeEnum;
    /**
     * Message associated with the event
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelModelEvent
     */
    'message'?: string;
}

export const DomainListingAdminServiceV1ModelModelEventSeverityEnum = {
    Info: 'Info',
    Warning: 'Warning',
    Error: 'Error'
} as const;

export type DomainListingAdminServiceV1ModelModelEventSeverityEnum = typeof DomainListingAdminServiceV1ModelModelEventSeverityEnum[keyof typeof DomainListingAdminServiceV1ModelModelEventSeverityEnum];
export const DomainListingAdminServiceV1ModelModelEventIssueTypeEnum = {
    Internal: 'Internal',
    External: 'External'
} as const;

export type DomainListingAdminServiceV1ModelModelEventIssueTypeEnum = typeof DomainListingAdminServiceV1ModelModelEventIssueTypeEnum[keyof typeof DomainListingAdminServiceV1ModelModelEventIssueTypeEnum];

/**
 * Parking Details
 * @export
 * @interface DomainListingAdminServiceV1ModelParking
 */
export interface DomainListingAdminServiceV1ModelParking {
    /**
     * Can have the value \\\"OnSite\\\", \\\"OnStreet\\\", \\\"NoParking\\\". Default \\\"NoParking\\\"
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelParking
     */
    'parkingType'?: DomainListingAdminServiceV1ModelParkingParkingTypeEnum;
    /**
     * Number On Site
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelParking
     */
    'numberOnSite'?: number;
    /**
     * Additional information regarding the parking condition
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelParking
     */
    'information'?: string;
}

export const DomainListingAdminServiceV1ModelParkingParkingTypeEnum = {
    OnSite: 'onSite',
    OnStreet: 'onStreet',
    NoParking: 'noParking'
} as const;

export type DomainListingAdminServiceV1ModelParkingParkingTypeEnum = typeof DomainListingAdminServiceV1ModelParkingParkingTypeEnum[keyof typeof DomainListingAdminServiceV1ModelParkingParkingTypeEnum];

/**
 * Parking Details
 * @export
 * @interface DomainListingAdminServiceV1ModelParkingDetails
 */
export interface DomainListingAdminServiceV1ModelParkingDetails {
    /**
     * Can have the value \\\"OnSite\\\", \\\"OnStreet\\\", \\\"NoParking\\\". Default: \\\"NoParking\\\"
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelParkingDetails
     */
    'parkingType'?: DomainListingAdminServiceV1ModelParkingDetailsParkingTypeEnum;
    /**
     * Number of parking spaces on site
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelParkingDetails
     */
    'numberOfSpaces'?: number;
}

export const DomainListingAdminServiceV1ModelParkingDetailsParkingTypeEnum = {
    OnSite: 'onSite',
    OnStreet: 'onStreet',
    NoParking: 'noParking',
    Garage: 'garage',
    Carport: 'carport',
    Outdoor: 'outdoor'
} as const;

export type DomainListingAdminServiceV1ModelParkingDetailsParkingTypeEnum = typeof DomainListingAdminServiceV1ModelParkingDetailsParkingTypeEnum[keyof typeof DomainListingAdminServiceV1ModelParkingDetailsParkingTypeEnum];

/**
 * Parking Details
 * @export
 * @interface DomainListingAdminServiceV1ModelParkingInfo
 */
export interface DomainListingAdminServiceV1ModelParkingInfo {
    /**
     * Details for available parking spaces
     * @type {Array<DomainListingAdminServiceV1ModelParkingDetails>}
     * @memberof DomainListingAdminServiceV1ModelParkingInfo
     */
    'details'?: Array<DomainListingAdminServiceV1ModelParkingDetails>;
    /**
     * Additional information regarding the parking condition
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelParkingInfo
     */
    'information'?: string;
}
/**
 * Address for past sold listing
 * @export
 * @interface DomainListingAdminServiceV1ModelPastSaleAddress
 */
export interface DomainListingAdminServiceV1ModelPastSaleAddress {
    /**
     * State
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPastSaleAddress
     */
    'state'?: DomainListingAdminServiceV1ModelPastSaleAddressStateEnum;
    /**
     * Unit number for apartments, maximum 30 characters
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPastSaleAddress
     */
    'unitNumber'?: string;
    /**
     * Street number, maximum 20 characters
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPastSaleAddress
     */
    'streetNumber'?: string;
    /**
     * Street name, maximum 100 characters
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPastSaleAddress
     */
    'street'?: string;
    /**
     * Suburb name , maximum 50 characters
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPastSaleAddress
     */
    'suburb'?: string;
    /**
     * Postcode
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPastSaleAddress
     */
    'postcode'?: string;
}

export const DomainListingAdminServiceV1ModelPastSaleAddressStateEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Act: 'act',
    Sa: 'sa',
    Wa: 'wa',
    Tas: 'tas',
    Qld: 'qld',
    Nt: 'nt'
} as const;

export type DomainListingAdminServiceV1ModelPastSaleAddressStateEnum = typeof DomainListingAdminServiceV1ModelPastSaleAddressStateEnum[keyof typeof DomainListingAdminServiceV1ModelPastSaleAddressStateEnum];

/**
 * Information for past property sales
 * @export
 * @interface DomainListingAdminServiceV1ModelPastSaleData
 */
export interface DomainListingAdminServiceV1ModelPastSaleData {
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelPastSaleAddress}
     * @memberof DomainListingAdminServiceV1ModelPastSaleData
     */
    'address'?: DomainListingAdminServiceV1ModelPastSaleAddress;
    /**
     * Registered date of the sale
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPastSaleData
     */
    'dateOfSale'?: string;
    /**
     * Price property has been sold
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelPastSaleData
     */
    'soldPrice'?: number;
}
/**
 * Pricing Information
 * @export
 * @interface DomainListingAdminServiceV1ModelPrice
 */
export interface DomainListingAdminServiceV1ModelPrice {
    /**
     * When provided this will be shown instead of the price range, e.g.: \\\"Offers over $450K considered\\\"
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPrice
     */
    'displayText'?: string;
    /**
     * Lowest price the property is expected to sell/rent for to set search price. For a fixed price, set this value the same as To
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelPrice
     */
    'from'?: number;
    /**
     * Highest price the property is expected to sell/rent for to set search price.   For a fixed price, set this value the same as From
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelPrice
     */
    'to'?: number;
}
/**
 * Resource related to the listing
 * @export
 * @interface DomainListingAdminServiceV1ModelPropertyMedia
 */
export interface DomainListingAdminServiceV1ModelPropertyMedia {
    /**
     * Type of the resource
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPropertyMedia
     */
    'resourceType'?: DomainListingAdminServiceV1ModelPropertyMediaResourceTypeEnum;
    /**
     * shows the place from where file can be downloaded
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPropertyMedia
     */
    'url'?: string;
}

export const DomainListingAdminServiceV1ModelPropertyMediaResourceTypeEnum = {
    Photograph: 'photograph',
    FloorPlan: 'floorPlan',
    Video: 'video',
    VirtualTour: 'virtualTour',
    WebLink: 'webLink'
} as const;

export type DomainListingAdminServiceV1ModelPropertyMediaResourceTypeEnum = typeof DomainListingAdminServiceV1ModelPropertyMediaResourceTypeEnum[keyof typeof DomainListingAdminServiceV1ModelPropertyMediaResourceTypeEnum];

/**
 * PDF file related to the listing
 * @export
 * @interface DomainListingAdminServiceV1ModelPropertyPdf
 */
export interface DomainListingAdminServiceV1ModelPropertyPdf {
    /**
     * Type of the PDF
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPropertyPdf
     */
    'type'?: DomainListingAdminServiceV1ModelPropertyPdfTypeEnum;
    /**
     * Url of the PDF
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPropertyPdf
     */
    'url'?: string;
    /**
     * Description of the PDF
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelPropertyPdf
     */
    'description'?: string;
}

export const DomainListingAdminServiceV1ModelPropertyPdfTypeEnum = {
    CommercialPdf: 'commercialPdf',
    NewDevBrochurePdf: 'newDevBrochurePdf',
    FloorplanPdf: 'floorplanPdf',
    DevProjectPdf: 'devProjectPdf'
} as const;

export type DomainListingAdminServiceV1ModelPropertyPdfTypeEnum = typeof DomainListingAdminServiceV1ModelPropertyPdfTypeEnum[keyof typeof DomainListingAdminServiceV1ModelPropertyPdfTypeEnum];

/**
 * Report Version
 * @export
 * @interface DomainListingAdminServiceV1ModelReportVersion
 */
export interface DomainListingAdminServiceV1ModelReportVersion {
    /**
     * Operations performed on a completed version [\'none\', \'dataReceived\', \'processStarted\', \'priceValidated\', \'geoCoded\', \'pdfsProcessed\', \'primaryImagesProcessed\', \'allImagesProcessed\', \'listingDataSaved\', \'listingDeleted\', \'reportEmailSent\', \'offMarketProcessed\', \'listingIndexed\', \'propertyTypesProcessed\', \'contactsProcessed\', \'messagesPublished\', \'listingSentLive\', \'listingUpdated\', \'listingRestored\', \'allImageSizesProcessed\', \'patchProcessed\', \'externalSaleProcessed\', \'soiProcessed\', \'duplicateDetection\', \'listingMerged\', \'supplementaryProcessed\', \'listingHeldInMigration\', \'linkedProjectsProcessed\', \'linkedListingsProcessed\', \'allMediaProcessed\', \'projectProcessed\', \'projectDeleted\'].
     * @type {Array<string>}
     * @memberof DomainListingAdminServiceV1ModelReportVersion
     */
    'operations'?: Array<string>;
    /**
     * Version Id
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelReportVersion
     */
    'versionId'?: string;
    /**
     * Date this version of data been processed
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelReportVersion
     */
    'processedDate'?: string;
    /**
     * Url to access s3 file
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelReportVersion
     */
    'dataUrl'?: string;
    /**
     * Retry count
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelReportVersion
     */
    'processCount'?: number;
}
/**
 * Residential Listing
 * @export
 * @interface DomainListingAdminServiceV1ModelResidentialListing
 */
export interface DomainListingAdminServiceV1ModelResidentialListing {
    /**
     * Lifestyle type
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'lifeStyleType'?: DomainListingAdminServiceV1ModelResidentialListingLifeStyleTypeEnum;
    /**
     * Sale or Rent
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'listingAction'?: DomainListingAdminServiceV1ModelResidentialListingListingActionEnum;
    /**
     * Indicates the listing preferred contact method. Default by both phone and email if not provided.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'contactPreference'?: DomainListingAdminServiceV1ModelResidentialListingContactPreferenceEnum;
    /**
     * Set for Sale listings only
     * @type {boolean}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'underOfferOrContract'?: boolean;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelAuction}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'auction'?: DomainListingAdminServiceV1ModelAuction;
    /**
     * Optional.  Ignored for sale listings
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'bond'?: number;
    /**
     * Optional. Sets the Date from which a Rental or Share property is available. Date format: yyyy-mm-dd
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'availableFrom'?: string;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelResidentialProperty}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'propertyDetails'?: DomainListingAdminServiceV1ModelResidentialProperty;
    /**
     * True if the property is a new development
     * @type {boolean}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'isNewDevelopment'?: boolean;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelStatementOfInformation}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'statementOfInformation'?: DomainListingAdminServiceV1ModelStatementOfInformation;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelPrice}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'price'?: DomainListingAdminServiceV1ModelPrice;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelListingProject}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'project'?: DomainListingAdminServiceV1ModelListingProject;
    /**
     * Domain Advertisement Id, not applicable for creating new ads.  Mandatory when updating a listing that belongs to an agency that  is in the process of being migrated between listing providers.
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'domainAdId'?: number;
    /**
     * The Domain Agency Id number
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'domainAgencyID'?: number;
    /**
     * External Advertisement Id of up to 50 characters will be stored.&lt;br /&gt;  This value is used to identify an Advertisement for updates and should be unique for listing provider.&lt;br /&gt;  This value is case-insensitive (meaning AAAA will update aaaa).
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'providerAdId'?: string;
    /**
     * Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.  INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.  OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.  LOCATION: Ground floor, Water Views, North Facing, City Views.  ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'features'?: string;
    /**
     * Description of the property.  6000 characters in length. The following HTML elements are permitted: &amp;lt;br /&amp;gt;, &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;, &amp;amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade.  Unicode characters which are unsupported by Latin-1 (ISO-8859-1 range from U+0080 to U+00FF), will be removed https://en.wikipedia.org/wiki/ISO/IEC_8859-1
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'description'?: string;
    /**
     * \'Headline\' Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'summary'?: string;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelInspectionDetails}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'inspectionDetails'?: DomainListingAdminServiceV1ModelInspectionDetails;
    /**
     * Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters.
     * @type {Array<DomainListingAdminServiceV1ModelPropertyMedia>}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'media'?: Array<DomainListingAdminServiceV1ModelPropertyMedia>;
    /**
     * Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.
     * @type {Array<DomainListingAdminServiceV1ModelContact>}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'contacts'?: Array<DomainListingAdminServiceV1ModelContact>;
    /**
     * Sets an additional Email Address to which enquiries on the Listing will be sent
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'otherEnquiryEmail'?: string;
    /**
     * Send email enquiries to the default address for this listing type
     * @type {boolean}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'receiveEmailsToDefaultAddress'?: boolean;
    /**
     * True if the property is rural
     * @type {boolean}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'isRural'?: boolean;
    /**
     * Rural attributes    *Improvements* (optional)    Available `types` (fixed list, optional):  * Machinery Shed  * Shearing Shed  * Workshop  * Shearers Quarters  * Silos  * Other Housing  * Managers Accommodation    *Fencing* (optional)    `description` (string, optional): free text fencing description, maximum 250 characters.    *Yards* (optional)    Available `types` (fixed list, optional):  * Sheep  * Cattle    *Homestead* (optional)    `description` (string, optional): description of the homestead and construction, maximum 250 characters.    `metadata` (optional)  * `area` (decimal, optional): homestead area in square metres.    Available `types` (fixed list, optional):  * Office  * Ensuite  * Tennis Court  * Mains Gas  * Floorboards  * Internal Laundry    *Water* (optional)    `description` (string, optional): water comments, maximum 250 characters.    Available `types` (fixed list, optional):  * Tank  * Well  * Reticulated  * Bores  * Springs  * Creeks  * Dams  * River    *Crops* (optional)    `description` (string, optional): description of the crops, maximum 250 characters.    `metadata` (optional)  * `croppedAnnually` (decimal, optional): average annual area cropped in hectares.  * `fallowAnnually` (decimal, optional): average annual fallow area in hectares.  * `pastures` (string, optional): description of pastures available, maximum 250 characters.    *Livestock* (optional)    `description` (string, optional): additional comments, maximum 250 characters.    `metadata` (optional)  * `capacity` (decimal, optional): property carrying capacity in DSE (unit of carry capacity).    Available `types` (fixed list, optional):  * Sheep  * Pigs  * Cattle  * Poultry  * Horses  * Exotic  * Goats  * Stud    *Inclusions* (optional)    `description` (string, optional): description of plant and machinery included in sale, maximum 250 characters.    `metadata` (optional)  * `livestock` (string, optional): description of livestock included in sale, maximum 250 characters.  * `crop` (string, optional): description of crops included in sale, maximum 250 characters.    *Irrigation* (optional)    `description` (string, optional): irrigation comments, maximum 250 characters    `metadata` (optional)  * `rainfall` (decimal, optional): annual rainfall in millimetres.
     * @type {Array<DomainListingAdminServiceV1ModelListingSupplementary>}
     * @memberof DomainListingAdminServiceV1ModelResidentialListing
     */
    'supplementary'?: Array<DomainListingAdminServiceV1ModelListingSupplementary>;
}

export const DomainListingAdminServiceV1ModelResidentialListingLifeStyleTypeEnum = {
    FirstHome: 'firstHome',
    Investment: 'investment',
    Retirement: 'retirement',
    SeaChange: 'seaChange',
    TreeChange: 'treeChange',
    YoungFamilies: 'youngFamilies'
} as const;

export type DomainListingAdminServiceV1ModelResidentialListingLifeStyleTypeEnum = typeof DomainListingAdminServiceV1ModelResidentialListingLifeStyleTypeEnum[keyof typeof DomainListingAdminServiceV1ModelResidentialListingLifeStyleTypeEnum];
export const DomainListingAdminServiceV1ModelResidentialListingListingActionEnum = {
    Sale: 'sale',
    Rent: 'rent',
    SaleAndLease: 'saleAndLease'
} as const;

export type DomainListingAdminServiceV1ModelResidentialListingListingActionEnum = typeof DomainListingAdminServiceV1ModelResidentialListingListingActionEnum[keyof typeof DomainListingAdminServiceV1ModelResidentialListingListingActionEnum];
export const DomainListingAdminServiceV1ModelResidentialListingContactPreferenceEnum = {
    ByPhone: 'byPhone'
} as const;

export type DomainListingAdminServiceV1ModelResidentialListingContactPreferenceEnum = typeof DomainListingAdminServiceV1ModelResidentialListingContactPreferenceEnum[keyof typeof DomainListingAdminServiceV1ModelResidentialListingContactPreferenceEnum];

/**
 * Residential Property
 * @export
 * @interface DomainListingAdminServiceV1ModelResidentialProperty
 */
export interface DomainListingAdminServiceV1ModelResidentialProperty {
    /**
     * \'Retirement\' requires at least one more property type to be specified with it (for example: \\\"Retirement\\\", \\\"ApartmentUnitFlat\\\") [\'acreageSemiRural\', \'apartmentUnitFlat\', \'aquaculture\', \'blockOfUnits\', \'carSpace\', \'dairyFarming\', \'developmentSite\', \'duplex\', \'farm\', \'fishingForestry\', \'newHomeDesigns\', \'house\', \'newHouseLand\', \'irrigationServices\', \'newLand\', \'livestock\', \'newApartments\', \'penthouse\', \'retirement\', \'rural\', \'semiDetached\', \'specialistFarm\', \'studio\', \'terrace\', \'townhouse\', \'vacantLand\', \'villa\', \'cropping\', \'viticulture\', \'mixedFarming\', \'grazing\', \'horticulture\', \'equine\', \'farmlet\', \'orchard\', \'ruralLifestyle\'].
     * @type {Array<string>}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'propertyType'?: Array<DomainListingAdminServiceV1ModelResidentialPropertyPropertyTypeEnum>;
    /**
     * Number of bedrooms
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'bedRooms'?: number;
    /**
     * Number of bathrooms
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'bathRooms'?: number;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelParkingInfo}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'parkingInfo'?: DomainListingAdminServiceV1ModelParkingInfo;
    /**
     * Optional, although must be set for ACT dwellings for sale. Valid values range from 0 to 10 inclusive, in increments of 0.5
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'energyEfficiencyRating'?: number;
    /**
     * List of PDF files related to the listing
     * @type {Array<DomainListingAdminServiceV1ModelPropertyPdf>}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'pdfs'?: Array<DomainListingAdminServiceV1ModelPropertyPdf>;
    /**
     * Is the property liveability compliant
     * @type {boolean}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'isMarkedForLiveability'?: boolean;
    /**
     * Name of the property up to 70 characters
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'propertyName'?: string;
    /**
     * Short location information up to 30 character, e.g.: Greenhills Beach
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'location'?: string;
    /**
     * List of image files, photos or floor plans related to the listing.
     * @type {Array<DomainListingAdminServiceV1ModelPropertyMedia>}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'images'?: Array<DomainListingAdminServiceV1ModelPropertyMedia>;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelAddress}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'address'?: DomainListingAdminServiceV1ModelAddress;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelArea}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'area'?: DomainListingAdminServiceV1ModelArea;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelLandArea}
     * @memberof DomainListingAdminServiceV1ModelResidentialProperty
     */
    'landArea'?: DomainListingAdminServiceV1ModelLandArea;
}

export const DomainListingAdminServiceV1ModelResidentialPropertyPropertyTypeEnum = {
    AcreageSemiRural: 'acreageSemiRural',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    BlockOfUnits: 'blockOfUnits',
    CarSpace: 'carSpace',
    DairyFarming: 'dairyFarming',
    DevelopmentSite: 'developmentSite',
    Duplex: 'duplex',
    Farm: 'farm',
    FishingForestry: 'fishingForestry',
    NewHomeDesigns: 'newHomeDesigns',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    IrrigationServices: 'irrigationServices',
    NewLand: 'newLand',
    Livestock: 'livestock',
    NewApartments: 'newApartments',
    Penthouse: 'penthouse',
    Retirement: 'retirement',
    Rural: 'rural',
    SemiDetached: 'semiDetached',
    SpecialistFarm: 'specialistFarm',
    Studio: 'studio',
    Terrace: 'terrace',
    Townhouse: 'townhouse',
    VacantLand: 'vacantLand',
    Villa: 'villa',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle'
} as const;

export type DomainListingAdminServiceV1ModelResidentialPropertyPropertyTypeEnum = typeof DomainListingAdminServiceV1ModelResidentialPropertyPropertyTypeEnum[keyof typeof DomainListingAdminServiceV1ModelResidentialPropertyPropertyTypeEnum];

/**
 * Contains details about a business sales info
 * @export
 * @interface DomainListingAdminServiceV1ModelSaleInfo
 */
export interface DomainListingAdminServiceV1ModelSaleInfo {
    /**
     * Annual sales amount for the business
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelSaleInfo
     */
    'annualSales'?: number;
    /**
     * Annual profit amount for the business
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelSaleInfo
     */
    'annualProfit'?: number;
    /**
     * Stock value of the business
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelSaleInfo
     */
    'stockValue'?: number;
}
/**
 * Statement of Information  Regarding sale listing
 * @export
 * @interface DomainListingAdminServiceV1ModelStatementOfInformation
 */
export interface DomainListingAdminServiceV1ModelStatementOfInformation {
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelBasicPrice}
     * @memberof DomainListingAdminServiceV1ModelStatementOfInformation
     */
    'estimatedPrice'?: DomainListingAdminServiceV1ModelBasicPrice;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelComparableData}
     * @memberof DomainListingAdminServiceV1ModelStatementOfInformation
     */
    'comparableData'?: DomainListingAdminServiceV1ModelComparableData;
    /**
     * 
     * @type {DomainListingAdminServiceV1ModelMedianPriceData}
     * @memberof DomainListingAdminServiceV1ModelStatementOfInformation
     */
    'suburbMedianPrice'?: DomainListingAdminServiceV1ModelMedianPriceData;
    /**
     * Link to the statement of information documentation file.  Must be a PDF file.  File should be less than 10 MB in size  The Statement of Information must be updated if there is a change in the indicative selling price.
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelStatementOfInformation
     */
    'documentationUrl'?: string;
}
/**
 * Supplementary metadata
 * @export
 * @interface DomainListingAdminServiceV1ModelSupplementaryMetadata
 */
export interface DomainListingAdminServiceV1ModelSupplementaryMetadata {
    /**
     * Measurement unit
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelSupplementaryMetadata
     */
    'measurementUnit'?: DomainListingAdminServiceV1ModelSupplementaryMetadataMeasurementUnitEnum;
    /**
     * Name
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelSupplementaryMetadata
     */
    'name'?: string;
    /**
     * Description
     * @type {string}
     * @memberof DomainListingAdminServiceV1ModelSupplementaryMetadata
     */
    'description'?: string;
    /**
     * Measurement
     * @type {number}
     * @memberof DomainListingAdminServiceV1ModelSupplementaryMetadata
     */
    'measurement'?: number;
}

export const DomainListingAdminServiceV1ModelSupplementaryMetadataMeasurementUnitEnum = {
    SquareMetres: 'squareMetres',
    Hectares: 'hectares',
    Millimetres: 'millimetres',
    Dse: 'dse'
} as const;

export type DomainListingAdminServiceV1ModelSupplementaryMetadataMeasurementUnitEnum = typeof DomainListingAdminServiceV1ModelSupplementaryMetadataMeasurementUnitEnum[keyof typeof DomainListingAdminServiceV1ModelSupplementaryMetadataMeasurementUnitEnum];

/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts {
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts
     */
    'stateAbbreviation'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsStateAbbreviationEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts
     */
    'displayType'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsDisplayTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts
     */
    'streetNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts
     */
    'unitNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts
     */
    'suburb'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts
     */
    'suburbId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts
     */
    'displayAddress'?: string;
}

export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsStateAbbreviationEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Sa: 'sa',
    Nt: 'nt',
    Tas: 'tas',
    Act: 'act',
    Qld: 'qld',
    Wa: 'wa'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsStateAbbreviationEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsStateAbbreviationEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsStateAbbreviationEnum];
export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsDisplayTypeEnum = {
    FullAddress: 'fullAddress',
    StreetAndSuburb: 'streetAndSuburb',
    SuburbOnly: 'suburbOnly',
    RegionOnly: 'regionOnly',
    AreaOnly: 'areaOnly',
    StateOnly: 'stateOnly'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsDisplayTypeEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsDisplayTypeEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsDisplayTypeEnum];

/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers {
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers
     */
    'advertiserType'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiersAdvertiserTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers
     */
    'advertiserId'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers
     */
    'contactIds'?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers
     */
    'agentIds'?: Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers
     */
    'conjunctionContactIds'?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers
     */
    'conjunctionAgentIds'?: Array<string>;
}

export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiersAdvertiserTypeEnum = {
    Agency: 'agency',
    Private: 'private'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiersAdvertiserTypeEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiersAdvertiserTypeEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiersAdvertiserTypeEnum];

/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails {
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionSchedule}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails
     */
    'auctionSchedule'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionSchedule;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails
     */
    'auctionedPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails
     */
    'auctionedDate'?: string;
}
/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionSchedule
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionSchedule {
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionSchedule
     */
    'locationDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionSchedule
     */
    'openingDateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionSchedule
     */
    'terms'?: string;
}
/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers {
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
     */
    'addressId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
     */
    'streetId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
     */
    'suburbId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
     */
    'cadastreId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
     */
    'postcodeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
     */
    'stateId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
     */
    'state'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
     */
    'propertyTypeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
     */
    'propertyTypeCategoryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
     */
    'flatNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
     */
    'streetNumber'?: string;
}
/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingBasicPrice
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingBasicPrice {
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingBasicPrice
     */
    'from'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingBasicPrice
     */
    'to'?: number;
}
/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData {
    /**
     * 
     * @type {Array<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData>}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData
     */
    'comparableProperty'?: Array<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData>;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData
     */
    'declarationText'?: string;
}
/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation {
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation
     */
    'longitude'?: number;
}
/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection {
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection
     */
    'recurrence'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspectionRecurrenceEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection
     */
    'closingDateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection
     */
    'openingDateTime'?: string;
}

export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspectionRecurrenceEnum = {
    None: 'none',
    Weekly: 'weekly'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspectionRecurrenceEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspectionRecurrenceEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspectionRecurrenceEnum];

/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia {
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia
     */
    'category'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia
     */
    'type'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia
     */
    'url'?: string;
}

export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaCategoryEnum = {
    Image: 'image',
    Video: 'video',
    Others: 'others'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaCategoryEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaCategoryEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaCategoryEnum];
export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaTypeEnum = {
    Photo: 'photo',
    Mp4: 'mp4',
    Youtube: 'youtube',
    Floorplan: 'floorplan',
    Vimeo: 'vimeo',
    NotSpecified: 'notSpecified'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaTypeEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaTypeEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaTypeEnum];

/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData {
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
     */
    'priceType'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceDataPriceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
     */
    'suburb'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
     */
    'postcode'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
     */
    'medianPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
     */
    'sourceDateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
     */
    'sourceDateTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
     */
    'sourceCollectionDate'?: string;
}

export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceDataPriceTypeEnum = {
    House: 'house',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    VacantLand: 'vacantLand'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceDataPriceTypeEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceDataPriceTypeEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceDataPriceTypeEnum];

/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData {
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData
     */
    'unitNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData
     */
    'streetNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData
     */
    'suburb'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData
     */
    'displayAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData
     */
    'dateOfSale'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData
     */
    'soldPrice'?: number;
}
/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails {
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
     */
    'hiddenReasons'?: Array<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsHiddenReasonsEnum>;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
     */
    'gstOption'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsGstOptionEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
     */
    'priceType'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
     */
    'priceUnit'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
     */
    'priceFrom'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
     */
    'priceTo'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
     */
    'pricePrefix'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
     */
    'canDisplayPrice'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
     */
    'displayPrice'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
     */
    'bond'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
     */
    'priceReduction'?: boolean;
}

export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsHiddenReasonsEnum = {
    ByAgency: 'byAgency',
    QLdRestriction: 'qLDRestriction'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsHiddenReasonsEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsHiddenReasonsEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsHiddenReasonsEnum];
export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsGstOptionEnum = {
    Na: 'na',
    Inc: 'inc',
    Ex: 'ex'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsGstOptionEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsGstOptionEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsGstOptionEnum];
export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceTypeEnum = {
    Gross: 'gross',
    Net: 'net'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceTypeEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceTypeEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceTypeEnum];
export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceUnitEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceUnitEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceUnitEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceUnitEnum];

/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections {
    /**
     * 
     * @type {Array<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection>}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections
     */
    'inspections'?: Array<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection>;
    /**
     * 
     * @type {Array<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection>}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections
     */
    'pastInspections'?: Array<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection>;
    /**
     * 
     * @type {boolean}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections
     */
    'isByAppointmentOnly'?: boolean;
}
/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails {
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails
     */
    'providerSystem'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails
     */
    'providerAdID'?: string;
}
/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails {
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
     */
    'rentalMethod'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsRentalMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
     */
    'source'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsSourceEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
     */
    'leasedDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
     */
    'leasedPrice'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
     */
    'canDisplayPrice'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
     */
    'leasedMonths'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
     */
    'termOfLeaseFrom'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
     */
    'termOfLeaseTo'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
     */
    'leaseOutgoings'?: number;
}

export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsRentalMethodEnum = {
    NotStated: 'notStated',
    Rent: 'rent',
    Share: 'share',
    Holiday: 'holiday',
    Lease: 'lease'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsRentalMethodEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsRentalMethodEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsRentalMethodEnum];
export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsSourceEnum = {
    Internal: 'internal',
    External: 'external'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsSourceEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsSourceEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsSourceEnum];

/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails {
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails
     */
    'saleMethod'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetailsSaleMethodEnum;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails
     */
    'soldDetails'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails
     */
    'auctionDetails'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails
     */
    'tenderDetails'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails
     */
    'tenantDetails'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails
     */
    'annualReturn'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails
     */
    'saleTerms'?: string;
}

export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetailsSaleMethodEnum = {
    NotStated: 'notStated',
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    Tender: 'tender',
    ExpressionOfInterest: 'expressionOfInterest'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetailsSaleMethodEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetailsSaleMethodEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetailsSaleMethodEnum];

/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails {
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails
     */
    'soldAction'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSoldActionEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails
     */
    'source'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSourceEnum;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails
     */
    'soldPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails
     */
    'governmentRecordedSoldPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails
     */
    'soldDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails
     */
    'canDisplayPrice'?: boolean;
}

export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSoldActionEnum = {
    NotStated: 'notStated',
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    Withdrawn: 'withdrawn',
    SoldPriorToAuction: 'soldPriorToAuction'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSoldActionEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSoldActionEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSoldActionEnum];
export const DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSourceEnum = {
    Internal: 'internal',
    External: 'external'
} as const;

export type DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSourceEnum = typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSourceEnum[keyof typeof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSourceEnum];

/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation {
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingBasicPrice}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation
     */
    'estimatedPrice'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingBasicPrice;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation
     */
    'comparableData'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation
     */
    'suburbMedianPrice'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation
     */
    'documentationUrl'?: string;
}
/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails {
    /**
     * 
     * @type {boolean}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails
     */
    'leaseDateVariable'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails
     */
    'leaseOptions'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails
     */
    'tenantInfoTermOfLeaseFrom'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails
     */
    'tenantInfoTermOfLeaseTo'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails
     */
    'tenantName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails
     */
    'tenantRentDetails'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails
     */
    'leaseStartDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails
     */
    'leaseEndDate'?: string;
}
/**
 * 
 * @export
 * @interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails
 */
export interface DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails {
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails
     */
    'tenderRecipientName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails
     */
    'tenderAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails
     */
    'tenderEndDate'?: string;
}
/**
 * 
 * @export
 * @interface DomainLocationProfilesServiceV1ModelLocation
 */
export interface DomainLocationProfilesServiceV1ModelLocation {
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocation
     */
    'domainLocationId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainLocationProfilesServiceV1ModelLocation
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainLocationProfilesServiceV1ModelLocation
     */
    'pfLocationId'?: string;
    /**
     * 
     * @type {Array<DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs>}
     * @memberof DomainLocationProfilesServiceV1ModelLocation
     */
    'surroundingSuburbs'?: Array<DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs>;
    /**
     * 
     * @type {string}
     * @memberof DomainLocationProfilesServiceV1ModelLocation
     */
    'urlSlug'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainLocationProfilesServiceV1ModelLocation
     */
    'suburbName'?: string;
    /**
     * 
     * @type {DomainLocationProfilesServiceV1ModelLocationData}
     * @memberof DomainLocationProfilesServiceV1ModelLocation
     */
    'data'?: DomainLocationProfilesServiceV1ModelLocationData;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocation
     */
    'apmLocationId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocation
     */
    'locationId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainLocationProfilesServiceV1ModelLocation
     */
    'areaName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainLocationProfilesServiceV1ModelLocation
     */
    'regionName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainLocationProfilesServiceV1ModelLocation
     */
    'state'?: string;
}
/**
 * 
 * @export
 * @interface DomainLocationProfilesServiceV1ModelLocationData
 */
export interface DomainLocationProfilesServiceV1ModelLocationData {
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'studiosForRent'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'terracedHousesForSale'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'semiDetachedHousesForSale'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'townhousesForRent'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'apartmentsAndUnitsForSale'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'apartmentsAndUnitsForRent'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'villasForSale'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'duplexesForSale'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'semiDetachedHousesForRent'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'studiosForSale'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'singlePercentage'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'mostCommonAgeBracket'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'renterPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'penthousesForSale'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'villasForRent'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'duplexesForRent'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'housesForSale'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'ownerOccupierPercentage'?: number;
    /**
     * 
     * @type {Array<DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories>}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'propertyCategories'?: Array<DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories>;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'population'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'penthousesForRent'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'townhousesForSale'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'terracedHousesForRent'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'marriedPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'housesForRent'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationData
     */
    'blockOfUnitsForSale'?: number;
}
/**
 * 
 * @export
 * @interface DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
 */
export interface DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories {
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'luxuryLevelPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'numberSold'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'estimatedRepayments'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'forSale'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'medianSoldPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'medianRentPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'daysOnMarket'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'bedrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'forRent'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'entryLevelPrice'?: number;
    /**
     * 
     * @type {Array<DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList>}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'salesGrowthList'?: Array<DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList>;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'auctionClearanceRate'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'propertyCategory'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories
     */
    'mostRecentSale'?: string;
}
/**
 * 
 * @export
 * @interface DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList
 */
export interface DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList {
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList
     */
    'medianSoldPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList
     */
    'annualGrowth'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList
     */
    'numberSold'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList
     */
    'year'?: number;
}
/**
 * 
 * @export
 * @interface DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs
 */
export interface DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs {
    /**
     * 
     * @type {string}
     * @memberof DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs
     */
    'urlSlug'?: string;
}
/**
 * 
 * @export
 * @interface DomainPropertyReportServiceV1ModelPropertyReportContainer
 */
export interface DomainPropertyReportServiceV1ModelPropertyReportContainer {
    /**
     * 
     * @type {string}
     * @memberof DomainPropertyReportServiceV1ModelPropertyReportContainer
     */
    'mimeType'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPropertyReportServiceV1ModelPropertyReportContainer
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface DomainPropertyReportServiceV1ModelPropertyReportGenerationResult
 */
export interface DomainPropertyReportServiceV1ModelPropertyReportGenerationResult {
    /**
     * 
     * @type {DomainPropertyReportServiceV1ModelWashedLocation}
     * @memberof DomainPropertyReportServiceV1ModelPropertyReportGenerationResult
     */
    'washedLocation'?: DomainPropertyReportServiceV1ModelWashedLocation;
    /**
     * 
     * @type {DomainPropertyReportServiceV1ModelPropertyReportContainer}
     * @memberof DomainPropertyReportServiceV1ModelPropertyReportGenerationResult
     */
    'report'?: DomainPropertyReportServiceV1ModelPropertyReportContainer;
}
/**
 * 
 * @export
 * @interface DomainPropertyReportServiceV1ModelWashedLocation
 */
export interface DomainPropertyReportServiceV1ModelWashedLocation {
    /**
     * 
     * @type {string}
     * @memberof DomainPropertyReportServiceV1ModelWashedLocation
     */
    'unitNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPropertyReportServiceV1ModelWashedLocation
     */
    'streetNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPropertyReportServiceV1ModelWashedLocation
     */
    'streetName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPropertyReportServiceV1ModelWashedLocation
     */
    'streetType'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPropertyReportServiceV1ModelWashedLocation
     */
    'suburb'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPropertyReportServiceV1ModelWashedLocation
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPropertyReportServiceV1ModelWashedLocation
     */
    'state'?: string;
}
/**
 * An enquiry with associated reference (eg. listing)
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry
 */
export interface DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry {
    /**
     * Delivery method of the enquiry
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry
     */
    'deliveryMethod'?: DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryDeliveryMethodEnum;
    /**
     * Type of enquiry
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry
     */
    'enquiryType'?: DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryEnquiryTypeEnum;
    /**
     * Listing identifier
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry
     */
    'referenceId'?: number;
    /**
     * Enquiry identifier
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry
     */
    'id'?: string;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1EnquiriesSender}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry
     */
    'sender'?: DomainPublicAdapterWebApiModelsV1EnquiriesSender;
    /**
     * Enquiry subject
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry
     */
    'subject'?: string;
    /**
     * Enquiry message
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry
     */
    'message'?: string;
    /**
     * MetaData of the enquiry
     * @type {{ [key: string]: string; }}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry
     */
    'metaData'?: { [key: string]: string; };
}

export const DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryDeliveryMethodEnum = {
    Email: 'email',
    Sms: 'sms'
} as const;

export type DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryDeliveryMethodEnum = typeof DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryDeliveryMethodEnum[keyof typeof DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryDeliveryMethodEnum];
export const DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryEnquiryTypeEnum = {
    Listing: 'listing',
    DevProject: 'devProject',
    NewDevLanding: 'newDevLanding',
    AgencyProfile: 'agencyProfile',
    AgentProfile: 'agentProfile',
    ContractRequest: 'contractRequest',
    VendorEnquiry: 'vendorEnquiry',
    PrePortalListing: 'prePortalListing'
} as const;

export type DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryEnquiryTypeEnum = typeof DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryEnquiryTypeEnum[keyof typeof DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryEnquiryTypeEnum];

/**
 * Contains enquiry sender details
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1EnquiriesSender
 */
export interface DomainPublicAdapterWebApiModelsV1EnquiriesSender {
    /**
     * Sender first name
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesSender
     */
    'firstName'?: string;
    /**
     * Sender lastname/surname
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesSender
     */
    'lastName'?: string;
    /**
     * Sender email address
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesSender
     */
    'email'?: string;
    /**
     * Sender phone number
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesSender
     */
    'phoneNumber'?: string;
    /**
     * Postcode of sender\'s location
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1EnquiriesSender
     */
    'postcode'?: string;
}
/**
 * Listing details
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessAd
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessAd {
    /**
     * Product type
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAd
     */
    'adType'?: string;
    /**
     * URL of property details page on CRE website
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAd
     */
    'url'?: string;
}
/**
 * Address components
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents {
    /**
     * Listing Area
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents
     */
    'area'?: string;
    /**
     * Not used
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents
     */
    'district'?: string;
    /**
     * Postcode
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents
     */
    'postcode'?: string;
    /**
     * Listing Region
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents
     */
    'region'?: string;
    /**
     * AUS State. 2 or 3 characters
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents
     */
    'stateShort'?: string;
    /**
     * Street address
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents
     */
    'street'?: string;
    /**
     * Street number
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents
     */
    'streetNumber'?: string;
    /**
     * Suburb
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents
     */
    'suburb'?: string;
    /**
     * Unit number
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents
     */
    'unitNumber'?: string;
}
/**
 * Agency details
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser {
    /**
     * agency address
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser
     */
    'address'?: string;
    /**
     * Agency ID
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser
     */
    'id'?: number;
    /**
     * Agency Name
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser
     */
    'name'?: string;
    /**
     * Agency color
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser
     */
    'preferredColorHex'?: string;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser
     */
    'images'?: DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages;
    /**
     * Agency contacts
     * @type {Array<DomainPublicAdapterWebApiModelsV1ListingsBusinessContact>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser
     */
    'contacts'?: Array<DomainPublicAdapterWebApiModelsV1ListingsBusinessContact>;
    /**
     * Checks whether advertiser is conjunctional or not
     * @type {boolean}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser
     */
    'isConjunctional'?: boolean;
}
/**
 * Agency images (logos, banners)
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages {
    /**
     * Agency branding banner image URL
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages
     */
    'agencyBannerImageUrl'?: string;
    /**
     * Not used
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages
     */
    'agencyBannerWideImageUrl'?: string;
    /**
     * Agency logo. Note: CRE has two logo sizes.
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages
     */
    'logoUrl'?: string;
}
/**
 * Contact
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessContact
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessContact {
    /**
     * Agent identifier
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessContact
     */
    'id'?: number;
    /**
     * First name. Not available in CRE
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessContact
     */
    'firstName'?: string;
    /**
     * Last name. Not available in CRE
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessContact
     */
    'lastName'?: string;
    /**
     * Image URL
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessContact
     */
    'imageUrl'?: string;
    /**
     * Full name
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessContact
     */
    'displayFullName'?: string;
    /**
     * Phone numbers
     * @type {Array<DomainPublicAdapterWebApiModelsV1ListingsBusinessPhoneNumber>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessContact
     */
    'phoneNumbers'?: Array<DomainPublicAdapterWebApiModelsV1ListingsBusinessPhoneNumber>;
    /**
     * E-mail address
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessContact
     */
    'emailAddress'?: string;
    /**
     * Full address
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessContact
     */
    'address'?: string;
}
/**
 * Geographic coordinate
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessGeoLocation
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessGeoLocation {
    /**
     * Latitude
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessGeoLocation
     */
    'latitude'?: number;
    /**
     * Longitude
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessGeoLocation
     */
    'longitude'?: number;
}
/**
 * Listing details for univesal app
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessListing {
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsBusinessAd}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'ad'?: DomainPublicAdapterWebApiModelsV1ListingsBusinessAd;
    /**
     * Formatted listing price
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'price'?: string;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'advertiser'?: DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiser;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsBusinessGeoLocation}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'geoLocation'?: DomainPublicAdapterWebApiModelsV1ListingsBusinessGeoLocation;
    /**
     * Building size
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'propertyArea'?: string;
    /**
     * Property type
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'propertyType'?: string;
    /**
     * Full address
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'address'?: string;
    /**
     * Headline
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'headline'?: string;
    /**
     * Has video?
     * @type {boolean}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'hasVideo'?: boolean;
    /**
     * Media resources for listing (images, video, floor plans)
     * @type {Array<DomainPublicAdapterWebApiModelsV1ListingsBusinessMedia>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'media'?: Array<DomainPublicAdapterWebApiModelsV1ListingsBusinessMedia>;
    /**
     * Auction date
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'auctionDate'?: string;
    /**
     * AdID
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'id'?: number;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsBusinessMetadata}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'metadata'?: DomainPublicAdapterWebApiModelsV1ListingsBusinessMetadata;
    /**
     * Car parking spaces count
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessListing
     */
    'carspaceCount'?: number;
}
/**
 * Search request location details
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch {
    /**
     * Location area
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch
     */
    'area'?: string;
    /**
     * Location postcode
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch
     */
    'postcode'?: string;
    /**
     * Location region
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch
     */
    'region'?: string;
    /**
     * State
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch
     */
    'state'?: DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearchStateEnum;
    /**
     * Suburb
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch
     */
    'suburb'?: string;
}

export const DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearchStateEnum = {
    Act: 'act',
    Nsw: 'nsw',
    Qld: 'qld',
    Vic: 'vic',
    Sa: 'sa',
    Wa: 'wa',
    Nt: 'nt',
    Tas: 'tas'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearchStateEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearchStateEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearchStateEnum];

/**
 * Listing media
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessMedia
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessMedia {
    /**
     * Not used
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessMedia
     */
    'dateCreated'?: string;
    /**
     * Resource URL
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessMedia
     */
    'imageUrl'?: string;
    /**
     * Media type: \\\"image\\\", \\\"video\\\"
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessMedia
     */
    'mediaType'?: string;
    /**
     * Type: \\\"youtube\\\", \\\"vimeo\\\", \\\"mp4\\\"
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessMedia
     */
    'type'?: string;
    /**
     * Video URL
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessMedia
     */
    'videoUrl'?: string;
}
/**
 * Listing metadata
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessMetadata
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessMetadata {
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessMetadata
     */
    'addressComponents'?: DomainPublicAdapterWebApiModelsV1ListingsBusinessAddressComponents;
}
/**
 * Phone number details
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessPhoneNumber
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessPhoneNumber {
    /**
     * Diplay label
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessPhoneNumber
     */
    'displayLabel'?: string;
    /**
     * Type: \\\"fax\\\", \\\"mobile\\\", \\\"telephone\\\"
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessPhoneNumber
     */
    'type'?: string;
    /**
     * Phone number
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessPhoneNumber
     */
    'number'?: string;
}
/**
 * Search criteria. Price
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch {
    /**
     * Minimum price. null - no minimum price limit
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch
     */
    'min'?: number;
    /**
     * Maximum price. null - no maximum price limit
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch
     */
    'max'?: number;
}
/**
 * Represents a CRE Business Search Request
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest {
    /**
     * 
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
     */
    'pageNumber'?: number;
    /**
     * AdvertiserId e.g. An Agency ID
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
     */
    'advertiserId'?: number;
    /**
     * Listing property types
     * @type {Array<string>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
     */
    'propertyTypes'?: Array<DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestPropertyTypesEnum>;
    /**
     * Search listings by keyword
     * @type {Array<string>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
     */
    'keywords'?: Array<string>;
    /**
     * The franchise brand ID
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
     */
    'brandId'?: number;
    /**
     * The franchise group ID. A franchise group owns multiple franchise brands.
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
     */
    'franchiseGroupId'?: number;
    /**
     * Location search criteria
     * @type {Array<DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
     */
    'locations'?: Array<DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch>;
    /**
     * Search results page size
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
     */
    'price'?: DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch;
    /**
     * Sorting order
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
     */
    'sort'?: DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSortEnum;
    /**
     * Search mode
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
     */
    'searchMode'?: DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSearchModeEnum;
}

export const DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestPropertyTypesEnum = {
    Unknown: 'unknown',
    AccessoriesParts: 'accessoriesParts',
    AccommodationTourism: 'accommodationTourism',
    Accounting: 'accounting',
    AcreageSemiRural: 'acreageSemiRural',
    Adult: 'adult',
    AdvertisingMarketing: 'advertisingMarketing',
    Aerial: 'aerial',
    Aeronautical: 'aeronautical',
    AgedCare: 'agedCare',
    Agricultural: 'agricultural',
    Air: 'air',
    Aircraft: 'aircraft',
    Alarms: 'alarms',
    AlcoholLiquor: 'alcoholLiquor',
    Amusements: 'amusements',
    AnimalRelated: 'animalRelated',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    AquaticMarineMarinaBerth: 'aquaticMarineMarinaBerth',
    ArtsCrafts: 'artsCrafts',
    AutoElectrical: 'autoElectrical',
    Automotive: 'automotive',
    BackpackerHostel: 'backpackerHostel',
    Bakery: 'bakery',
    BarsNightclubs: 'barsNightclubs',
    BeautyHealth: 'beautyHealth',
    BeautyProducts: 'beautyProducts',
    BeautySalon: 'beautySalon',
    BedAndBreakfast: 'bedAndBreakfast',
    BikeAndMotorcycle: 'bikeAndMotorcycle',
    BlockOfUnits: 'blockOfUnits',
    BoardingKennels: 'boardingKennels',
    BoatsMarineMarinaBerth: 'boatsMarineMarinaBerth',
    Bookkeeping: 'bookkeeping',
    Brokerage: 'brokerage',
    Builder: 'builder',
    BuildingAndConstruction: 'buildingAndConstruction',
    Bus: 'bus',
    Butcher: 'butcher',
    CafeCoffeeShop: 'cafeCoffeeShop',
    Car: 'car',
    CarBusTruck: 'carBusTruck',
    CarDealership: 'carDealership',
    CarRental: 'carRental',
    CarSpace: 'carSpace',
    CarWash: 'carWash',
    CaravanPark: 'caravanPark',
    Carpenter: 'carpenter',
    Catering: 'catering',
    ChildCare: 'childCare',
    Civil: 'civil',
    Cleaning: 'cleaning',
    CleaningAndMaintenance: 'cleaningAndMaintenance',
    ClinicalPractice: 'clinicalPractice',
    ClothingAccessories: 'clothingAccessories',
    ClothingFootwear: 'clothingFootwear',
    Communication: 'communication',
    Communications: 'communications',
    ComputerIt: 'computerIT',
    ComputerAndInternet: 'computerAndInternet',
    Construction: 'construction',
    ConvenienceStore: 'convenienceStore',
    CopyLaminate: 'copyLaminate',
    Courier: 'courier',
    CropHarvesting: 'cropHarvesting',
    Customs: 'customs',
    DairyFarming: 'dairyFarming',
    Deli: 'deli',
    Dental: 'dental',
    Detailing: 'detailing',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Distributors: 'distributors',
    DrivingSchools: 'drivingSchools',
    Duplex: 'duplex',
    EducationTraining: 'educationTraining',
    Educational: 'educational',
    Electrical: 'electrical',
    EmploymentRecruitment: 'employmentRecruitment',
    Entertainment: 'entertainment',
    EntertainmentTechnology: 'entertainmentTechnology',
    Export: 'export',
    Farm: 'farm',
    Farming: 'farming',
    Fertiliser: 'fertiliser',
    Finance: 'finance',
    FinancialServices: 'financialServices',
    FishingForestry: 'fishingForestry',
    FloristNursery: 'floristNursery',
    FoodBeverage: 'foodBeverage',
    FoodBeverageHospitality: 'foodBeverageHospitality',
    FranchiseBusinessOpportunities: 'franchiseBusinessOpportunities',
    Freight: 'freight',
    FruitVegFreshProduce: 'fruitVegFreshProduce',
    FruitPicking: 'fruitPicking',
    FunctionCentre: 'functionCentre',
    FurnitureTimber: 'furnitureTimber',
    Gambling: 'gambling',
    GardenHousehold: 'gardenHousehold',
    GardenNurseries: 'gardenNurseries',
    Gardening: 'gardening',
    GlassCeramic: 'glassCeramic',
    GuestHouseBb: 'guestHouseBB',
    Guesthouse: 'guesthouse',
    Hairdresser: 'hairdresser',
    HealthBeauty: 'healthBeauty',
    HealthSpa: 'healthSpa',
    Hire: 'hire',
    HomeGarden: 'homeGarden',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HomewareHardware: 'homewareHardware',
    Hospital: 'hospital',
    Hotel: 'hotel',
    HotelLeisure: 'hotelLeisure',
    HotelMotelPub: 'hotelMotelPub',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    HuntingTrap: 'huntingTrap',
    Import: 'import',
    ImportExportWholesale: 'importExportWholesale',
    IndustrialManufacturing: 'industrialManufacturing',
    IndustrialWarehouse: 'industrialWarehouse',
    Insemination: 'insemination',
    Insurance: 'insurance',
    InternationalNewDevelopment: 'internationalNewDevelopment',
    Internet: 'internet',
    IrrigationServices: 'irrigationServices',
    JuiceBar: 'juiceBar',
    LandClearing: 'landClearing',
    NewLand: 'newLand',
    Landscaping: 'landscaping',
    LaundryDryCleaning: 'laundryDryCleaning',
    Legal: 'legal',
    LeisureEntertainment: 'leisureEntertainment',
    LimousineTaxi: 'limousineTaxi',
    Livestock: 'livestock',
    InternationalCommercial: 'internationalCommercial',
    Machinery: 'machinery',
    MachineryMetal: 'machineryMetal',
    ManagementRights: 'managementRights',
    Manufacturers: 'manufacturers',
    ManufacturingEngineering: 'manufacturingEngineering',
    Marine: 'marine',
    Massage: 'massage',
    MechanicalRepair: 'mechanicalRepair',
    Media: 'media',
    Medical: 'medical',
    MedicalConsulting: 'medicalConsulting',
    MedicalPractice: 'medicalPractice',
    MiningEarthMoving: 'miningEarthMoving',
    MobileServices: 'mobileServices',
    Motel: 'motel',
    Motorcycle: 'motorcycle',
    MusicRelated: 'musicRelated',
    Mustering: 'mustering',
    Nails: 'nails',
    NaturalTherapies: 'naturalTherapies',
    NewApartments: 'newApartments',
    Newsagency: 'newsagency',
    Nursery: 'nursery',
    NursingHome: 'nursingHome',
    Offices: 'offices',
    OfficeSupplies: 'officeSupplies',
    OilGas: 'oilGas',
    OnStreet: 'onStreet',
    PanelBeating: 'panelBeating',
    PaperPrinting: 'paperPrinting',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    PestRelated: 'pestRelated',
    Pharmacies: 'pharmacies',
    Plastic: 'plastic',
    Plumbing: 'plumbing',
    PoolWater: 'poolWater',
    PostOffices: 'postOffices',
    PrintPhoto: 'printPhoto',
    Professional: 'professional',
    PropertyRealEstate: 'propertyRealEstate',
    Rail: 'rail',
    RecreationSport: 'recreationSport',
    Recruitment: 'recruitment',
    Repair: 'repair',
    Resort: 'resort',
    Restaurant: 'restaurant',
    Retail: 'retail',
    Retailer: 'retailer',
    RetirementVillage: 'retirementVillage',
    Road: 'road',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    Scientific: 'scientific',
    Sea: 'sea',
    Security: 'security',
    SemiDetached: 'semiDetached',
    ServiceStation: 'serviceStation',
    Serviced: 'serviced',
    Services: 'services',
    Shearing: 'shearing',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    SportsComplexGym: 'sportsComplexGym',
    Studio: 'studio',
    Supermarket: 'supermarket',
    TakeawayFood: 'takeawayFood',
    Taxi: 'taxi',
    Terrace: 'terrace',
    ThemePark: 'themePark',
    Tours: 'tours',
    Townhouse: 'townhouse',
    Training: 'training',
    TransportDistribution: 'transportDistribution',
    Travel: 'travel',
    Truck: 'truck',
    VacantLand: 'vacantLand',
    Vending: 'vending',
    Villa: 'villa',
    Water: 'water',
    Welding: 'welding',
    Wholesale: 'wholesale',
    Wholesalers: 'wholesalers',
    WithShowroomWarehouse: 'withShowroomWarehouse',
    WithinShoppingComplex: 'withinShoppingComplex',
    WoolClassing: 'woolClassing',
    Wreckers: 'wreckers',
    Tattersalls: 'tattersalls',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    AlcoholGrocery: 'alcoholGrocery',
    CafeRestaurant: 'cafeRestaurant',
    DiscountStore: 'discountStore',
    EcoFriendly: 'ecoFriendly',
    Green: 'green',
    Grocery: 'grocery',
    SpecialityRetail: 'specialityRetail',
    Storage: 'storage',
    TravelAgency: 'travelAgency',
    VarietyStore: 'varietyStore',
    FranchiseNew: 'franchiseNew',
    Business: 'business'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestPropertyTypesEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestPropertyTypesEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestPropertyTypesEnum];
export const DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSortEnum = {
    Default: 'default',
    NewestFirst: 'newestFirst',
    LowTotalPriceFirst: 'lowTotalPriceFirst',
    HightTotalPriceFirst: 'hightTotalPriceFirst',
    SuburbAsc: 'suburbAsc',
    SuburbDesc: 'suburbDesc'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSortEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSortEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSortEnum];
export const DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSearchModeEnum = {
    ForSale: 'forSale',
    FranchiseOpportunity: 'franchiseOpportunity',
    FranchiseBrand: 'franchiseBrand'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSearchModeEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSearchModeEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSearchModeEnum];

/**
 * Listing details
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialAd
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialAd {
    /**
     * Product type
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAd
     */
    'adType'?: string;
    /**
     * URL of property details page on CRE website
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAd
     */
    'url'?: string;
}
/**
 * Address components
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents {
    /**
     * Listing Area
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents
     */
    'area'?: string;
    /**
     * Not used
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents
     */
    'district'?: string;
    /**
     * Postcode
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents
     */
    'postcode'?: string;
    /**
     * Listing Region
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents
     */
    'region'?: string;
    /**
     * AUS State. 2 or 3 characters
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents
     */
    'stateShort'?: string;
    /**
     * Street address
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents
     */
    'street'?: string;
    /**
     * Street number
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents
     */
    'streetNumber'?: string;
    /**
     * Suburb
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents
     */
    'suburb'?: string;
    /**
     * Unit number
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents
     */
    'unitNumber'?: string;
}
/**
 * Agency details
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser {
    /**
     * agency address
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser
     */
    'address'?: string;
    /**
     * Agency ID
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser
     */
    'id'?: number;
    /**
     * Agency Name
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser
     */
    'name'?: string;
    /**
     * Agency color
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser
     */
    'preferredColorHex'?: string;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser
     */
    'images'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages;
    /**
     * Agency contacts
     * @type {Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialContact>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser
     */
    'contacts'?: Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialContact>;
    /**
     * Checks whether advertiser is conjunctional or not
     * @type {boolean}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser
     */
    'isConjunctional'?: boolean;
}
/**
 * Agency images (logos, banners)
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages {
    /**
     * Agency branding banner image URL
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages
     */
    'agencyBannerImageUrl'?: string;
    /**
     * Not used
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages
     */
    'agencyBannerWideImageUrl'?: string;
    /**
     * Agency logo. Note: CRE has two logo sizes.
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages
     */
    'logoUrl'?: string;
}
/**
 * Contact
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialContact
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialContact {
    /**
     * Agent identifier
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialContact
     */
    'id'?: number;
    /**
     * First name. Not available in CRE
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialContact
     */
    'firstName'?: string;
    /**
     * Last name. Not available in CRE
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialContact
     */
    'lastName'?: string;
    /**
     * Image URL
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialContact
     */
    'imageUrl'?: string;
    /**
     * Full name
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialContact
     */
    'displayFullName'?: string;
    /**
     * Phone numbers
     * @type {Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialPhoneNumber>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialContact
     */
    'phoneNumbers'?: Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialPhoneNumber>;
    /**
     * E-mail address
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialContact
     */
    'emailAddress'?: string;
    /**
     * Full address
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialContact
     */
    'address'?: string;
}
/**
 * Geographic coordinate
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoLocation
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoLocation {
    /**
     * Latitude
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoLocation
     */
    'latitude'?: number;
    /**
     * Longitude
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoLocation
     */
    'longitude'?: number;
}
/**
 * Geographic coordinate
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint {
    /**
     * Location latitude
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint
     */
    'lat'?: number;
    /**
     * Location longitude
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint
     */
    'long'?: number;
}
/**
 * Polygon which specifies geographical area for listing search
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow {
    /**
     * List of points making polygon
     * @type {Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow
     */
    'polygon'?: Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint>;
    /**
     * Bounding box. Not used
     * @type {Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow
     */
    'boundingBox'?: Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoPoint>;
}
/**
 * Listing details for univesal app
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialListing {
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsCommercialAd}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'ad'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialAd;
    /**
     * Formatted listing price
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'price'?: string;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'advertiser'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoLocation}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'geoLocation'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoLocation;
    /**
     * Building size
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'propertyArea'?: string;
    /**
     * Property type
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'propertyType'?: string;
    /**
     * Full address
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'address'?: string;
    /**
     * Headline
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'headline'?: string;
    /**
     * Has video?
     * @type {boolean}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'hasVideo'?: boolean;
    /**
     * Media resources for listing (images, video, floor plans)
     * @type {Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialMedia>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'media'?: Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialMedia>;
    /**
     * Auction date
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'auctionDate'?: string;
    /**
     * AdID
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'id'?: number;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsCommercialMetadata}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'metadata'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialMetadata;
    /**
     * Car parking spaces count
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialListing
     */
    'carspaceCount'?: number;
}
/**
 * Search request location details
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch {
    /**
     * Location area
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch
     */
    'area'?: string;
    /**
     * Location postcode
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch
     */
    'postcode'?: string;
    /**
     * Location region
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch
     */
    'region'?: string;
    /**
     * State
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch
     */
    'state'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearchStateEnum;
    /**
     * Street address
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch
     */
    'street'?: string;
    /**
     * Suburb
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch
     */
    'suburb'?: string;
}

export const DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearchStateEnum = {
    Act: 'act',
    Nsw: 'nsw',
    Qld: 'qld',
    Vic: 'vic',
    Sa: 'sa',
    Wa: 'wa',
    Nt: 'nt',
    Tas: 'tas'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearchStateEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearchStateEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearchStateEnum];

/**
 * Listing media
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialMedia
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialMedia {
    /**
     * Not used
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialMedia
     */
    'dateCreated'?: string;
    /**
     * Resource URL
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialMedia
     */
    'imageUrl'?: string;
    /**
     * Media type: \\\"image\\\", \\\"video\\\"
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialMedia
     */
    'mediaType'?: string;
    /**
     * Type: \\\"youtube\\\", \\\"vimeo\\\", \\\"mp4\\\"
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialMedia
     */
    'type'?: string;
    /**
     * Video URL
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialMedia
     */
    'videoUrl'?: string;
}
/**
 * Listing metadata
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialMetadata
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialMetadata {
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialMetadata
     */
    'addressComponents'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialAddressComponents;
}
/**
 * Listing search. Parking search criteria
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch {
    /**
     * Parking type
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch
     */
    'type'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearchTypeEnum;
    /**
     * Minimum carspace count
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch
     */
    'carspaces'?: number;
}

export const DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearchTypeEnum = {
    OnSite: 'onSite',
    OnStreet: 'onStreet',
    NoParking: 'noParking'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearchTypeEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearchTypeEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearchTypeEnum];

/**
 * Phone number details
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialPhoneNumber
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialPhoneNumber {
    /**
     * Diplay label
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialPhoneNumber
     */
    'displayLabel'?: string;
    /**
     * Type: \\\"fax\\\", \\\"mobile\\\", \\\"telephone\\\"
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialPhoneNumber
     */
    'type'?: string;
    /**
     * Phone number
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialPhoneNumber
     */
    'number'?: string;
}
/**
 * Search criteria. Price
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch {
    /**
     * Minimum price. null - no minimum price limit
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch
     */
    'min'?: number;
    /**
     * Maximum price. null - no maximum price limit
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch
     */
    'max'?: number;
    /**
     * Price type
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch
     */
    'type'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearchTypeEnum;
}

export const DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearchTypeEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearchTypeEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearchTypeEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearchTypeEnum];

/**
 * Listing search criteria
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest {
    /**
     * 
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'pageNumber'?: number;
    /**
     * Agency ID
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'advertiserId'?: number;
    /**
     * Search results page size
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'pageSize'?: number;
    /**
     * Listing property types
     * @type {Array<string>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'propertyTypes'?: Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTypesEnum>;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'price'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch;
    /**
     * Location search criteria
     * @type {Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'locations'?: Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch>;
    /**
     * Search listings by keyword
     * @type {Array<string>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'keywords'?: Array<string>;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'geoWindow'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow;
    /**
     * Minimum land area
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'landAreaMin'?: number;
    /**
     * Maximum land area
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'landAreaMax'?: number;
    /**
     * Minimum building area
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'buildingSizeMin'?: number;
    /**
     * Maximum building area
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'buildingSizeMax'?: number;
    /**
     * Search mode
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'searchMode'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSearchModeEnum;
    /**
     * Occupancy
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'occupancy'?: string;
    /**
     * Sorting order
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'sort'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSortEnum;
    /**
     * Sale type
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'saleType'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSaleTypeEnum;
    /**
     * Property title
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'propertyTitle'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTitleEnum;
    /**
     * 
     * @type {DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'parking'?: DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch;
    /**
     * Exclusion Types
     * @type {Array<string>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'exclusionTypes'?: Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestExclusionTypesEnum>;
    /**
     * Minimum annual return (in percents)
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
     */
    'annualReturn'?: number;
}

export const DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTypesEnum = {
    Unknown: 'unknown',
    AccessoriesParts: 'accessoriesParts',
    AccommodationTourism: 'accommodationTourism',
    Accounting: 'accounting',
    AcreageSemiRural: 'acreageSemiRural',
    Adult: 'adult',
    AdvertisingMarketing: 'advertisingMarketing',
    Aerial: 'aerial',
    Aeronautical: 'aeronautical',
    AgedCare: 'agedCare',
    Agricultural: 'agricultural',
    Air: 'air',
    Aircraft: 'aircraft',
    Alarms: 'alarms',
    AlcoholLiquor: 'alcoholLiquor',
    Amusements: 'amusements',
    AnimalRelated: 'animalRelated',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    AquaticMarineMarinaBerth: 'aquaticMarineMarinaBerth',
    ArtsCrafts: 'artsCrafts',
    AutoElectrical: 'autoElectrical',
    Automotive: 'automotive',
    BackpackerHostel: 'backpackerHostel',
    Bakery: 'bakery',
    BarsNightclubs: 'barsNightclubs',
    BeautyHealth: 'beautyHealth',
    BeautyProducts: 'beautyProducts',
    BeautySalon: 'beautySalon',
    BedAndBreakfast: 'bedAndBreakfast',
    BikeAndMotorcycle: 'bikeAndMotorcycle',
    BlockOfUnits: 'blockOfUnits',
    BoardingKennels: 'boardingKennels',
    BoatsMarineMarinaBerth: 'boatsMarineMarinaBerth',
    Bookkeeping: 'bookkeeping',
    Brokerage: 'brokerage',
    Builder: 'builder',
    BuildingAndConstruction: 'buildingAndConstruction',
    Bus: 'bus',
    Butcher: 'butcher',
    CafeCoffeeShop: 'cafeCoffeeShop',
    Car: 'car',
    CarBusTruck: 'carBusTruck',
    CarDealership: 'carDealership',
    CarRental: 'carRental',
    CarSpace: 'carSpace',
    CarWash: 'carWash',
    CaravanPark: 'caravanPark',
    Carpenter: 'carpenter',
    Catering: 'catering',
    ChildCare: 'childCare',
    Civil: 'civil',
    Cleaning: 'cleaning',
    CleaningAndMaintenance: 'cleaningAndMaintenance',
    ClinicalPractice: 'clinicalPractice',
    ClothingAccessories: 'clothingAccessories',
    ClothingFootwear: 'clothingFootwear',
    Communication: 'communication',
    Communications: 'communications',
    ComputerIt: 'computerIT',
    ComputerAndInternet: 'computerAndInternet',
    Construction: 'construction',
    ConvenienceStore: 'convenienceStore',
    CopyLaminate: 'copyLaminate',
    Courier: 'courier',
    CropHarvesting: 'cropHarvesting',
    Customs: 'customs',
    DairyFarming: 'dairyFarming',
    Deli: 'deli',
    Dental: 'dental',
    Detailing: 'detailing',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Distributors: 'distributors',
    DrivingSchools: 'drivingSchools',
    Duplex: 'duplex',
    EducationTraining: 'educationTraining',
    Educational: 'educational',
    Electrical: 'electrical',
    EmploymentRecruitment: 'employmentRecruitment',
    Entertainment: 'entertainment',
    EntertainmentTechnology: 'entertainmentTechnology',
    Export: 'export',
    Farm: 'farm',
    Farming: 'farming',
    Fertiliser: 'fertiliser',
    Finance: 'finance',
    FinancialServices: 'financialServices',
    FishingForestry: 'fishingForestry',
    FloristNursery: 'floristNursery',
    FoodBeverage: 'foodBeverage',
    FoodBeverageHospitality: 'foodBeverageHospitality',
    FranchiseBusinessOpportunities: 'franchiseBusinessOpportunities',
    Freight: 'freight',
    FruitVegFreshProduce: 'fruitVegFreshProduce',
    FruitPicking: 'fruitPicking',
    FunctionCentre: 'functionCentre',
    FurnitureTimber: 'furnitureTimber',
    Gambling: 'gambling',
    GardenHousehold: 'gardenHousehold',
    GardenNurseries: 'gardenNurseries',
    Gardening: 'gardening',
    GlassCeramic: 'glassCeramic',
    GuestHouseBb: 'guestHouseBB',
    Guesthouse: 'guesthouse',
    Hairdresser: 'hairdresser',
    HealthBeauty: 'healthBeauty',
    HealthSpa: 'healthSpa',
    Hire: 'hire',
    HomeGarden: 'homeGarden',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HomewareHardware: 'homewareHardware',
    Hospital: 'hospital',
    Hotel: 'hotel',
    HotelLeisure: 'hotelLeisure',
    HotelMotelPub: 'hotelMotelPub',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    HuntingTrap: 'huntingTrap',
    Import: 'import',
    ImportExportWholesale: 'importExportWholesale',
    IndustrialManufacturing: 'industrialManufacturing',
    IndustrialWarehouse: 'industrialWarehouse',
    Insemination: 'insemination',
    Insurance: 'insurance',
    InternationalNewDevelopment: 'internationalNewDevelopment',
    Internet: 'internet',
    IrrigationServices: 'irrigationServices',
    JuiceBar: 'juiceBar',
    LandClearing: 'landClearing',
    NewLand: 'newLand',
    Landscaping: 'landscaping',
    LaundryDryCleaning: 'laundryDryCleaning',
    Legal: 'legal',
    LeisureEntertainment: 'leisureEntertainment',
    LimousineTaxi: 'limousineTaxi',
    Livestock: 'livestock',
    InternationalCommercial: 'internationalCommercial',
    Machinery: 'machinery',
    MachineryMetal: 'machineryMetal',
    ManagementRights: 'managementRights',
    Manufacturers: 'manufacturers',
    ManufacturingEngineering: 'manufacturingEngineering',
    Marine: 'marine',
    Massage: 'massage',
    MechanicalRepair: 'mechanicalRepair',
    Media: 'media',
    Medical: 'medical',
    MedicalConsulting: 'medicalConsulting',
    MedicalPractice: 'medicalPractice',
    MiningEarthMoving: 'miningEarthMoving',
    MobileServices: 'mobileServices',
    Motel: 'motel',
    Motorcycle: 'motorcycle',
    MusicRelated: 'musicRelated',
    Mustering: 'mustering',
    Nails: 'nails',
    NaturalTherapies: 'naturalTherapies',
    NewApartments: 'newApartments',
    Newsagency: 'newsagency',
    Nursery: 'nursery',
    NursingHome: 'nursingHome',
    Offices: 'offices',
    OfficeSupplies: 'officeSupplies',
    OilGas: 'oilGas',
    OnStreet: 'onStreet',
    PanelBeating: 'panelBeating',
    PaperPrinting: 'paperPrinting',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    PestRelated: 'pestRelated',
    Pharmacies: 'pharmacies',
    Plastic: 'plastic',
    Plumbing: 'plumbing',
    PoolWater: 'poolWater',
    PostOffices: 'postOffices',
    PrintPhoto: 'printPhoto',
    Professional: 'professional',
    PropertyRealEstate: 'propertyRealEstate',
    Rail: 'rail',
    RecreationSport: 'recreationSport',
    Recruitment: 'recruitment',
    Repair: 'repair',
    Resort: 'resort',
    Restaurant: 'restaurant',
    Retail: 'retail',
    Retailer: 'retailer',
    RetirementVillage: 'retirementVillage',
    Road: 'road',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    Scientific: 'scientific',
    Sea: 'sea',
    Security: 'security',
    SemiDetached: 'semiDetached',
    ServiceStation: 'serviceStation',
    Serviced: 'serviced',
    Services: 'services',
    Shearing: 'shearing',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    SportsComplexGym: 'sportsComplexGym',
    Studio: 'studio',
    Supermarket: 'supermarket',
    TakeawayFood: 'takeawayFood',
    Taxi: 'taxi',
    Terrace: 'terrace',
    ThemePark: 'themePark',
    Tours: 'tours',
    Townhouse: 'townhouse',
    Training: 'training',
    TransportDistribution: 'transportDistribution',
    Travel: 'travel',
    Truck: 'truck',
    VacantLand: 'vacantLand',
    Vending: 'vending',
    Villa: 'villa',
    Water: 'water',
    Welding: 'welding',
    Wholesale: 'wholesale',
    Wholesalers: 'wholesalers',
    WithShowroomWarehouse: 'withShowroomWarehouse',
    WithinShoppingComplex: 'withinShoppingComplex',
    WoolClassing: 'woolClassing',
    Wreckers: 'wreckers',
    Tattersalls: 'tattersalls',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    AlcoholGrocery: 'alcoholGrocery',
    CafeRestaurant: 'cafeRestaurant',
    DiscountStore: 'discountStore',
    EcoFriendly: 'ecoFriendly',
    Green: 'green',
    Grocery: 'grocery',
    SpecialityRetail: 'specialityRetail',
    Storage: 'storage',
    TravelAgency: 'travelAgency',
    VarietyStore: 'varietyStore',
    FranchiseNew: 'franchiseNew',
    Business: 'business'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTypesEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTypesEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTypesEnum];
export const DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSearchModeEnum = {
    ForSale: 'forSale',
    ForLease: 'forLease',
    Sold: 'sold',
    Leased: 'leased'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSearchModeEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSearchModeEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSearchModeEnum];
export const DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSortEnum = {
    Default: 'default',
    NewestFirst: 'newestFirst',
    CheapestTotalFirst: 'cheapestTotalFirst',
    CheapestPerSqmFirst: 'cheapestPerSqmFirst',
    MostExpensiveTotalFirst: 'mostExpensiveTotalFirst',
    MostExpensivePerSqmFirst: 'mostExpensivePerSqmFirst',
    SuburbAsc: 'suburbAsc',
    SuburbDesc: 'suburbDesc',
    BuildingSizeAsc: 'buildingSizeAsc',
    BuildingSizeDesc: 'buildingSizeDesc'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSortEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSortEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSortEnum];
export const DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSaleTypeEnum = {
    StandardSale: 'standardSale',
    Auction: 'auction',
    ExpressionOfInterest: 'expressionOfInterest',
    Tender: 'tender'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSaleTypeEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSaleTypeEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSaleTypeEnum];
export const DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTitleEnum = {
    Freehold: 'freehold',
    Strata: 'strata',
    NoBuilding: 'noBuilding'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTitleEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTitleEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTitleEnum];
export const DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestExclusionTypesEnum = {
    SurroundingSuburbs: 'surroundingSuburbs',
    WithoutPrice: 'withoutPrice'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestExclusionTypesEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestExclusionTypesEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestExclusionTypesEnum];

/**
 * Represents a Property Listing
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsListing
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsListing {
    /**
     * The type of Advertisement
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'objective'?: DomainPublicAdapterWebApiModelsV1ListingsListingObjectiveEnum;
    /**
     * Types of the property e.g. House, Duplex, Apartment/Unit/Flat
     * @type {Array<string>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'propertyTypes'?: Array<DomainPublicAdapterWebApiModelsV1ListingsListingPropertyTypesEnum>;
    /**
     * The current status of the property
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'status'?: DomainPublicAdapterWebApiModelsV1ListingsListingStatusEnum;
    /**
     * Sale method of the property
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'saleMode'?: DomainPublicAdapterWebApiModelsV1ListingsListingSaleModeEnum;
    /**
     * Listing channel
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'channel'?: DomainPublicAdapterWebApiModelsV1ListingsListingChannelEnum;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'addressParts'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'advertiserIdentifiers'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'apmIdentifiers'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers;
    /**
     * Total number of bathrooms in the property
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'bathrooms'?: number;
    /**
     * Total number of bedrooms in the property; Studio apartments have a value of \\\"0\\\"
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'bedrooms'?: number;
    /**
     * The building area display value of the property e.g. 160 ha
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'buildingArea'?: string;
    /**
     * The properties building area in square meters
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'buildingAreaSqm'?: number;
    /**
     * Total number of car spaces in the property.
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'carspaces'?: number;
    /**
     * The date the property is available
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'dateAvailable'?: string;
    /**
     * The date/time the listing was created
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'dateCreated'?: string;
    /**
     * The date/time the listing had major update
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'dateUpdated'?: string;
    /**
     * When minor update applied to listing
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'dateMinorUpdated'?: string;
    /**
     * The date/time the listing was first listed
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'dateListed'?: string;
    /**
     * The date/time the listing was purged.
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'datePurged'?: string;
    /**
     * The long description of the property provided by the advertiser
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'description'?: string;
    /**
     * The ID of the development project - null if no associated project
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'devProjectId'?: number;
    /**
     * Energy Efficiency Rating value for ACT properties
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'energyEfficiencyRating'?: number;
    /**
     * The property features specified by the advertiser
     * @type {Array<string>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'features'?: Array<string>;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'geoLocation'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation;
    /**
     * The short description of the property provided by the advertiser
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'headline'?: string;
    /**
     * The identifier which uniquely identifies the listing
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'id'?: number;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'inspectionDetails'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections;
    /**
     * Indicates whether the property is a new development
     * @type {boolean}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'isNewDevelopment'?: boolean;
    /**
     * The land area display string for the property e.g. 160 sqm
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'landArea'?: string;
    /**
     * The properties land area in square meters
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'landAreaSqm'?: number;
    /**
     * The media associated with the property provided by the advertiser
     * @type {Array<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'media'?: Array<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia>;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'priceDetails'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails;
    /**
     * The identifier which uniquely identifies the property being advertised.                   This may be empty if the Address of property is poorly described
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'propertyId'?: string;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'providerDetails'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'rentalDetails'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'saleDetails'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails;
    /**
     * Indicates if the property has been withdrawn               from the market
     * @type {boolean}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'isWithdrawn'?: boolean;
    /**
     * listing SEO Url
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'seoUrl'?: string;
    /**
     * In case of a mapping error is used to display error details
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'errorMessage'?: string;
    /**
     * The Listing\'s Surroundpix Url.
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'virtualTourUrl'?: string;
    /**
     * If homepass is enabled for the listing (agency)
     * @type {boolean}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'homepassEnabled'?: boolean;
    /**
     * 
     * @type {DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'statementOfInformation'?: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation;
    /**
     * Number of dwellings for current listing
     * @type {number}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'numberOfDwellings'?: number;
    /**
     * Highlight items for the listing
     * @type {Array<string>}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListing
     */
    'highlights'?: Array<string>;
}

export const DomainPublicAdapterWebApiModelsV1ListingsListingObjectiveEnum = {
    Sale: 'sale',
    Rent: 'rent'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsListingObjectiveEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsListingObjectiveEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsListingObjectiveEnum];
export const DomainPublicAdapterWebApiModelsV1ListingsListingPropertyTypesEnum = {
    Unknown: 'unknown',
    AccessoriesParts: 'accessoriesParts',
    AccommodationTourism: 'accommodationTourism',
    Accounting: 'accounting',
    AcreageSemiRural: 'acreageSemiRural',
    Adult: 'adult',
    AdvertisingMarketing: 'advertisingMarketing',
    Aerial: 'aerial',
    Aeronautical: 'aeronautical',
    AgedCare: 'agedCare',
    Agricultural: 'agricultural',
    Air: 'air',
    Aircraft: 'aircraft',
    Alarms: 'alarms',
    AlcoholLiquor: 'alcoholLiquor',
    Amusements: 'amusements',
    AnimalRelated: 'animalRelated',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    AquaticMarineMarinaBerth: 'aquaticMarineMarinaBerth',
    ArtsCrafts: 'artsCrafts',
    AutoElectrical: 'autoElectrical',
    Automotive: 'automotive',
    BackpackerHostel: 'backpackerHostel',
    Bakery: 'bakery',
    BarsNightclubs: 'barsNightclubs',
    BeautyHealth: 'beautyHealth',
    BeautyProducts: 'beautyProducts',
    BeautySalon: 'beautySalon',
    BikeAndMotorcycle: 'bikeAndMotorcycle',
    BlockOfUnits: 'blockOfUnits',
    BoardingKennels: 'boardingKennels',
    BoatsMarineMarinaBerth: 'boatsMarineMarinaBerth',
    Bookkeeping: 'bookkeeping',
    Brokerage: 'brokerage',
    Builder: 'builder',
    BuildingAndConstruction: 'buildingAndConstruction',
    Bus: 'bus',
    Butcher: 'butcher',
    CafeCoffeeShop: 'cafeCoffeeShop',
    Car: 'car',
    CarBusTruck: 'carBusTruck',
    CarDealership: 'carDealership',
    CarRental: 'carRental',
    Carspace: 'carspace',
    CarWash: 'carWash',
    CaravanPark: 'caravanPark',
    Carpenter: 'carpenter',
    Catering: 'catering',
    ChildCare: 'childCare',
    Civil: 'civil',
    Cleaning: 'cleaning',
    CleaningAndMaintenance: 'cleaningAndMaintenance',
    ClinicalPractice: 'clinicalPractice',
    ClothingAccessories: 'clothingAccessories',
    ClothingFootwear: 'clothingFootwear',
    Communication: 'communication',
    Communications: 'communications',
    ComputerIt: 'computerIT',
    ComputerAndInternet: 'computerAndInternet',
    Construction: 'construction',
    ConvenienceStore: 'convenienceStore',
    CopyLaminate: 'copyLaminate',
    Courier: 'courier',
    CropHarvesting: 'cropHarvesting',
    Customs: 'customs',
    DairyFarming: 'dairyFarming',
    Deli: 'deli',
    Dental: 'dental',
    Detailing: 'detailing',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Distributors: 'distributors',
    DrivingSchools: 'drivingSchools',
    Duplex: 'duplex',
    EducationTraining: 'educationTraining',
    Educational: 'educational',
    Electrical: 'electrical',
    EmploymentRecruitment: 'employmentRecruitment',
    Entertainment: 'entertainment',
    EntertainmentTechnology: 'entertainmentTechnology',
    Export: 'export',
    Farm: 'farm',
    Farming: 'farming',
    Fertiliser: 'fertiliser',
    Finance: 'finance',
    FinancialServices: 'financialServices',
    FishingForestry: 'fishingForestry',
    FloristNursery: 'floristNursery',
    FoodBeverage: 'foodBeverage',
    FoodBeverageHospitality: 'foodBeverageHospitality',
    FranchiseBusinessOpportunities: 'franchiseBusinessOpportunities',
    Freight: 'freight',
    FruitVegFreshProduce: 'fruitVegFreshProduce',
    FruitPicking: 'fruitPicking',
    FunctionCentre: 'functionCentre',
    FurnitureTimber: 'furnitureTimber',
    Gambling: 'gambling',
    GardenHousehold: 'gardenHousehold',
    GardenNurseries: 'gardenNurseries',
    Gardening: 'gardening',
    GlassCeramic: 'glassCeramic',
    GuestHouseBb: 'guestHouseBB',
    Hairdresser: 'hairdresser',
    HealthBeauty: 'healthBeauty',
    HealthSpa: 'healthSpa',
    Hire: 'hire',
    HomeGarden: 'homeGarden',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HomewareHardware: 'homewareHardware',
    Hospital: 'hospital',
    Hotel: 'hotel',
    HotelLeisure: 'hotelLeisure',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    HuntingTrap: 'huntingTrap',
    Import: 'import',
    ImportExportWholesale: 'importExportWholesale',
    IndustrialManufacturing: 'industrialManufacturing',
    IndustrialWarehouse: 'industrialWarehouse',
    Insemination: 'insemination',
    Insurance: 'insurance',
    Internet: 'internet',
    IrrigationServices: 'irrigationServices',
    JuiceBar: 'juiceBar',
    LandClearing: 'landClearing',
    NewLand: 'newLand',
    Landscaping: 'landscaping',
    LaundryDryCleaning: 'laundryDryCleaning',
    Legal: 'legal',
    LeisureEntertainment: 'leisureEntertainment',
    LimousineTaxi: 'limousineTaxi',
    Livestock: 'livestock',
    International: 'international',
    Machinery: 'machinery',
    MachineryMetal: 'machineryMetal',
    ManagementRights: 'managementRights',
    Manufacturers: 'manufacturers',
    ManufacturingEngineering: 'manufacturingEngineering',
    Marine: 'marine',
    Massage: 'massage',
    MechanicalRepair: 'mechanicalRepair',
    Media: 'media',
    Medical: 'medical',
    MedicalConsulting: 'medicalConsulting',
    MedicalPractice: 'medicalPractice',
    MiningEarthMoving: 'miningEarthMoving',
    MobileServices: 'mobileServices',
    Motel: 'motel',
    Motorcycle: 'motorcycle',
    MusicRelated: 'musicRelated',
    Mustering: 'mustering',
    Nails: 'nails',
    NaturalTherapies: 'naturalTherapies',
    NewApartments: 'newApartments',
    Newsagency: 'newsagency',
    Nursery: 'nursery',
    NursingHome: 'nursingHome',
    Offices: 'offices',
    OfficeSupplies: 'officeSupplies',
    OilGas: 'oilGas',
    PanelBeating: 'panelBeating',
    PaperPrinting: 'paperPrinting',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    PestRelated: 'pestRelated',
    Pharmacies: 'pharmacies',
    Plastic: 'plastic',
    Plumbing: 'plumbing',
    PoolWater: 'poolWater',
    PostOffices: 'postOffices',
    PrintPhoto: 'printPhoto',
    Professional: 'professional',
    PropertyRealEstate: 'propertyRealEstate',
    Rail: 'rail',
    RecreationSport: 'recreationSport',
    Recruitment: 'recruitment',
    Repair: 'repair',
    Resort: 'resort',
    Restaurant: 'restaurant',
    Retail: 'retail',
    Retailer: 'retailer',
    Retirement: 'retirement',
    RetirementVillage: 'retirementVillage',
    Road: 'road',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    Scientific: 'scientific',
    Sea: 'sea',
    Security: 'security',
    SemiDetached: 'semiDetached',
    ServiceStation: 'serviceStation',
    Services: 'services',
    Shearing: 'shearing',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    SportsComplexGym: 'sportsComplexGym',
    Studio: 'studio',
    Supermarket: 'supermarket',
    TakeawayFood: 'takeawayFood',
    Taxi: 'taxi',
    Terrace: 'terrace',
    ThemePark: 'themePark',
    Tours: 'tours',
    Townhouse: 'townhouse',
    Training: 'training',
    TransportDistribution: 'transportDistribution',
    Travel: 'travel',
    Truck: 'truck',
    VacantLand: 'vacantLand',
    Vending: 'vending',
    Villa: 'villa',
    Water: 'water',
    Welding: 'welding',
    Wholesale: 'wholesale',
    Wholesalers: 'wholesalers',
    WoolClassing: 'woolClassing',
    Wreckers: 'wreckers',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    AlcoholGrocery: 'alcoholGrocery',
    CafeRestaurants: 'cafeRestaurants',
    DiscountStore: 'discountStore',
    EcoFriendly: 'ecoFriendly',
    Green: 'green',
    Grocery: 'grocery',
    SpecialityRetail: 'specialityRetail',
    Storage: 'storage',
    TravelAgency: 'travelAgency',
    VarietyStore: 'varietyStore',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsListingPropertyTypesEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsListingPropertyTypesEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsListingPropertyTypesEnum];
export const DomainPublicAdapterWebApiModelsV1ListingsListingStatusEnum = {
    Unknown: 'unknown',
    Archived: 'archived',
    UnderOffer: 'underOffer',
    Sold: 'sold',
    Leased: 'leased',
    NewDevelopment: 'newDevelopment',
    RecentlyUpdated: 'recentlyUpdated',
    New: 'new',
    Live: 'live',
    Pending: 'pending'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsListingStatusEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsListingStatusEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsListingStatusEnum];
export const DomainPublicAdapterWebApiModelsV1ListingsListingSaleModeEnum = {
    Buy: 'buy',
    Rent: 'rent',
    Share: 'share',
    Sold: 'sold',
    Leased: 'leased',
    Archived: 'archived'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsListingSaleModeEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsListingSaleModeEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsListingSaleModeEnum];
export const DomainPublicAdapterWebApiModelsV1ListingsListingChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
} as const;

export type DomainPublicAdapterWebApiModelsV1ListingsListingChannelEnum = typeof DomainPublicAdapterWebApiModelsV1ListingsListingChannelEnum[keyof typeof DomainPublicAdapterWebApiModelsV1ListingsListingChannelEnum];

/**
 * Listing location
 * @export
 * @interface DomainPublicAdapterWebApiModelsV1ListingsListingLocation
 */
export interface DomainPublicAdapterWebApiModelsV1ListingsListingLocation {
    /**
     * Name
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListingLocation
     */
    'name'?: string;
    /**
     * State
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListingLocation
     */
    'state'?: string;
    /**
     * Postcode
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListingLocation
     */
    'postcode'?: string;
    /**
     * Area
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListingLocation
     */
    'area'?: string;
    /**
     * Region
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListingLocation
     */
    'region'?: string;
    /**
     * Type
     * @type {string}
     * @memberof DomainPublicAdapterWebApiModelsV1ListingsListingLocation
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser
 */
export interface DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser
     */
    'type'?: DomainSearchServiceV2ModelDomainSearchContractsV2AdvertiserTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser
     */
    'logoUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser
     */
    'preferredColourHex'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser
     */
    'bannerUrl'?: string;
    /**
     * 
     * @type {Array<DomainSearchServiceV2ModelDomainSearchContractsV2Contact>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser
     */
    'contacts'?: Array<DomainSearchServiceV2ModelDomainSearchContractsV2Contact>;
}

export const DomainSearchServiceV2ModelDomainSearchContractsV2AdvertiserTypeEnum = {
    Agency: 'Agency',
    Private: 'Private'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2AdvertiserTypeEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2AdvertiserTypeEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2AdvertiserTypeEnum];

/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchContractsV2AuctionSchedule
 */
export interface DomainSearchServiceV2ModelDomainSearchContractsV2AuctionSchedule {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2AuctionSchedule
     */
    'time'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2AuctionSchedule
     */
    'auctionLocation'?: string;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchContractsV2Contact
 */
export interface DomainSearchServiceV2ModelDomainSearchContractsV2Contact {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Contact
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Contact
     */
    'photoUrl'?: string;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchContractsV2Inspection
 */
export interface DomainSearchServiceV2ModelDomainSearchContractsV2Inspection {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Inspection
     */
    'openingTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Inspection
     */
    'closingTime'?: string;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule
 */
export interface DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule {
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule
     */
    'byAppointment'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule
     */
    'recurring'?: boolean;
    /**
     * 
     * @type {Array<DomainSearchServiceV2ModelDomainSearchContractsV2Inspection>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule
     */
    'times'?: Array<DomainSearchServiceV2ModelDomainSearchContractsV2Inspection>;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchContractsV2Media
 */
export interface DomainSearchServiceV2ModelDomainSearchContractsV2Media {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Media
     */
    'category'?: DomainSearchServiceV2ModelDomainSearchContractsV2MediaCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Media
     */
    'url'?: string;
}

export const DomainSearchServiceV2ModelDomainSearchContractsV2MediaCategoryEnum = {
    Image: 'Image'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2MediaCategoryEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2MediaCategoryEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2MediaCategoryEnum];

/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails
 */
export interface DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails {
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails
     */
    'priceFrom'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails
     */
    'priceTo'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails
     */
    'displayPrice'?: string;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchContractsV2Project
 */
export interface DomainSearchServiceV2ModelDomainSearchContractsV2Project {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'promoLevel'?: DomainSearchServiceV2ModelDomainSearchContractsV2ProjectPromoLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'state'?: DomainSearchServiceV2ModelDomainSearchContractsV2ProjectStateEnum;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'bannerUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'preferredColorHex'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'logoUrl'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'labels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'displayableAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'suburb'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'suburbId'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'features'?: Array<string>;
    /**
     * 
     * @type {Array<DomainSearchServiceV2ModelDomainSearchContractsV2Media>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'media'?: Array<DomainSearchServiceV2ModelDomainSearchContractsV2Media>;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2Project
     */
    'projectSlug'?: string;
}

export const DomainSearchServiceV2ModelDomainSearchContractsV2ProjectPromoLevelEnum = {
    Standard: 'Standard',
    Premium: 'Premium'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2ProjectPromoLevelEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2ProjectPromoLevelEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2ProjectPromoLevelEnum];
export const DomainSearchServiceV2ModelDomainSearchContractsV2ProjectStateEnum = {
    Act: 'ACT',
    Nsw: 'NSW',
    Qld: 'QLD',
    Vic: 'VIC',
    Sa: 'SA',
    Wa: 'WA',
    Nt: 'NT',
    Tas: 'TAS'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2ProjectStateEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2ProjectStateEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2ProjectStateEnum];

/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
 */
export interface DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'state'?: DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsStateEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'features'?: Array<DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsFeaturesEnum>;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'propertyType'?: DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsPropertyTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'allPropertyTypes'?: Array<DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsAllPropertyTypesEnum>;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'bathrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'bedrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'carspaces'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'unitNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'streetNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'area'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'suburb'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'suburbId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'displayableAddress'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'longitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'mapCertainty'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'landArea'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'buildingArea'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'onlyShowProperties'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'displayAddressType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'isRural'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'topSpotKeywords'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'isNew'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
     */
    'tags'?: Array<string>;
}

export const DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsStateEnum = {
    Act: 'ACT',
    Nsw: 'NSW',
    Qld: 'QLD',
    Vic: 'VIC',
    Sa: 'SA',
    Wa: 'WA',
    Nt: 'NT',
    Tas: 'TAS'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsStateEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsStateEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsStateEnum];
export const DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsFeaturesEnum = {
    Unrecognised: 'Unrecognised',
    AirConditioning: 'AirConditioning',
    BuiltInWardrobes: 'BuiltInWardrobes',
    CableOrSatellite: 'CableOrSatellite',
    Ensuite: 'Ensuite',
    Floorboards: 'Floorboards',
    Gas: 'Gas',
    InternalLaundry: 'InternalLaundry',
    PetsAllowed: 'PetsAllowed',
    SecureParking: 'SecureParking',
    SwimmingPool: 'SwimmingPool',
    Furnished: 'Furnished',
    GroundFloor: 'GroundFloor',
    WaterViews: 'WaterViews',
    NorthFacing: 'NorthFacing',
    CityViews: 'CityViews',
    IndoorSpa: 'IndoorSpa',
    Gym: 'Gym',
    AlarmSystem: 'AlarmSystem',
    Intercom: 'Intercom',
    BroadbandInternetAccess: 'BroadbandInternetAccess',
    Bath: 'Bath',
    Fireplace: 'Fireplace',
    SeparateDiningRoom: 'SeparateDiningRoom',
    Heating: 'Heating',
    Dishwasher: 'Dishwasher',
    Study: 'Study',
    TennisCourt: 'TennisCourt',
    Shed: 'Shed',
    FullyFenced: 'FullyFenced',
    BalconyDeck: 'BalconyDeck',
    GardenCourtyard: 'GardenCourtyard',
    OutdoorSpa: 'OutdoorSpa',
    DoubleGlazedWindows: 'DoubleGlazedWindows',
    EnergyEfficientAppliances: 'EnergyEfficientAppliances',
    WaterEfficientAppliances: 'WaterEfficientAppliances',
    WallCeilingInsulation: 'WallCeilingInsulation',
    RainwaterStorageTank: 'RainwaterStorageTank',
    GreywaterSystem: 'GreywaterSystem',
    WaterEfficientFixtures: 'WaterEfficientFixtures',
    SolarHotWater: 'SolarHotWater',
    SolarPanels: 'SolarPanels'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsFeaturesEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsFeaturesEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsFeaturesEnum];
export const DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsPropertyTypeEnum = {
    Unknown: 'Unknown',
    AcreageSemiRural: 'AcreageSemiRural',
    ApartmentUnitFlat: 'ApartmentUnitFlat',
    Aquaculture: 'Aquaculture',
    BlockOfUnits: 'BlockOfUnits',
    CarSpace: 'CarSpace',
    DairyFarming: 'DairyFarming',
    DevelopmentSite: 'DevelopmentSite',
    Duplex: 'Duplex',
    Farm: 'Farm',
    FishingForestry: 'FishingForestry',
    NewHomeDesigns: 'NewHomeDesigns',
    House: 'House',
    NewHouseLand: 'NewHouseLand',
    IrrigationServices: 'IrrigationServices',
    NewLand: 'NewLand',
    Livestock: 'Livestock',
    NewApartments: 'NewApartments',
    Penthouse: 'Penthouse',
    RetirementVillage: 'RetirementVillage',
    Rural: 'Rural',
    SemiDetached: 'SemiDetached',
    SpecialistFarm: 'SpecialistFarm',
    Studio: 'Studio',
    Terrace: 'Terrace',
    Townhouse: 'Townhouse',
    VacantLand: 'VacantLand',
    Villa: 'Villa',
    Cropping: 'Cropping',
    Viticulture: 'Viticulture',
    MixedFarming: 'MixedFarming',
    Grazing: 'Grazing',
    Horticulture: 'Horticulture',
    Equine: 'Equine',
    Farmlet: 'Farmlet',
    Orchard: 'Orchard',
    RuralLifestyle: 'RuralLifestyle'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsPropertyTypeEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsPropertyTypeEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsPropertyTypeEnum];
export const DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsAllPropertyTypesEnum = {
    Unknown: 'Unknown',
    AcreageSemiRural: 'AcreageSemiRural',
    ApartmentUnitFlat: 'ApartmentUnitFlat',
    Aquaculture: 'Aquaculture',
    BlockOfUnits: 'BlockOfUnits',
    CarSpace: 'CarSpace',
    DairyFarming: 'DairyFarming',
    DevelopmentSite: 'DevelopmentSite',
    Duplex: 'Duplex',
    Farm: 'Farm',
    FishingForestry: 'FishingForestry',
    NewHomeDesigns: 'NewHomeDesigns',
    House: 'House',
    NewHouseLand: 'NewHouseLand',
    IrrigationServices: 'IrrigationServices',
    NewLand: 'NewLand',
    Livestock: 'Livestock',
    NewApartments: 'NewApartments',
    Penthouse: 'Penthouse',
    RetirementVillage: 'RetirementVillage',
    Rural: 'Rural',
    SemiDetached: 'SemiDetached',
    SpecialistFarm: 'SpecialistFarm',
    Studio: 'Studio',
    Terrace: 'Terrace',
    Townhouse: 'Townhouse',
    VacantLand: 'VacantLand',
    Villa: 'Villa',
    Cropping: 'Cropping',
    Viticulture: 'Viticulture',
    MixedFarming: 'MixedFarming',
    Grazing: 'Grazing',
    Horticulture: 'Horticulture',
    Equine: 'Equine',
    Farmlet: 'Farmlet',
    Orchard: 'Orchard',
    RuralLifestyle: 'RuralLifestyle'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsAllPropertyTypesEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsAllPropertyTypesEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsAllPropertyTypesEnum];

/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
 */
export interface DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'promoLevel'?: DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingPromoLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'listingType'?: DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingListingTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'projectId'?: number;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'advertiser'?: DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'priceDetails'?: DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails;
    /**
     * 
     * @type {Array<DomainSearchServiceV2ModelDomainSearchContractsV2Media>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'media'?: Array<DomainSearchServiceV2ModelDomainSearchContractsV2Media>;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'propertyDetails'?: DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'headline'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'summaryDescription'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'hasFloorplan'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'hasVideo'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'labels'?: Array<string>;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchContractsV2AuctionSchedule}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'auctionSchedule'?: DomainSearchServiceV2ModelDomainSearchContractsV2AuctionSchedule;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'dateAvailable'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'dateListed'?: string;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'inspectionSchedule'?: DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchContractsV2SoldData}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'soldData'?: DomainSearchServiceV2ModelDomainSearchContractsV2SoldData;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
     */
    'listingSlug'?: string;
}

export const DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingPromoLevelEnum = {
    Standard: 'Standard',
    StandardPp: 'StandardPP',
    Elite: 'Elite',
    ElitePp: 'ElitePP',
    PremiumPlus: 'PremiumPlus'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingPromoLevelEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingPromoLevelEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingPromoLevelEnum];
export const DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingListingTypeEnum = {
    Sale: 'Sale',
    Rent: 'Rent',
    Share: 'Share',
    Sold: 'Sold',
    NewHomes: 'NewHomes'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingListingTypeEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingListingTypeEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingListingTypeEnum];

/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult
 */
export interface DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult
     */
    'type'?: DomainSearchServiceV2ModelDomainSearchContractsV2SearchResultTypeEnum;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult
     */
    'listing'?: DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing;
    /**
     * 
     * @type {Array<DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing>}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult
     */
    'listings'?: Array<DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing>;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchContractsV2Project}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult
     */
    'project'?: DomainSearchServiceV2ModelDomainSearchContractsV2Project;
}

export const DomainSearchServiceV2ModelDomainSearchContractsV2SearchResultTypeEnum = {
    PropertyListing: 'PropertyListing',
    Project: 'Project'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2SearchResultTypeEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2SearchResultTypeEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2SearchResultTypeEnum];

/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchContractsV2SoldData
 */
export interface DomainSearchServiceV2ModelDomainSearchContractsV2SoldData {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2SoldData
     */
    'source'?: DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSourceEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2SoldData
     */
    'saleMethod'?: DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSaleMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2SoldData
     */
    'soldDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchContractsV2SoldData
     */
    'soldPrice'?: number;
}

export const DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSourceEnum = {
    Agency: 'Agency',
    Apm: 'Apm'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSourceEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSourceEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSourceEnum];
export const DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSaleMethodEnum = {
    NotStated: 'NotStated',
    SoldByAuction: 'SoldByAuction',
    SoldByPrivateTreaty: 'SoldByPrivateTreaty',
    Withdrawn: 'Withdrawn',
    SoldPriorToAuction: 'SoldPriorToAuction'
} as const;

export type DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSaleMethodEnum = typeof DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSaleMethodEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSaleMethodEnum];

/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsBox
 */
export interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsBox {
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsBox
     */
    'topLeft'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsBox
     */
    'bottomRight'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCircle
 */
export interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCircle {
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCircle
     */
    'center'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCircle
     */
    'radiusInMeters'?: number;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort
 */
export interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort {
    /**
     * 
     * @type {Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElement>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort
     */
    'elements'?: Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElement>;
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort
     */
    'boostPrimarySuburbs'?: boolean;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElement
 */
export interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElement {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElement
     */
    'field'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElement
     */
    'direction'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementDirectionEnum;
}

export const DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementFieldEnum = {
    AdId: 'AdId',
    PromoLevelScore: 'PromoLevelScore',
    FreshnessLevel: 'FreshnessLevel',
    ProductBoost: 'ProductBoost',
    DateUpdated: 'DateUpdated',
    DateListed: 'DateListed',
    SuburbName: 'SuburbName',
    PriceDisplayOption: 'PriceDisplayOption',
    SoldDate: 'SoldDate',
    Price: 'Price',
    EarliestInspectionOpenTime: 'EarliestInspectionOpenTime',
    EarliestAuctionTime: 'EarliestAuctionTime',
    DateAvailable: 'DateAvailable'
} as const;

export type DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementFieldEnum = typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementFieldEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementFieldEnum];
export const DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementDirectionEnum = {
    Ascending: 'Ascending',
    Descending: 'Descending'
} as const;

export type DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementDirectionEnum = typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementDirectionEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementDirectionEnum];

/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint
 */
export interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint {
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint
     */
    'lon'?: number;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow
 */
export interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow {
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsBox}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow
     */
    'box'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsBox;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCircle}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow
     */
    'circle'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCircle;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsPolygon}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow
     */
    'polygon'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsPolygon;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsPolygon
 */
export interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsPolygon {
    /**
     * 
     * @type {Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsPolygon
     */
    'points'?: Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint>;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment
 */
export interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment
     */
    'postcode'?: string;
}
/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation
 */
export interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation
     */
    'state'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocationStateEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation
     */
    'area'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation
     */
    'suburb'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation
     */
    'postCode'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation
     */
    'includeSurroundingSuburbs'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation
     */
    'surroundingRadiusInMeters'?: number;
}

export const DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocationStateEnum = {
    Act: 'ACT',
    Nsw: 'NSW',
    Qld: 'QLD',
    Vic: 'VIC',
    Sa: 'SA',
    Wa: 'WA',
    Nt: 'NT',
    Tas: 'TAS'
} as const;

export type DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocationStateEnum = typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocationStateEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocationStateEnum];

/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
 */
export interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'listingType'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'propertyTypes'?: Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyTypesEnum>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'propertyFeatures'?: Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyFeaturesEnum>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'listingAttributes'?: Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingAttributesEnum>;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'propertyEstablishedType'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyEstablishedTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'minBedrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'maxBedrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'minBathrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'maxBathrooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'minCarspaces'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'maxCarspaces'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'minPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'maxPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'minLandArea'?: number;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'maxLandArea'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'advertiserIds'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'adIds'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'excludeAdIds'?: Array<number>;
    /**
     * 
     * @type {Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'locations'?: Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation>;
    /**
     * 
     * @type {Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'schoolCatchments'?: Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment>;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'locationTerms'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'keywords'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'newDevOnly'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'inspectionFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'inspectionTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'auctionFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'auctionTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'dateAvailableFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'dateAvailableTo'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'ruralOnly'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'excludePriceWithheld'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'excludeDepositTaken'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'topspotKeywords'?: Array<string>;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'customSort'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort;
    /**
     * 
     * @type {DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'sort'?: DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'pageSize'?: number;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'geoWindow'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'updatedSince'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'listedSince'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'includeInspectionAggregations'?: boolean;
    /**
     * 
     * @type {Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery>}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'tags'?: Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery>;
    /**
     * 
     * @type {number}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
     */
    'pageNumber'?: number;
}

export const DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingTypeEnum = {
    Sale: 'Sale',
    Rent: 'Rent',
    Share: 'Share',
    Sold: 'Sold',
    NewHomes: 'NewHomes'
} as const;

export type DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingTypeEnum = typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingTypeEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingTypeEnum];
export const DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyTypesEnum = {
    AcreageSemiRural: 'AcreageSemiRural',
    ApartmentUnitFlat: 'ApartmentUnitFlat',
    Aquaculture: 'Aquaculture',
    BlockOfUnits: 'BlockOfUnits',
    CarSpace: 'CarSpace',
    DairyFarming: 'DairyFarming',
    DevelopmentSite: 'DevelopmentSite',
    Duplex: 'Duplex',
    Farm: 'Farm',
    FishingForestry: 'FishingForestry',
    NewHomeDesigns: 'NewHomeDesigns',
    House: 'House',
    NewHouseLand: 'NewHouseLand',
    IrrigationServices: 'IrrigationServices',
    NewLand: 'NewLand',
    Livestock: 'Livestock',
    NewApartments: 'NewApartments',
    Penthouse: 'Penthouse',
    RetirementVillage: 'RetirementVillage',
    Rural: 'Rural',
    SemiDetached: 'SemiDetached',
    SpecialistFarm: 'SpecialistFarm',
    Studio: 'Studio',
    Terrace: 'Terrace',
    Townhouse: 'Townhouse',
    VacantLand: 'VacantLand',
    Villa: 'Villa',
    Cropping: 'Cropping',
    Viticulture: 'Viticulture',
    MixedFarming: 'MixedFarming',
    Grazing: 'Grazing',
    Horticulture: 'Horticulture',
    Equine: 'Equine',
    Farmlet: 'Farmlet',
    Orchard: 'Orchard',
    RuralLifestyle: 'RuralLifestyle'
} as const;

export type DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyTypesEnum = typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyTypesEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyTypesEnum];
export const DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyFeaturesEnum = {
    AirConditioning: 'AirConditioning',
    BuiltInWardrobes: 'BuiltInWardrobes',
    CableOrSatellite: 'CableOrSatellite',
    Ensuite: 'Ensuite',
    Floorboards: 'Floorboards',
    Gas: 'Gas',
    InternalLaundry: 'InternalLaundry',
    PetsAllowed: 'PetsAllowed',
    SecureParking: 'SecureParking',
    SwimmingPool: 'SwimmingPool',
    Furnished: 'Furnished',
    GroundFloor: 'GroundFloor',
    WaterViews: 'WaterViews',
    NorthFacing: 'NorthFacing',
    CityViews: 'CityViews',
    IndoorSpa: 'IndoorSpa',
    Gym: 'Gym',
    AlarmSystem: 'AlarmSystem',
    Intercom: 'Intercom',
    BroadbandInternetAccess: 'BroadbandInternetAccess',
    Bath: 'Bath',
    Fireplace: 'Fireplace',
    SeparateDiningRoom: 'SeparateDiningRoom',
    Heating: 'Heating',
    Dishwasher: 'Dishwasher',
    Study: 'Study',
    TennisCourt: 'TennisCourt',
    Shed: 'Shed',
    FullyFenced: 'FullyFenced',
    BalconyDeck: 'BalconyDeck',
    GardenCourtyard: 'GardenCourtyard',
    OutdoorSpa: 'OutdoorSpa',
    DoubleGlazedWindows: 'DoubleGlazedWindows',
    EnergyEfficientAppliances: 'EnergyEfficientAppliances',
    WaterEfficientAppliances: 'WaterEfficientAppliances',
    WallCeilingInsulation: 'WallCeilingInsulation',
    RainwaterStorageTank: 'RainwaterStorageTank',
    GreywaterSystem: 'GreywaterSystem',
    WaterEfficientFixtures: 'WaterEfficientFixtures',
    SolarHotWater: 'SolarHotWater',
    SolarPanels: 'SolarPanels'
} as const;

export type DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyFeaturesEnum = typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyFeaturesEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyFeaturesEnum];
export const DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingAttributesEnum = {
    HasPhotos: 'HasPhotos',
    HasPrice: 'HasPrice',
    NotUpForAuction: 'NotUpForAuction',
    NotUnderContract: 'NotUnderContract',
    MarkedAsNew: 'MarkedAsNew'
} as const;

export type DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingAttributesEnum = typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingAttributesEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingAttributesEnum];
export const DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyEstablishedTypeEnum = {
    Any: 'Any',
    New: 'New',
    Established: 'Established'
} as const;

export type DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyEstablishedTypeEnum = typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyEstablishedTypeEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyEstablishedTypeEnum];

/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery
 */
export interface DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery
     */
    'criteria'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQueryCriteriaEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery
     */
    'tag'?: string;
}

export const DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQueryCriteriaEnum = {
    Include: 'Include',
    Exclude: 'Exclude'
} as const;

export type DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQueryCriteriaEnum = typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQueryCriteriaEnum[keyof typeof DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQueryCriteriaEnum];

/**
 * 
 * @export
 * @interface DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy
 */
export interface DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy {
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy
     */
    'sortKey'?: DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBySortKeyEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy
     */
    'direction'?: DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortByDirectionEnum;
    /**
     * 
     * @type {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint}
     * @memberof DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy
     */
    'proximityTo'?: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint;
}

export const DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBySortKeyEnum = {
    Default: 'Default',
    Suburb: 'Suburb',
    Price: 'Price',
    DateUpdated: 'DateUpdated',
    InspectionTime: 'InspectionTime',
    AuctionTime: 'AuctionTime',
    Proximity: 'Proximity',
    SoldDate: 'SoldDate',
    DefaultThenDateUpdated: 'DefaultThenDateUpdated',
    DateAvailable: 'DateAvailable',
    DateListed: 'DateListed'
} as const;

export type DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBySortKeyEnum = typeof DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBySortKeyEnum[keyof typeof DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBySortKeyEnum];
export const DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortByDirectionEnum = {
    Ascending: 'Ascending',
    Descending: 'Descending'
} as const;

export type DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortByDirectionEnum = typeof DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortByDirectionEnum[keyof typeof DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortByDirectionEnum];

/**
 * 
 * @export
 * @interface EnquiriesV1EnquiryReport
 */
export interface EnquiriesV1EnquiryReport {
    /**
     * 
     * @type {string}
     * @memberof EnquiriesV1EnquiryReport
     */
    'deliveryMethod'?: EnquiriesV1EnquiryReportDeliveryMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof EnquiriesV1EnquiryReport
     */
    'enquiryType'?: EnquiriesV1EnquiryReportEnquiryTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof EnquiriesV1EnquiryReport
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnquiriesV1EnquiryReport
     */
    'message'?: string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EnquiriesV1EnquiryReport
     */
    'metaData'?: { [key: string]: string; } | null;
    /**
     * 
     * @type {Array<EnquiriesV1RecipientDeliveryStatus>}
     * @memberof EnquiriesV1EnquiryReport
     */
    'recipientsDeliveryStatus'?: Array<EnquiriesV1RecipientDeliveryStatus> | null;
    /**
     * 
     * @type {number}
     * @memberof EnquiriesV1EnquiryReport
     */
    'referenceId'?: number | null;
    /**
     * 
     * @type {EnquiriesV1Sender}
     * @memberof EnquiriesV1EnquiryReport
     */
    'sender'?: EnquiriesV1Sender;
    /**
     * 
     * @type {string}
     * @memberof EnquiriesV1EnquiryReport
     */
    'dateReceived'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnquiriesV1EnquiryReport
     */
    'agencyId'?: number | null;
}

export const EnquiriesV1EnquiryReportDeliveryMethodEnum = {
    Email: 'email',
    Sms: 'sms'
} as const;

export type EnquiriesV1EnquiryReportDeliveryMethodEnum = typeof EnquiriesV1EnquiryReportDeliveryMethodEnum[keyof typeof EnquiriesV1EnquiryReportDeliveryMethodEnum];
export const EnquiriesV1EnquiryReportEnquiryTypeEnum = {
    Listing: 'listing',
    DevProject: 'devProject',
    NewDevLanding: 'newDevLanding',
    AgencyProfile: 'agencyProfile',
    AgentProfile: 'agentProfile',
    ContractRequest: 'contractRequest',
    VendorEnquiry: 'vendorEnquiry',
    PrePortalListing: 'prePortalListing'
} as const;

export type EnquiriesV1EnquiryReportEnquiryTypeEnum = typeof EnquiriesV1EnquiryReportEnquiryTypeEnum[keyof typeof EnquiriesV1EnquiryReportEnquiryTypeEnum];

/**
 * Recipient
 * @export
 * @interface EnquiriesV1Recipient
 */
export interface EnquiriesV1Recipient {
    /**
     * Gets or Sets RecipientType
     * @type {string}
     * @memberof EnquiriesV1Recipient
     */
    'recipientType'?: EnquiriesV1RecipientRecipientTypeEnum;
    /**
     * Gets or Sets Address
     * @type {string}
     * @memberof EnquiriesV1Recipient
     */
    'address': string;
}

export const EnquiriesV1RecipientRecipientTypeEnum = {
    Primary: 'primary',
    Secondary: 'secondary',
    Hidden: 'hidden'
} as const;

export type EnquiriesV1RecipientRecipientTypeEnum = typeof EnquiriesV1RecipientRecipientTypeEnum[keyof typeof EnquiriesV1RecipientRecipientTypeEnum];

/**
 * RecipientDeliveryStatus
 * @export
 * @interface EnquiriesV1RecipientDeliveryStatus
 */
export interface EnquiriesV1RecipientDeliveryStatus {
    /**
     * Gets or Sets DeliveryStatus
     * @type {string}
     * @memberof EnquiriesV1RecipientDeliveryStatus
     */
    'deliveryStatus'?: EnquiriesV1RecipientDeliveryStatusDeliveryStatusEnum;
    /**
     * 
     * @type {EnquiriesV1Recipient}
     * @memberof EnquiriesV1RecipientDeliveryStatus
     */
    'recipient'?: EnquiriesV1Recipient;
    /**
     * Gets or Sets Date
     * @type {string}
     * @memberof EnquiriesV1RecipientDeliveryStatus
     */
    'date'?: string | null;
}

export const EnquiriesV1RecipientDeliveryStatusDeliveryStatusEnum = {
    Queued: 'queued',
    Delivered: 'delivered',
    Failed: 'failed',
    Deferred: 'deferred'
} as const;

export type EnquiriesV1RecipientDeliveryStatusDeliveryStatusEnum = typeof EnquiriesV1RecipientDeliveryStatusDeliveryStatusEnum[keyof typeof EnquiriesV1RecipientDeliveryStatusDeliveryStatusEnum];

/**
 * 
 * @export
 * @interface EnquiriesV1Sender
 */
export interface EnquiriesV1Sender {
    /**
     * 
     * @type {string}
     * @memberof EnquiriesV1Sender
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnquiriesV1Sender
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnquiriesV1Sender
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnquiriesV1Sender
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnquiriesV1Sender
     */
    'postcode'?: string | null;
}
/**
 * 
 * @export
 * @interface LeadScopeGetById200Response
 */
export interface LeadScopeGetById200Response {
    /**
     * 
     * @type {string}
     * @memberof LeadScopeGetById200Response
     */
    'url'?: string;
}
/**
 * Address structure for property
 * @export
 * @interface ListingAdminV2Address
 */
export interface ListingAdminV2Address {
    /**
     * Unit number for apartments, maximum 30 characters
     * @type {string}
     * @memberof ListingAdminV2Address
     */
    'unitNumber'?: string;
    /**
     * Street name, maximum 100 characters
     * @type {string}
     * @memberof ListingAdminV2Address
     */
    'street': string;
    /**
     * What granularity to display the properties location at.   For residential listings, the accepted displayOption values are \"FullAddress\", \"StreetAndSuburb\" or \"SuburbOnly\".
     * @type {string}
     * @memberof ListingAdminV2Address
     */
    'displayOption'?: ListingAdminV2AddressDisplayOptionEnum;
    /**
     * 
     * @type {ListingAdminV2GeoLocation}
     * @memberof ListingAdminV2Address
     */
    'suggestedGeoLocation'?: ListingAdminV2GeoLocation;
    /**
     * Street number, maximum 20 characters
     * @type {string}
     * @memberof ListingAdminV2Address
     */
    'streetNumber'?: string;
    /**
     * Suburb name , maximum 50 characters
     * @type {string}
     * @memberof ListingAdminV2Address
     */
    'suburb': string;
    /**
     * Postcode
     * @type {string}
     * @memberof ListingAdminV2Address
     */
    'postcode': string;
    /**
     * State
     * @type {string}
     * @memberof ListingAdminV2Address
     */
    'state': ListingAdminV2AddressStateEnum;
}

export const ListingAdminV2AddressDisplayOptionEnum = {
    Unspecified: 'unspecified',
    FullAddress: 'fullAddress',
    StreetAndSuburb: 'streetAndSuburb',
    SuburbOnly: 'suburbOnly',
    RegionOnly: 'regionOnly',
    AreaOnly: 'areaOnly',
    StateOnly: 'stateOnly'
} as const;

export type ListingAdminV2AddressDisplayOptionEnum = typeof ListingAdminV2AddressDisplayOptionEnum[keyof typeof ListingAdminV2AddressDisplayOptionEnum];
export const ListingAdminV2AddressStateEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Act: 'act',
    Sa: 'sa',
    Wa: 'wa',
    Tas: 'tas',
    Qld: 'qld',
    Nt: 'nt'
} as const;

export type ListingAdminV2AddressStateEnum = typeof ListingAdminV2AddressStateEnum[keyof typeof ListingAdminV2AddressStateEnum];

/**
 * Represents a agent or conjunction agent domain model  The only difference to normal contacts is agent contacts needs to have their agency specified
 * @export
 * @interface ListingAdminV2AgentContact
 */
export interface ListingAdminV2AgentContact {
    /**
     * Conjunction agent\'s agency
     * @type {number}
     * @memberof ListingAdminV2AgentContact
     */
    'agencyId': number;
    /**
     * Domain ID of the contact person at the agency
     * @type {number}
     * @memberof ListingAdminV2AgentContact
     */
    'domainAgentId'?: number;
    /**
     * First name. Maximum 50 characters.
     * @type {string}
     * @memberof ListingAdminV2AgentContact
     */
    'firstName'?: string;
    /**
     * Last name. Maximum 50 characters.
     * @type {string}
     * @memberof ListingAdminV2AgentContact
     */
    'lastName'?: string;
    /**
     * Phone. Maximum 20 characters.
     * @type {string}
     * @memberof ListingAdminV2AgentContact
     */
    'phone'?: string;
    /**
     * Fax. Maximum 20 characters.
     * @type {string}
     * @memberof ListingAdminV2AgentContact
     */
    'fax'?: string;
    /**
     * Mobile. Maximum 20 characters.
     * @type {string}
     * @memberof ListingAdminV2AgentContact
     */
    'mobile'?: string;
    /**
     * Email. Maximum 100 characters.
     * @type {string}
     * @memberof ListingAdminV2AgentContact
     */
    'email'?: string;
    /**
     * Indicates whether the contact person should receive emails for the listing
     * @type {boolean}
     * @memberof ListingAdminV2AgentContact
     */
    'receiveEmails'?: boolean;
}
/**
 * Area information, Either single value or from and To must be provided
 * @export
 * @interface ListingAdminV2Area
 */
export interface ListingAdminV2Area {
    /**
     * Area. Will be rounded to 2 decimals.
     * @type {number}
     * @memberof ListingAdminV2Area
     */
    'value'?: number;
    /**
     * Minimum area
     * @type {number}
     * @memberof ListingAdminV2Area
     */
    'from'?: number;
    /**
     * Maximum area
     * @type {number}
     * @memberof ListingAdminV2Area
     */
    'to'?: number;
    /**
     * Unit of measure, defaults to SquareMetres if not provided.
     * @type {string}
     * @memberof ListingAdminV2Area
     */
    'unit'?: ListingAdminV2AreaUnitEnum;
}

export const ListingAdminV2AreaUnitEnum = {
    SquareMetres: 'squareMetres',
    Acres: 'acres',
    Hectares: 'hectares',
    SquareFeet: 'squareFeet',
    SquareYards: 'squareYards',
    Squares: 'squares'
} as const;

export type ListingAdminV2AreaUnitEnum = typeof ListingAdminV2AreaUnitEnum[keyof typeof ListingAdminV2AreaUnitEnum];

/**
 * Business off market listing
 * @export
 * @interface ListingAdminV2BusinessOffMarketListing
 */
export interface ListingAdminV2BusinessOffMarketListing {
    /**
     * 
     * @type {ListingAdminV2SaleInfo}
     * @memberof ListingAdminV2BusinessOffMarketListing
     */
    'saleInfo'?: ListingAdminV2SaleInfo;
    /**
     * A string identifying the data provider
     * @type {string}
     * @memberof ListingAdminV2BusinessOffMarketListing
     */
    'listingProvider'?: string;
    /**
     * The Domain Agency ID
     * @type {number}
     * @memberof ListingAdminV2BusinessOffMarketListing
     */
    'domainAgencyID': number;
    /**
     * External Advertisement Id of up to 50 characters will be stored.<br />  This value is used to identify an Advertisement for updates and should be unique for listing provider.<br />  This value is case-insensitive (meaning AAAA will update aaaa).
     * @type {string}
     * @memberof ListingAdminV2BusinessOffMarketListing
     */
    'providerAdId': string;
    /**
     * Description of the property.  6000 characters in length. The following HTML elements are permitted: &lt;br /&gt;, &lt;p&gt;&lt;/p&gt;, &amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade.  Unicode characters which are unsupported by Latin-1 (ISO-8859-1 range from U+0080 to U+00FF), will be removed https://en.wikipedia.org/wiki/ISO/IEC_8859-1
     * @type {string}
     * @memberof ListingAdminV2BusinessOffMarketListing
     */
    'description'?: string;
    /**
     * \'Headline\' Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.
     * @type {string}
     * @memberof ListingAdminV2BusinessOffMarketListing
     */
    'summary'?: string;
    /**
     * Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.
     * @type {Array<ListingAdminV2Contact>}
     * @memberof ListingAdminV2BusinessOffMarketListing
     */
    'contacts'?: Array<ListingAdminV2Contact>;
    /**
     * Sale or Rent
     * @type {string}
     * @memberof ListingAdminV2BusinessOffMarketListing
     */
    'listingAction': ListingAdminV2BusinessOffMarketListingListingActionEnum;
    /**
     * 
     * @type {ListingAdminV2OffMarketDetailsBase}
     * @memberof ListingAdminV2BusinessOffMarketListing
     */
    'offMarketDetails': ListingAdminV2OffMarketDetailsBase;
    /**
     * 
     * @type {ListingAdminV2BusinessOffMarketProperty}
     * @memberof ListingAdminV2BusinessOffMarketListing
     */
    'propertyDetails': ListingAdminV2BusinessOffMarketProperty;
}

export const ListingAdminV2BusinessOffMarketListingListingActionEnum = {
    Sale: 'sale',
    Rent: 'rent'
} as const;

export type ListingAdminV2BusinessOffMarketListingListingActionEnum = typeof ListingAdminV2BusinessOffMarketListingListingActionEnum[keyof typeof ListingAdminV2BusinessOffMarketListingListingActionEnum];

/**
 * Business off market property
 * @export
 * @interface ListingAdminV2BusinessOffMarketProperty
 */
export interface ListingAdminV2BusinessOffMarketProperty {
    /**
     * Business property types [\'accessoriesParts\', \'accommodationTourism\', \'accounting\', \'adult\', \'advertisingMarketing\', \'aerial\', \'aeronautical\', \'agedCare\', \'agricultural\', \'air\', \'aircraft\', \'alarms\', \'alcoholLiquor\', \'amusements\', \'animalRelated\', \'aquaculture\', \'aquaticMarineMarinaBerth\', \'artsCrafts\', \'autoElectrical\', \'automotive\', \'backpackerHostel\', \'bakery\', \'barsNightclubs\', \'beautyHealth\', \'beautyProducts\', \'beautySalon\', \'bikeAndMotorcycle\', \'boardingKennels\', \'boatsMarineMarinaBerth\', \'bookkeeping\', \'brokerage\', \'builder\', \'buildingAndConstruction\', \'bus\', \'butcher\', \'cafeCoffeeShop\', \'car\', \'carBusTruck\', \'carDealership\', \'carRental\', \'carWash\', \'caravanPark\', \'carpenter\', \'catering\', \'childCare\', \'civil\', \'cleaning\', \'cleaningAndMaintenance\', \'clinicalPractice\', \'clothingAccessories\', \'clothingFootwear\', \'communication\', \'communications\', \'computerIT\', \'computerAndInternet\', \'construction\', \'convenienceStore\', \'copyLaminate\', \'courier\', \'cropHarvesting\', \'customs\', \'dairyFarming\', \'deli\', \'dental\', \'detailing\', \'distributors\', \'drivingSchools\', \'educationTraining\', \'educational\', \'electrical\', \'employmentRecruitment\', \'entertainment\', \'entertainmentTechnology\', \'export\', \'farming\', \'fertiliser\', \'finance\', \'financialServices\', \'fishingForestry\', \'floristNursery\', \'foodBeverage\', \'foodBeverageHospitality\', \'franchiseBusinessOpportunities\', \'freight\', \'fruitVegFreshProduce\', \'fruitPicking\', \'functionCentre\', \'furnitureTimber\', \'gambling\', \'gardenHousehold\', \'gardenNurseries\', \'gardening\', \'glassCeramic\', \'guestHouseBB\', \'hairdresser\', \'healthBeauty\', \'healthSpa\', \'hire\', \'homeGarden\', \'homeBased\', \'homewareHardware\', \'hospital\', \'hotel\', \'huntingTrap\', \'import\', \'importExportWholesale\', \'industrialManufacturing\', \'insemination\', \'insurance\', \'internet\', \'irrigationServices\', \'juiceBar\', \'landClearing\', \'landscaping\', \'laundryDryCleaning\', \'legal\', \'leisureEntertainment\', \'limousineTaxi\', \'livestock\', \'machinery\', \'machineryMetal\', \'managementRights\', \'manufacturers\', \'manufacturingEngineering\', \'marine\', \'massage\', \'mechanicalRepair\', \'media\', \'medical\', \'medicalPractice\', \'miningEarthMoving\', \'mobileServices\', \'motel\', \'motorcycle\', \'musicRelated\', \'mustering\', \'nails\', \'naturalTherapies\', \'newsagency\', \'nursery\', \'nursingHome\', \'officeSupplies\', \'oilGas\', \'panelBeating\', \'paperPrinting\', \'parkingCarSpace\', \'pestRelated\', \'pharmacies\', \'plastic\', \'plumbing\', \'poolWater\', \'postOffices\', \'printPhoto\', \'professional\', \'propertyRealEstate\', \'rail\', \'recreationSport\', \'recruitment\', \'repair\', \'resort\', \'restaurant\', \'retail\', \'retailer\', \'retirement\', \'retirementVillage\', \'road\', \'rural\', \'scientific\', \'sea\', \'security\', \'serviceStation\', \'services\', \'shearing\', \'sportsComplexGym\', \'supermarket\', \'takeawayFood\', \'taxi\', \'themePark\', \'tours\', \'training\', \'transportDistribution\', \'travel\', \'truck\', \'vending\', \'water\', \'welding\', \'wholesale\', \'wholesalers\', \'woolClassing\', \'wreckers\', \'alcoholGrocery\', \'cafeRestaurants\', \'discountStore\', \'ecoFriendly\', \'green\', \'grocery\', \'specialityRetail\', \'storage\', \'travelAgency\', \'varietyStore\', \'chickenShop\', \'seafoodShop\', \'deliCafe\', \'cropping\', \'viticulture\', \'grazing\', \'horticulture\', \'equine\', \'farmlet\', \'orchard\', \'ruralLifestyle\', \'onlineBusiness\'].
     * @type {Array<string>}
     * @memberof ListingAdminV2BusinessOffMarketProperty
     */
    'propertyType': Array<ListingAdminV2BusinessOffMarketPropertyPropertyTypeEnum>;
    /**
     * 
     * @type {ListingAdminV2Parking}
     * @memberof ListingAdminV2BusinessOffMarketProperty
     */
    'parking'?: ListingAdminV2Parking;
    /**
     * List of image files, photos or floor plans related to the listing.  Supported image file formats: AVIF, BMP, GIF, HEIF/HEIC, JPEG, JPEG 2000, PNG, TIFF, WebP.  The file size is restricted to maximum 100MB.  We recommend against using transparent backgrounds.  Some image formats, such as PNG, support transparency, but when images with transparent areas are resized, they may be converted to a format that doesn’t support transparency, such as JPEG.  By default, transparent areas are converted to black, but the application displaying the image may convert the transparent area to the most appropriate colour for the area where the image is being placed.
     * @type {Array<ListingAdminV2PropertyMedia>}
     * @memberof ListingAdminV2BusinessOffMarketProperty
     */
    'images'?: Array<ListingAdminV2PropertyMedia>;
    /**
     * 
     * @type {ListingAdminV2Address}
     * @memberof ListingAdminV2BusinessOffMarketProperty
     */
    'address': ListingAdminV2Address;
    /**
     * 
     * @type {ListingAdminV2Area}
     * @memberof ListingAdminV2BusinessOffMarketProperty
     */
    'area'?: ListingAdminV2Area;
    /**
     * 
     * @type {ListingAdminV2LandArea}
     * @memberof ListingAdminV2BusinessOffMarketProperty
     */
    'landArea'?: ListingAdminV2LandArea;
}

export const ListingAdminV2BusinessOffMarketPropertyPropertyTypeEnum = {
    AccessoriesParts: 'accessoriesParts',
    AccommodationTourism: 'accommodationTourism',
    Accounting: 'accounting',
    Adult: 'adult',
    AdvertisingMarketing: 'advertisingMarketing',
    Aerial: 'aerial',
    Aeronautical: 'aeronautical',
    AgedCare: 'agedCare',
    Agricultural: 'agricultural',
    Air: 'air',
    Aircraft: 'aircraft',
    Alarms: 'alarms',
    AlcoholLiquor: 'alcoholLiquor',
    Amusements: 'amusements',
    AnimalRelated: 'animalRelated',
    Aquaculture: 'aquaculture',
    AquaticMarineMarinaBerth: 'aquaticMarineMarinaBerth',
    ArtsCrafts: 'artsCrafts',
    AutoElectrical: 'autoElectrical',
    Automotive: 'automotive',
    BackpackerHostel: 'backpackerHostel',
    Bakery: 'bakery',
    BarsNightclubs: 'barsNightclubs',
    BeautyHealth: 'beautyHealth',
    BeautyProducts: 'beautyProducts',
    BeautySalon: 'beautySalon',
    BikeAndMotorcycle: 'bikeAndMotorcycle',
    BoardingKennels: 'boardingKennels',
    BoatsMarineMarinaBerth: 'boatsMarineMarinaBerth',
    Bookkeeping: 'bookkeeping',
    Brokerage: 'brokerage',
    Builder: 'builder',
    BuildingAndConstruction: 'buildingAndConstruction',
    Bus: 'bus',
    Butcher: 'butcher',
    CafeCoffeeShop: 'cafeCoffeeShop',
    Car: 'car',
    CarBusTruck: 'carBusTruck',
    CarDealership: 'carDealership',
    CarRental: 'carRental',
    CarWash: 'carWash',
    CaravanPark: 'caravanPark',
    Carpenter: 'carpenter',
    Catering: 'catering',
    ChildCare: 'childCare',
    Civil: 'civil',
    Cleaning: 'cleaning',
    CleaningAndMaintenance: 'cleaningAndMaintenance',
    ClinicalPractice: 'clinicalPractice',
    ClothingAccessories: 'clothingAccessories',
    ClothingFootwear: 'clothingFootwear',
    Communication: 'communication',
    Communications: 'communications',
    ComputerIt: 'computerIT',
    ComputerAndInternet: 'computerAndInternet',
    Construction: 'construction',
    ConvenienceStore: 'convenienceStore',
    CopyLaminate: 'copyLaminate',
    Courier: 'courier',
    CropHarvesting: 'cropHarvesting',
    Customs: 'customs',
    DairyFarming: 'dairyFarming',
    Deli: 'deli',
    Dental: 'dental',
    Detailing: 'detailing',
    Distributors: 'distributors',
    DrivingSchools: 'drivingSchools',
    EducationTraining: 'educationTraining',
    Educational: 'educational',
    Electrical: 'electrical',
    EmploymentRecruitment: 'employmentRecruitment',
    Entertainment: 'entertainment',
    EntertainmentTechnology: 'entertainmentTechnology',
    Export: 'export',
    Farming: 'farming',
    Fertiliser: 'fertiliser',
    Finance: 'finance',
    FinancialServices: 'financialServices',
    FishingForestry: 'fishingForestry',
    FloristNursery: 'floristNursery',
    FoodBeverage: 'foodBeverage',
    FoodBeverageHospitality: 'foodBeverageHospitality',
    FranchiseBusinessOpportunities: 'franchiseBusinessOpportunities',
    Freight: 'freight',
    FruitVegFreshProduce: 'fruitVegFreshProduce',
    FruitPicking: 'fruitPicking',
    FunctionCentre: 'functionCentre',
    FurnitureTimber: 'furnitureTimber',
    Gambling: 'gambling',
    GardenHousehold: 'gardenHousehold',
    GardenNurseries: 'gardenNurseries',
    Gardening: 'gardening',
    GlassCeramic: 'glassCeramic',
    GuestHouseBb: 'guestHouseBB',
    Hairdresser: 'hairdresser',
    HealthBeauty: 'healthBeauty',
    HealthSpa: 'healthSpa',
    Hire: 'hire',
    HomeGarden: 'homeGarden',
    HomeBased: 'homeBased',
    HomewareHardware: 'homewareHardware',
    Hospital: 'hospital',
    Hotel: 'hotel',
    HuntingTrap: 'huntingTrap',
    Import: 'import',
    ImportExportWholesale: 'importExportWholesale',
    IndustrialManufacturing: 'industrialManufacturing',
    Insemination: 'insemination',
    Insurance: 'insurance',
    Internet: 'internet',
    IrrigationServices: 'irrigationServices',
    JuiceBar: 'juiceBar',
    LandClearing: 'landClearing',
    Landscaping: 'landscaping',
    LaundryDryCleaning: 'laundryDryCleaning',
    Legal: 'legal',
    LeisureEntertainment: 'leisureEntertainment',
    LimousineTaxi: 'limousineTaxi',
    Livestock: 'livestock',
    Machinery: 'machinery',
    MachineryMetal: 'machineryMetal',
    ManagementRights: 'managementRights',
    Manufacturers: 'manufacturers',
    ManufacturingEngineering: 'manufacturingEngineering',
    Marine: 'marine',
    Massage: 'massage',
    MechanicalRepair: 'mechanicalRepair',
    Media: 'media',
    Medical: 'medical',
    MedicalPractice: 'medicalPractice',
    MiningEarthMoving: 'miningEarthMoving',
    MobileServices: 'mobileServices',
    Motel: 'motel',
    Motorcycle: 'motorcycle',
    MusicRelated: 'musicRelated',
    Mustering: 'mustering',
    Nails: 'nails',
    NaturalTherapies: 'naturalTherapies',
    Newsagency: 'newsagency',
    Nursery: 'nursery',
    NursingHome: 'nursingHome',
    OfficeSupplies: 'officeSupplies',
    OilGas: 'oilGas',
    PanelBeating: 'panelBeating',
    PaperPrinting: 'paperPrinting',
    ParkingCarSpace: 'parkingCarSpace',
    PestRelated: 'pestRelated',
    Pharmacies: 'pharmacies',
    Plastic: 'plastic',
    Plumbing: 'plumbing',
    PoolWater: 'poolWater',
    PostOffices: 'postOffices',
    PrintPhoto: 'printPhoto',
    Professional: 'professional',
    PropertyRealEstate: 'propertyRealEstate',
    Rail: 'rail',
    RecreationSport: 'recreationSport',
    Recruitment: 'recruitment',
    Repair: 'repair',
    Resort: 'resort',
    Restaurant: 'restaurant',
    Retail: 'retail',
    Retailer: 'retailer',
    Retirement: 'retirement',
    RetirementVillage: 'retirementVillage',
    Road: 'road',
    Rural: 'rural',
    Scientific: 'scientific',
    Sea: 'sea',
    Security: 'security',
    ServiceStation: 'serviceStation',
    Services: 'services',
    Shearing: 'shearing',
    SportsComplexGym: 'sportsComplexGym',
    Supermarket: 'supermarket',
    TakeawayFood: 'takeawayFood',
    Taxi: 'taxi',
    ThemePark: 'themePark',
    Tours: 'tours',
    Training: 'training',
    TransportDistribution: 'transportDistribution',
    Travel: 'travel',
    Truck: 'truck',
    Vending: 'vending',
    Water: 'water',
    Welding: 'welding',
    Wholesale: 'wholesale',
    Wholesalers: 'wholesalers',
    WoolClassing: 'woolClassing',
    Wreckers: 'wreckers',
    AlcoholGrocery: 'alcoholGrocery',
    CafeRestaurants: 'cafeRestaurants',
    DiscountStore: 'discountStore',
    EcoFriendly: 'ecoFriendly',
    Green: 'green',
    Grocery: 'grocery',
    SpecialityRetail: 'specialityRetail',
    Storage: 'storage',
    TravelAgency: 'travelAgency',
    VarietyStore: 'varietyStore',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
} as const;

export type ListingAdminV2BusinessOffMarketPropertyPropertyTypeEnum = typeof ListingAdminV2BusinessOffMarketPropertyPropertyTypeEnum[keyof typeof ListingAdminV2BusinessOffMarketPropertyPropertyTypeEnum];

/**
 * Commercial Auction Details
 * @export
 * @interface ListingAdminV2CommercialAuction
 */
export interface ListingAdminV2CommercialAuction {
    /**
     * Terms for the auctions, up to 200 characters. Example: \"10% deposit, balance 60 days\"
     * @type {string}
     * @memberof ListingAdminV2CommercialAuction
     */
    'auctionTerms'?: string;
    /**
     * Date of the auction. format: yyyy-MM-ddTHH:mm:ss
     * @type {string}
     * @memberof ListingAdminV2CommercialAuction
     */
    'dateTime': string;
    /**
     * Optional. Venue for the Auction. String max 100 characters. If the Location is omitted, or included but empty, the Venue will default to \"On Site\".
     * @type {string}
     * @memberof ListingAdminV2CommercialAuction
     */
    'location'?: string;
    /**
     * Optional on-line auction URL. Must be a valid URL and maximum 255 characters. If an empty string is received, the property will be re-set.
     * @type {string}
     * @memberof ListingAdminV2CommercialAuction
     */
    'url'?: string;
}
/**
 * Commercial Listing V2
 * @export
 * @interface ListingAdminV2CommercialListingV2
 */
export interface ListingAdminV2CommercialListingV2 {
    /**
     * 
     * @type {ListingAdminV2CommercialPrice}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'salePrice'?: ListingAdminV2CommercialPrice;
    /**
     * 
     * @type {ListingAdminV2CommercialPrice}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'leasePrice'?: ListingAdminV2CommercialPrice;
    /**
     * 
     * @type {ListingAdminV2Lease}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'lease'?: ListingAdminV2Lease;
    /**
     * 
     * @type {ListingAdminV2EOI}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'eoi'?: ListingAdminV2EOI;
    /**
     * 
     * @type {ListingAdminV2Tenant}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'tenant'?: ListingAdminV2Tenant;
    /**
     * 
     * @type {ListingAdminV2Tender}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'tender'?: ListingAdminV2Tender;
    /**
     * Occupancy. Can be \'Tenanted\', \'Vacant\'
     * @type {string}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'occupancyType'?: ListingAdminV2CommercialListingV2OccupancyTypeEnum;
    /**
     * Integer value of percentage return on this property or business.
     * @type {number}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'annualReturn'?: number;
    /**
     * Integer value of units offered for sale or lease
     * @type {number}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'unitsOffered'?: number;
    /**
     * Units details
     * @type {Array<ListingAdminV2SpecificUnitDetail>}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'unitDetails'?: Array<ListingAdminV2SpecificUnitDetail>;
    /**
     * The NABERS Rating is the energy efficiency rating that the property has been measured to have.   This rating is measured in increments of .5 and can range from 0 to 6.   The NABERS rating is required for spaces within office buildings of 1000 square metres or more.  For more information on the NABERS rating system please visit http://www.nabers.gov.au
     * @type {number}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'nabers'?: number;
    /**
     * Information relating to aspects of the sale, such as required deposit, settlement time. Up to 50 characters, optional. Ignored for lease listings
     * @type {string}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'saleTerms'?: string;
    /**
     * 
     * @type {ListingAdminV2CommercialAuction}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'auction'?: ListingAdminV2CommercialAuction;
    /**
     * 
     * @type {ListingAdminV2CommercialProperty}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'propertyDetails': ListingAdminV2CommercialProperty;
    /**
     * List of conjunction agents
     * @type {Array<ListingAdminV2AgentContact>}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'conjunctionAgents'?: Array<ListingAdminV2AgentContact>;
    /**
     * Highlight Items
     * @type {Array<string>}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'highlights'?: Array<string>;
    /**
     * Set for Sale listings only
     * @type {boolean}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'underOfferOrContract'?: boolean;
    /**
     * Domain Advertisement Id, not applicable for creating new ads.  Mandatory when updating a listing that belongs to an agency that  is in the process of being migrated between listing providers.
     * @type {number}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'domainAdId'?: number;
    /**
     * A string identifying the data provider
     * @type {string}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'listingProvider'?: string;
    /**
     * The Domain Agency Id number
     * @type {number}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'domainAgencyID': number;
    /**
     * External Advertisement Id of up to 50 characters will be stored.<br />  This value is used to identify an Advertisement for updates and should be unique for listing provider.<br />  This value is case-insensitive (meaning AAAA will update aaaa).
     * @type {string}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'providerAdId': string;
    /**
     *  Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.  INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.  OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.  LOCATION: Ground floor, Water Views, North Facing, City Views.  ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels
     * @type {string}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'features'?: string;
    /**
     * Description of the property.  6000 characters in length. The following HTML elements are permitted: &lt;br /&gt;, &lt;p&gt;&lt;/p&gt;, &amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade.  Unicode characters which are unsupported by Latin-1 (ISO-8859-1 range from U+0080 to U+00FF), will be removed https://en.wikipedia.org/wiki/ISO/IEC_8859-1
     * @type {string}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'description'?: string;
    /**
     * \'Headline\' Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.
     * @type {string}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'summary'?: string;
    /**
     * 
     * @type {ListingAdminV2InspectionDetails}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'inspectionDetails'?: ListingAdminV2InspectionDetails;
    /**
     * Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters.
     * @type {Array<ListingAdminV2PropertyMedia>}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'media'?: Array<ListingAdminV2PropertyMedia>;
    /**
     * Sale or Rent
     * @type {string}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'listingAction': ListingAdminV2CommercialListingV2ListingActionEnum;
    /**
     * Indicates the listing preferred contact method. Default by both phone and email if not provided.
     * @type {string}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'contactPreference'?: ListingAdminV2CommercialListingV2ContactPreferenceEnum;
    /**
     * Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.
     * @type {Array<ListingAdminV2Contact>}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'contacts'?: Array<ListingAdminV2Contact>;
    /**
     * Sets an additional Email Address to which enquiries on the Listing will be sent
     * @type {string}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'otherEnquiryEmail'?: string;
    /**
     * Send email enquiries to the default address for this listing type
     * @type {boolean}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'receiveEmailsToDefaultAddress'?: boolean;
    /**
     * True if the property is rural
     * @type {boolean}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'isRural'?: boolean;
    /**
     * Rural attributes    *Improvements* (optional)    Available `types` (fixed list, optional):  * Machinery Shed  * Shearing Shed  * Workshop  * Shearers Quarters  * Silos  * Other Housing  * Managers Accommodation    *Fencing* (optional)    `description` (string, optional): free text fencing description, maximum 250 characters.    *Yards* (optional)    Available `types` (fixed list, optional):  * Sheep  * Cattle    *Homestead* (optional)    `description` (string, optional): description of the homestead and construction, maximum 250 characters.    `metadata` (optional)  * `area` (decimal, optional): homestead area in square metres.    Available `types` (fixed list, optional):  * Office  * Ensuite  * Tennis Court  * Mains Gas  * Floorboards  * Internal Laundry    *Water* (optional)    `description` (string, optional): water comments, maximum 250 characters.    Available `types` (fixed list, optional):  * Tank  * Well  * Reticulated  * Bores  * Springs  * Creeks  * Dams  * River    *Crops* (optional)    `description` (string, optional): description of the crops, maximum 250 characters.    `metadata` (optional)  * `croppedAnnually` (decimal, optional): average annual area cropped in hectares.  * `fallowAnnually` (decimal, optional): average annual fallow area in hectares.  * `pastures` (string, optional): description of pastures available, maximum 250 characters.    *Livestock* (optional)    `description` (string, optional): additional comments, maximum 250 characters.    `metadata` (optional)  * `capacity` (decimal, optional): property carrying capacity in DSE (unit of carry capacity).    Available `types` (fixed list, optional):  * Sheep  * Pigs  * Cattle  * Poultry  * Horses  * Exotic  * Goats  * Stud    *Inclusions* (optional)    `description` (string, optional): description of plant and machinery included in sale, maximum 250 characters.    `metadata` (optional)  * `livestock` (string, optional): description of livestock included in sale, maximum 250 characters.  * `crop` (string, optional): description of crops included in sale, maximum 250 characters.    *Irrigation* (optional)    `description` (string, optional): irrigation comments, maximum 250 characters    `metadata` (optional)  * `rainfall` (decimal, optional): annual rainfall in millimetres.
     * @type {Array<ListingAdminV2ListingSupplementary>}
     * @memberof ListingAdminV2CommercialListingV2
     */
    'supplementary'?: Array<ListingAdminV2ListingSupplementary>;
}

export const ListingAdminV2CommercialListingV2OccupancyTypeEnum = {
    Tenanted: 'tenanted',
    Vacant: 'vacant'
} as const;

export type ListingAdminV2CommercialListingV2OccupancyTypeEnum = typeof ListingAdminV2CommercialListingV2OccupancyTypeEnum[keyof typeof ListingAdminV2CommercialListingV2OccupancyTypeEnum];
export const ListingAdminV2CommercialListingV2ListingActionEnum = {
    Sale: 'sale',
    Rent: 'rent',
    SaleAndLease: 'saleAndLease'
} as const;

export type ListingAdminV2CommercialListingV2ListingActionEnum = typeof ListingAdminV2CommercialListingV2ListingActionEnum[keyof typeof ListingAdminV2CommercialListingV2ListingActionEnum];
export const ListingAdminV2CommercialListingV2ContactPreferenceEnum = {
    ByPhone: 'byPhone'
} as const;

export type ListingAdminV2CommercialListingV2ContactPreferenceEnum = typeof ListingAdminV2CommercialListingV2ContactPreferenceEnum[keyof typeof ListingAdminV2CommercialListingV2ContactPreferenceEnum];

/**
 * Commercial off market listing
 * @export
 * @interface ListingAdminV2CommercialOffMarketListing
 */
export interface ListingAdminV2CommercialOffMarketListing {
    /**
     * Integer value of units offered for sale or lease
     * @type {number}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'unitsOffered'?: number;
    /**
     * Units details
     * @type {Array<ListingAdminV2SpecificUnitDetail>}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'unitDetails'?: Array<ListingAdminV2SpecificUnitDetail>;
    /**
     * Integer value of percentage return on this property or business.
     * @type {number}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'annualReturn'?: number;
    /**
     * The NABERS Rating is the energy efficiency rating that the property has been measured to have.   This rating is measured in increments of .5 and can range from 0 to 6.   The NABERS rating is required for spaces within office buildings of 1000 square metres or more.  For more information on the NABERS rating system please visit http://www.nabers.gov.au
     * @type {number}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'nabers'?: number;
    /**
     * Highlight Items
     * @type {Array<string>}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'highlights'?: Array<string>;
    /**
     * A string identifying the data provider
     * @type {string}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'listingProvider'?: string;
    /**
     * The Domain Agency ID
     * @type {number}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'domainAgencyID': number;
    /**
     * External Advertisement Id of up to 50 characters will be stored.<br />  This value is used to identify an Advertisement for updates and should be unique for listing provider.<br />  This value is case-insensitive (meaning AAAA will update aaaa).
     * @type {string}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'providerAdId': string;
    /**
     * Description of the property.  6000 characters in length. The following HTML elements are permitted: &lt;br /&gt;, &lt;p&gt;&lt;/p&gt;, &amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade.  Unicode characters which are unsupported by Latin-1 (ISO-8859-1 range from U+0080 to U+00FF), will be removed https://en.wikipedia.org/wiki/ISO/IEC_8859-1
     * @type {string}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'description'?: string;
    /**
     * \'Headline\' Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.
     * @type {string}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'summary'?: string;
    /**
     * Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.
     * @type {Array<ListingAdminV2Contact>}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'contacts'?: Array<ListingAdminV2Contact>;
    /**
     * Sale or Rent
     * @type {string}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'listingAction': ListingAdminV2CommercialOffMarketListingListingActionEnum;
    /**
     * 
     * @type {ListingAdminV2OffMarketDetailsBase}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'offMarketDetails': ListingAdminV2OffMarketDetailsBase;
    /**
     * 
     * @type {ListingAdminV2CommercialOffMarketProperty}
     * @memberof ListingAdminV2CommercialOffMarketListing
     */
    'propertyDetails': ListingAdminV2CommercialOffMarketProperty;
}

export const ListingAdminV2CommercialOffMarketListingListingActionEnum = {
    Sale: 'sale',
    Rent: 'rent'
} as const;

export type ListingAdminV2CommercialOffMarketListingListingActionEnum = typeof ListingAdminV2CommercialOffMarketListingListingActionEnum[keyof typeof ListingAdminV2CommercialOffMarketListingListingActionEnum];

/**
 * Commercial off market property
 * @export
 * @interface ListingAdminV2CommercialOffMarketProperty
 */
export interface ListingAdminV2CommercialOffMarketProperty {
    /**
     * Commercial property types [\'aquaculture\', \'dairyFarming\', \'developmentLand\', \'fishingForestry\', \'hotelLeisure\', \'industrialWarehouse\', \'irrigationServices\', \'livestock\', \'internationalCommercial\', \'medicalConsulting\', \'offices\', \'parkingCarSpace\', \'retail\', \'ruralCommercialFarming\', \'showroomsBulkyGoods\', \'servicedOffices\', \'other\', \'cropping\', \'viticulture\', \'mixedFarming\', \'grazing\', \'horticulture\', \'equine\', \'farmlet\', \'orchard\', \'ruralLifestyle\'].
     * @type {Array<string>}
     * @memberof ListingAdminV2CommercialOffMarketProperty
     */
    'propertyType': Array<ListingAdminV2CommercialOffMarketPropertyPropertyTypeEnum>;
    /**
     * Building Type
     * @type {string}
     * @memberof ListingAdminV2CommercialOffMarketProperty
     */
    'buildingType'?: ListingAdminV2CommercialOffMarketPropertyBuildingTypeEnum;
    /**
     * 
     * @type {ListingAdminV2Parking}
     * @memberof ListingAdminV2CommercialOffMarketProperty
     */
    'parking'?: ListingAdminV2Parking;
    /**
     * List of image files, photos or floor plans related to the listing.  Supported image file formats: AVIF, BMP, GIF, HEIF/HEIC, JPEG, JPEG 2000, PNG, TIFF, WebP.  The file size is restricted to maximum 100MB.  We recommend against using transparent backgrounds.  Some image formats, such as PNG, support transparency, but when images with transparent areas are resized, they may be converted to a format that doesn’t support transparency, such as JPEG.  By default, transparent areas are converted to black, but the application displaying the image may convert the transparent area to the most appropriate colour for the area where the image is being placed.
     * @type {Array<ListingAdminV2PropertyMedia>}
     * @memberof ListingAdminV2CommercialOffMarketProperty
     */
    'images'?: Array<ListingAdminV2PropertyMedia>;
    /**
     * 
     * @type {ListingAdminV2Address}
     * @memberof ListingAdminV2CommercialOffMarketProperty
     */
    'address': ListingAdminV2Address;
    /**
     * 
     * @type {ListingAdminV2Area}
     * @memberof ListingAdminV2CommercialOffMarketProperty
     */
    'area'?: ListingAdminV2Area;
    /**
     * 
     * @type {ListingAdminV2LandArea}
     * @memberof ListingAdminV2CommercialOffMarketProperty
     */
    'landArea'?: ListingAdminV2LandArea;
}

export const ListingAdminV2CommercialOffMarketPropertyPropertyTypeEnum = {
    Aquaculture: 'aquaculture',
    DairyFarming: 'dairyFarming',
    DevelopmentLand: 'developmentLand',
    FishingForestry: 'fishingForestry',
    HotelLeisure: 'hotelLeisure',
    IndustrialWarehouse: 'industrialWarehouse',
    IrrigationServices: 'irrigationServices',
    Livestock: 'livestock',
    InternationalCommercial: 'internationalCommercial',
    MedicalConsulting: 'medicalConsulting',
    Offices: 'offices',
    ParkingCarSpace: 'parkingCarSpace',
    Retail: 'retail',
    RuralCommercialFarming: 'ruralCommercialFarming',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle'
} as const;

export type ListingAdminV2CommercialOffMarketPropertyPropertyTypeEnum = typeof ListingAdminV2CommercialOffMarketPropertyPropertyTypeEnum[keyof typeof ListingAdminV2CommercialOffMarketPropertyPropertyTypeEnum];
export const ListingAdminV2CommercialOffMarketPropertyBuildingTypeEnum = {
    Whole: 'whole',
    Part: 'part',
    NA: 'nA'
} as const;

export type ListingAdminV2CommercialOffMarketPropertyBuildingTypeEnum = typeof ListingAdminV2CommercialOffMarketPropertyBuildingTypeEnum[keyof typeof ListingAdminV2CommercialOffMarketPropertyBuildingTypeEnum];

/**
 * Commercial component for price
 * @export
 * @interface ListingAdminV2CommercialPrice
 */
export interface ListingAdminV2CommercialPrice {
    /**
     * Price Unit type. Can have the values \"TotalAmount\", \"PerSqm\". Default = \"TotalAmount\"
     * @type {string}
     * @memberof ListingAdminV2CommercialPrice
     */
    'priceUnitType'?: ListingAdminV2CommercialPricePriceUnitTypeEnum;
    /**
     * Type can have the values \"Gross\", \"Net\". Default \"Net\"
     * @type {string}
     * @memberof ListingAdminV2CommercialPrice
     */
    'priceType'?: ListingAdminV2CommercialPricePriceTypeEnum;
    /**
     * GST Option Type. Can have the values \"NA\", \"Inc\", \"Ex\". Default = \"NA\"
     * @type {string}
     * @memberof ListingAdminV2CommercialPrice
     */
    'gstOptionType'?: ListingAdminV2CommercialPriceGstOptionTypeEnum;
    /**
     * Indicates if this property is under price reduction
     * @type {boolean}
     * @memberof ListingAdminV2CommercialPrice
     */
    'priceReduction'?: boolean;
    /**
     * When provided this will be shown instead of the price range, e.g.: \"Offers over $450K considered\"
     * @type {string}
     * @memberof ListingAdminV2CommercialPrice
     */
    'displayText'?: string;
    /**
     * Lowest price the property is expected to sell/rent for to set search price. For a fixed price, set this value the same as To
     * @type {number}
     * @memberof ListingAdminV2CommercialPrice
     */
    'from': number;
    /**
     * Highest price the property is expected to sell/rent for to set search price.   For a fixed price, set this value the same as From
     * @type {number}
     * @memberof ListingAdminV2CommercialPrice
     */
    'to': number;
}

export const ListingAdminV2CommercialPricePriceUnitTypeEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
} as const;

export type ListingAdminV2CommercialPricePriceUnitTypeEnum = typeof ListingAdminV2CommercialPricePriceUnitTypeEnum[keyof typeof ListingAdminV2CommercialPricePriceUnitTypeEnum];
export const ListingAdminV2CommercialPricePriceTypeEnum = {
    Gross: 'gross',
    Net: 'net'
} as const;

export type ListingAdminV2CommercialPricePriceTypeEnum = typeof ListingAdminV2CommercialPricePriceTypeEnum[keyof typeof ListingAdminV2CommercialPricePriceTypeEnum];
export const ListingAdminV2CommercialPriceGstOptionTypeEnum = {
    NA: 'nA',
    Inc: 'inc',
    Ex: 'ex'
} as const;

export type ListingAdminV2CommercialPriceGstOptionTypeEnum = typeof ListingAdminV2CommercialPriceGstOptionTypeEnum[keyof typeof ListingAdminV2CommercialPriceGstOptionTypeEnum];

/**
 * Commercial Property
 * @export
 * @interface ListingAdminV2CommercialProperty
 */
export interface ListingAdminV2CommercialProperty {
    /**
     * Commercial property types [\'aquaculture\', \'dairyFarming\', \'developmentLand\', \'fishingForestry\', \'hotelLeisure\', \'industrialWarehouse\', \'irrigationServices\', \'livestock\', \'internationalCommercial\', \'medicalConsulting\', \'offices\', \'parkingCarSpace\', \'retail\', \'ruralCommercialFarming\', \'showroomsBulkyGoods\', \'servicedOffices\', \'other\', \'cropping\', \'viticulture\', \'mixedFarming\', \'grazing\', \'horticulture\', \'equine\', \'farmlet\', \'orchard\', \'ruralLifestyle\'].
     * @type {Array<string>}
     * @memberof ListingAdminV2CommercialProperty
     */
    'propertyType': Array<ListingAdminV2CommercialPropertyPropertyTypeEnum>;
    /**
     * Building Type
     * @type {string}
     * @memberof ListingAdminV2CommercialProperty
     */
    'buildingType'?: ListingAdminV2CommercialPropertyBuildingTypeEnum;
    /**
     * 
     * @type {ListingAdminV2Parking}
     * @memberof ListingAdminV2CommercialProperty
     */
    'parking'?: ListingAdminV2Parking;
    /**
     * List of PDF files related to the listing
     * @type {Array<ListingAdminV2PropertyPdf>}
     * @memberof ListingAdminV2CommercialProperty
     */
    'pdfs'?: Array<ListingAdminV2PropertyPdf>;
    /**
     * Name of the property up to 70 characters
     * @type {string}
     * @memberof ListingAdminV2CommercialProperty
     */
    'propertyName'?: string;
    /**
     * Short location information up to 30 character, e.g.: Greenhills Beach
     * @type {string}
     * @memberof ListingAdminV2CommercialProperty
     */
    'location'?: string;
    /**
     * List of image files, photos or floor plans related to the listing.  Supported image file formats: AVIF, BMP, GIF, HEIF/HEIC, JPEG, JPEG 2000, PNG, TIFF, WebP.  The file size is restricted to maximum 100MB.  We recommend against using transparent backgrounds.  Some image formats, such as PNG, support transparency, but when images with transparent areas are resized, they may be converted to a format that doesn’t support transparency, such as JPEG.  By default, transparent areas are converted to black, but the application displaying the image may convert the transparent area to the most appropriate colour for the area where the image is being placed.
     * @type {Array<ListingAdminV2PropertyMedia>}
     * @memberof ListingAdminV2CommercialProperty
     */
    'images'?: Array<ListingAdminV2PropertyMedia>;
    /**
     * 
     * @type {ListingAdminV2Address}
     * @memberof ListingAdminV2CommercialProperty
     */
    'address': ListingAdminV2Address;
    /**
     * 
     * @type {ListingAdminV2Area}
     * @memberof ListingAdminV2CommercialProperty
     */
    'area'?: ListingAdminV2Area;
    /**
     * 
     * @type {ListingAdminV2LandArea}
     * @memberof ListingAdminV2CommercialProperty
     */
    'landArea'?: ListingAdminV2LandArea;
}

export const ListingAdminV2CommercialPropertyPropertyTypeEnum = {
    Aquaculture: 'aquaculture',
    DairyFarming: 'dairyFarming',
    DevelopmentLand: 'developmentLand',
    FishingForestry: 'fishingForestry',
    HotelLeisure: 'hotelLeisure',
    IndustrialWarehouse: 'industrialWarehouse',
    IrrigationServices: 'irrigationServices',
    Livestock: 'livestock',
    InternationalCommercial: 'internationalCommercial',
    MedicalConsulting: 'medicalConsulting',
    Offices: 'offices',
    ParkingCarSpace: 'parkingCarSpace',
    Retail: 'retail',
    RuralCommercialFarming: 'ruralCommercialFarming',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle'
} as const;

export type ListingAdminV2CommercialPropertyPropertyTypeEnum = typeof ListingAdminV2CommercialPropertyPropertyTypeEnum[keyof typeof ListingAdminV2CommercialPropertyPropertyTypeEnum];
export const ListingAdminV2CommercialPropertyBuildingTypeEnum = {
    Whole: 'whole',
    Part: 'part',
    NA: 'nA'
} as const;

export type ListingAdminV2CommercialPropertyBuildingTypeEnum = typeof ListingAdminV2CommercialPropertyBuildingTypeEnum[keyof typeof ListingAdminV2CommercialPropertyBuildingTypeEnum];

/**
 * Contact domain model
 * @export
 * @interface ListingAdminV2Contact
 */
export interface ListingAdminV2Contact {
    /**
     * Domain ID of the contact person at the agency
     * @type {number}
     * @memberof ListingAdminV2Contact
     */
    'domainAgentId'?: number;
    /**
     * First name. Maximum 50 characters.
     * @type {string}
     * @memberof ListingAdminV2Contact
     */
    'firstName'?: string;
    /**
     * Last name. Maximum 50 characters.
     * @type {string}
     * @memberof ListingAdminV2Contact
     */
    'lastName'?: string;
    /**
     * Phone. Maximum 20 characters.
     * @type {string}
     * @memberof ListingAdminV2Contact
     */
    'phone'?: string;
    /**
     * Fax. Maximum 20 characters.
     * @type {string}
     * @memberof ListingAdminV2Contact
     */
    'fax'?: string;
    /**
     * Mobile. Maximum 20 characters.
     * @type {string}
     * @memberof ListingAdminV2Contact
     */
    'mobile'?: string;
    /**
     * Email. Maximum 100 characters.
     * @type {string}
     * @memberof ListingAdminV2Contact
     */
    'email'?: string;
    /**
     * Indicates whether the contact person should receive emails for the listing
     * @type {boolean}
     * @memberof ListingAdminV2Contact
     */
    'receiveEmails'?: boolean;
}
/**
 * Express of Interest
 * @export
 * @interface ListingAdminV2EOI
 */
export interface ListingAdminV2EOI {
    /**
     * Street address, up to 100 characters
     * @type {string}
     * @memberof ListingAdminV2EOI
     */
    'address'?: string;
    /**
     * End date of EOI
     * @type {string}
     * @memberof ListingAdminV2EOI
     */
    'endDate': string;
    /**
     * The recipient name of the EOI, up to 50 characters
     * @type {string}
     * @memberof ListingAdminV2EOI
     */
    'recipientName'?: string;
}
/**
 * Contains geocoding of an address
 * @export
 * @interface ListingAdminV2GeoLocation
 */
export interface ListingAdminV2GeoLocation {
    /**
     * Latitude
     * @type {number}
     * @memberof ListingAdminV2GeoLocation
     */
    'latitude'?: number;
    /**
     * Longitude
     * @type {number}
     * @memberof ListingAdminV2GeoLocation
     */
    'longitude'?: number;
}
/**
 * Inspection times
 * @export
 * @interface ListingAdminV2Inspection
 */
export interface ListingAdminV2Inspection {
    /**
     * Format: yyyy-mm-dd HH:mm:ss eg: 2015-10-20 13:30:00
     * @type {string}
     * @memberof ListingAdminV2Inspection
     */
    'from': string;
    /**
     * Format: yyyy-mm-dd HH:mm:ss, eg: 2015-10-20 14:30:00
     * @type {string}
     * @memberof ListingAdminV2Inspection
     */
    'to': string;
    /**
     * Specifies if the inspection is recurring weekly
     * @type {boolean}
     * @memberof ListingAdminV2Inspection
     */
    'repeat'?: boolean;
}
/**
 * Inspection details
 * @export
 * @interface ListingAdminV2InspectionDetails
 */
export interface ListingAdminV2InspectionDetails {
    /**
     * Free text field for inspections
     * @type {string}
     * @memberof ListingAdminV2InspectionDetails
     */
    'inspectionDescription'?: string;
    /**
     * Inspection times of the listing
     * @type {Array<ListingAdminV2Inspection>}
     * @memberof ListingAdminV2InspectionDetails
     */
    'inspections'?: Array<ListingAdminV2Inspection>;
}
/**
 * Area information, Either single value or from and To must be provided
 * @export
 * @interface ListingAdminV2LandArea
 */
export interface ListingAdminV2LandArea {
    /**
     * Unit of measure
     * @type {string}
     * @memberof ListingAdminV2LandArea
     */
    'unit': ListingAdminV2LandAreaUnitEnum;
    /**
     * Area. Will be rounded to 2 decimals.
     * @type {number}
     * @memberof ListingAdminV2LandArea
     */
    'value'?: number;
    /**
     * Minimum area
     * @type {number}
     * @memberof ListingAdminV2LandArea
     */
    'from'?: number;
    /**
     * Maximum area
     * @type {number}
     * @memberof ListingAdminV2LandArea
     */
    'to'?: number;
}

export const ListingAdminV2LandAreaUnitEnum = {
    SquareMetres: 'squareMetres',
    Acres: 'acres',
    Hectares: 'hectares',
    SquareFeet: 'squareFeet',
    SquareYards: 'squareYards',
    Squares: 'squares'
} as const;

export type ListingAdminV2LandAreaUnitEnum = typeof ListingAdminV2LandAreaUnitEnum[keyof typeof ListingAdminV2LandAreaUnitEnum];

/**
 * Properties for lease listings
 * @export
 * @interface ListingAdminV2Lease
 */
export interface ListingAdminV2Lease {
    /**
     * Integer value of lease term range from
     * @type {number}
     * @memberof ListingAdminV2Lease
     */
    'termOfLeaseFrom'?: number;
    /**
     * Integer value of lease term range to
     * @type {number}
     * @memberof ListingAdminV2Lease
     */
    'termOfLeaseTo'?: number;
    /**
     * Outgoing cost of current lease
     * @type {number}
     * @memberof ListingAdminV2Lease
     */
    'leaseOutgoings'?: number;
}
/**
 * Leased Details
 * @export
 * @interface ListingAdminV2LeasedDetails
 */
export interface ListingAdminV2LeasedDetails {
    /**
     * Optional. The weekly rental price.
     * @type {number}
     * @memberof ListingAdminV2LeasedDetails
     */
    'leasedPrice'?: number;
    /**
     * The duration of the lease in weeks.
     * @type {number}
     * @memberof ListingAdminV2LeasedDetails
     */
    'leasedDuration'?: number;
}
/**
 * Represent the listing job.
 * @export
 * @interface ListingAdminV2ListingResponse
 */
export interface ListingAdminV2ListingResponse {
    /**
     * The listing job Id.   This job will eventually be processed.
     * @type {string}
     * @memberof ListingAdminV2ListingResponse
     */
    'id'?: string;
    /**
     * Agency Id from Domain.
     * @type {number}
     * @memberof ListingAdminV2ListingResponse
     */
    'agencyId'?: number;
    /**
     * Provider Id for the agency.
     * @type {string}
     * @memberof ListingAdminV2ListingResponse
     */
    'providerId'?: string;
    /**
     * Listing identifier provided by CRM.
     * @type {string}
     * @memberof ListingAdminV2ListingResponse
     */
    'providerAdId'?: string;
    /**
     * Version Id
     * @type {string}
     * @memberof ListingAdminV2ListingResponse
     */
    'versionId'?: string;
    /**
     * Status of listing been processed
     * @type {string}
     * @memberof ListingAdminV2ListingResponse
     */
    'processStatus'?: ListingAdminV2ListingResponseProcessStatusEnum;
}

export const ListingAdminV2ListingResponseProcessStatusEnum = {
    Queued: 'queued',
    Processing: 'processing',
    Processed: 'processed',
    Searchable: 'searchable',
    Failed: 'failed',
    Error: 'error'
} as const;

export type ListingAdminV2ListingResponseProcessStatusEnum = typeof ListingAdminV2ListingResponseProcessStatusEnum[keyof typeof ListingAdminV2ListingResponseProcessStatusEnum];

/**
 * Listing supplementary
 * @export
 * @interface ListingAdminV2ListingSupplementary
 */
export interface ListingAdminV2ListingSupplementary {
    /**
     * Name
     * @type {string}
     * @memberof ListingAdminV2ListingSupplementary
     */
    'name': string;
    /**
     * Description
     * @type {string}
     * @memberof ListingAdminV2ListingSupplementary
     */
    'description'?: string;
    /**
     * Types
     * @type {Array<string>}
     * @memberof ListingAdminV2ListingSupplementary
     */
    'types'?: Array<string>;
    /**
     * Metadata
     * @type {Array<ListingAdminV2SupplementaryMetadata>}
     * @memberof ListingAdminV2ListingSupplementary
     */
    'metadata'?: Array<ListingAdminV2SupplementaryMetadata>;
}
/**
 * Off market details base
 * @export
 * @interface ListingAdminV2OffMarketDetailsBase
 */
export interface ListingAdminV2OffMarketDetailsBase {
    /**
     * Off Market Action
     * @type {string}
     * @memberof ListingAdminV2OffMarketDetailsBase
     */
    'offMarketAction': ListingAdminV2OffMarketDetailsBaseOffMarketActionEnum;
    /**
     * The date property was sold, leased or withdrawn
     * @type {string}
     * @memberof ListingAdminV2OffMarketDetailsBase
     */
    'actionDate': string;
    /**
     * 
     * @type {ListingAdminV2SoldDetails}
     * @memberof ListingAdminV2OffMarketDetailsBase
     */
    'soldDetails'?: ListingAdminV2SoldDetails;
    /**
     * 
     * @type {ListingAdminV2LeasedDetails}
     * @memberof ListingAdminV2OffMarketDetailsBase
     */
    'leasedDetails'?: ListingAdminV2LeasedDetails;
    /**
     * Extra details for off market action
     * @type {string}
     * @memberof ListingAdminV2OffMarketDetailsBase
     */
    'comment'?: string;
}

export const ListingAdminV2OffMarketDetailsBaseOffMarketActionEnum = {
    WithDrawn: 'withDrawn',
    Sold: 'sold',
    Leased: 'leased'
} as const;

export type ListingAdminV2OffMarketDetailsBaseOffMarketActionEnum = typeof ListingAdminV2OffMarketDetailsBaseOffMarketActionEnum[keyof typeof ListingAdminV2OffMarketDetailsBaseOffMarketActionEnum];

/**
 * Parking Details
 * @export
 * @interface ListingAdminV2Parking
 */
export interface ListingAdminV2Parking {
    /**
     * Can have the value \"OnSite\", \"OnStreet\", \"NoParking\". Default \"NoParking\"
     * @type {string}
     * @memberof ListingAdminV2Parking
     */
    'parkingType'?: ListingAdminV2ParkingParkingTypeEnum;
    /**
     * Number On Site
     * @type {number}
     * @memberof ListingAdminV2Parking
     */
    'numberOnSite'?: number;
    /**
     * Additional information regarding the parking condition
     * @type {string}
     * @memberof ListingAdminV2Parking
     */
    'information'?: string;
}

export const ListingAdminV2ParkingParkingTypeEnum = {
    OnSite: 'onSite',
    OnStreet: 'onStreet',
    NoParking: 'noParking'
} as const;

export type ListingAdminV2ParkingParkingTypeEnum = typeof ListingAdminV2ParkingParkingTypeEnum[keyof typeof ListingAdminV2ParkingParkingTypeEnum];

/**
 * Parking Details
 * @export
 * @interface ListingAdminV2ParkingDetails
 */
export interface ListingAdminV2ParkingDetails {
    /**
     * Can have the value \"OnSite\", \"OnStreet\", \"NoParking\". Default: \"NoParking\"
     * @type {string}
     * @memberof ListingAdminV2ParkingDetails
     */
    'parkingType': ListingAdminV2ParkingDetailsParkingTypeEnum;
    /**
     * Number of parking spaces on site
     * @type {number}
     * @memberof ListingAdminV2ParkingDetails
     */
    'numberOfSpaces': number;
}

export const ListingAdminV2ParkingDetailsParkingTypeEnum = {
    OnSite: 'onSite',
    OnStreet: 'onStreet',
    NoParking: 'noParking',
    Garage: 'garage',
    Carport: 'carport',
    Outdoor: 'outdoor'
} as const;

export type ListingAdminV2ParkingDetailsParkingTypeEnum = typeof ListingAdminV2ParkingDetailsParkingTypeEnum[keyof typeof ListingAdminV2ParkingDetailsParkingTypeEnum];

/**
 * Parking Details
 * @export
 * @interface ListingAdminV2ParkingInfo
 */
export interface ListingAdminV2ParkingInfo {
    /**
     * Details for available parking spaces
     * @type {Array<ListingAdminV2ParkingDetails>}
     * @memberof ListingAdminV2ParkingInfo
     */
    'details'?: Array<ListingAdminV2ParkingDetails>;
    /**
     * Additional information regarding the parking condition
     * @type {string}
     * @memberof ListingAdminV2ParkingInfo
     */
    'information'?: string;
}
/**
 * Resource related to the listing
 * @export
 * @interface ListingAdminV2PropertyMedia
 */
export interface ListingAdminV2PropertyMedia {
    /**
     * Type of the resource
     * @type {string}
     * @memberof ListingAdminV2PropertyMedia
     */
    'resourceType'?: ListingAdminV2PropertyMediaResourceTypeEnum;
    /**
     * shows the place from where file can be downloaded
     * @type {string}
     * @memberof ListingAdminV2PropertyMedia
     */
    'url': string;
}

export const ListingAdminV2PropertyMediaResourceTypeEnum = {
    Photograph: 'photograph',
    FloorPlan: 'floorPlan',
    Video: 'video',
    VirtualTour: 'virtualTour',
    WebLink: 'webLink'
} as const;

export type ListingAdminV2PropertyMediaResourceTypeEnum = typeof ListingAdminV2PropertyMediaResourceTypeEnum[keyof typeof ListingAdminV2PropertyMediaResourceTypeEnum];

/**
 * PDF file related to the listing
 * @export
 * @interface ListingAdminV2PropertyPdf
 */
export interface ListingAdminV2PropertyPdf {
    /**
     * Url of the PDF
     * @type {string}
     * @memberof ListingAdminV2PropertyPdf
     */
    'url': string;
    /**
     * Type of the PDF. `DevProjectPdf` PDF files are only visible, if the listing is a child listing of an active development project.
     * @type {string}
     * @memberof ListingAdminV2PropertyPdf
     */
    'type'?: ListingAdminV2PropertyPdfTypeEnum;
    /**
     * Description of the PDF
     * @type {string}
     * @memberof ListingAdminV2PropertyPdf
     */
    'description'?: string;
}

export const ListingAdminV2PropertyPdfTypeEnum = {
    CommercialPdf: 'commercialPdf',
    NewDevBrochurePdf: 'newDevBrochurePdf',
    FloorplanPdf: 'floorplanPdf',
    DevProjectPdf: 'devProjectPdf',
    DevProjectMasterplanPdf: 'devProjectMasterplanPdf'
} as const;

export type ListingAdminV2PropertyPdfTypeEnum = typeof ListingAdminV2PropertyPdfTypeEnum[keyof typeof ListingAdminV2PropertyPdfTypeEnum];

/**
 * Residential off market listing
 * @export
 * @interface ListingAdminV2ResidentialOffMarketListing
 */
export interface ListingAdminV2ResidentialOffMarketListing {
    /**
     * A string identifying the data provider
     * @type {string}
     * @memberof ListingAdminV2ResidentialOffMarketListing
     */
    'listingProvider'?: string;
    /**
     * The Domain Agency ID
     * @type {number}
     * @memberof ListingAdminV2ResidentialOffMarketListing
     */
    'domainAgencyID': number;
    /**
     * External Advertisement Id of up to 50 characters will be stored.<br />  This value is used to identify an Advertisement for updates and should be unique for listing provider.<br />  This value is case-insensitive (meaning AAAA will update aaaa).
     * @type {string}
     * @memberof ListingAdminV2ResidentialOffMarketListing
     */
    'providerAdId': string;
    /**
     * Description of the property.  6000 characters in length. The following HTML elements are permitted: &lt;br /&gt;, &lt;p&gt;&lt;/p&gt;, &amp;nbsp;. HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade.  Unicode characters which are unsupported by Latin-1 (ISO-8859-1 range from U+0080 to U+00FF), will be removed https://en.wikipedia.org/wiki/ISO/IEC_8859-1
     * @type {string}
     * @memberof ListingAdminV2ResidentialOffMarketListing
     */
    'description'?: string;
    /**
     * \'Headline\' Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.
     * @type {string}
     * @memberof ListingAdminV2ResidentialOffMarketListing
     */
    'summary'?: string;
    /**
     * Minimum required attributes: First name, last name and E-mail.  If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.  Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.
     * @type {Array<ListingAdminV2Contact>}
     * @memberof ListingAdminV2ResidentialOffMarketListing
     */
    'contacts'?: Array<ListingAdminV2Contact>;
    /**
     * Sale or Rent
     * @type {string}
     * @memberof ListingAdminV2ResidentialOffMarketListing
     */
    'listingAction': ListingAdminV2ResidentialOffMarketListingListingActionEnum;
    /**
     * 
     * @type {ListingAdminV2OffMarketDetailsBase}
     * @memberof ListingAdminV2ResidentialOffMarketListing
     */
    'offMarketDetails': ListingAdminV2OffMarketDetailsBase;
    /**
     * 
     * @type {ListingAdminV2ResidentialOffMarketProperty}
     * @memberof ListingAdminV2ResidentialOffMarketListing
     */
    'propertyDetails': ListingAdminV2ResidentialOffMarketProperty;
}

export const ListingAdminV2ResidentialOffMarketListingListingActionEnum = {
    Sale: 'sale',
    Rent: 'rent'
} as const;

export type ListingAdminV2ResidentialOffMarketListingListingActionEnum = typeof ListingAdminV2ResidentialOffMarketListingListingActionEnum[keyof typeof ListingAdminV2ResidentialOffMarketListingListingActionEnum];

/**
 * Residential off market property
 * @export
 * @interface ListingAdminV2ResidentialOffMarketProperty
 */
export interface ListingAdminV2ResidentialOffMarketProperty {
    /**
     * Residential property types<br />  \'Retirement\' requires at least one more property type to be specified with it (for example: \"Retirement\", \"ApartmentUnitFlat\") [\'acreageSemiRural\', \'apartmentUnitFlat\', \'aquaculture\', \'blockOfUnits\', \'carSpace\', \'dairyFarming\', \'developmentSite\', \'duplex\', \'farm\', \'fishingForestry\', \'newHomeDesigns\', \'house\', \'newHouseLand\', \'irrigationServices\', \'newLand\', \'livestock\', \'newApartments\', \'penthouse\', \'retirement\', \'rural\', \'semiDetached\', \'specialistFarm\', \'studio\', \'terrace\', \'townhouse\', \'vacantLand\', \'villa\', \'cropping\', \'viticulture\', \'mixedFarming\', \'grazing\', \'horticulture\', \'equine\', \'farmlet\', \'orchard\', \'ruralLifestyle\'].
     * @type {Array<string>}
     * @memberof ListingAdminV2ResidentialOffMarketProperty
     */
    'propertyType': Array<ListingAdminV2ResidentialOffMarketPropertyPropertyTypeEnum>;
    /**
     * Number of bedrooms
     * @type {number}
     * @memberof ListingAdminV2ResidentialOffMarketProperty
     */
    'bedRooms'?: number;
    /**
     * Number of bathrooms
     * @type {number}
     * @memberof ListingAdminV2ResidentialOffMarketProperty
     */
    'bathRooms'?: number;
    /**
     * 
     * @type {ListingAdminV2ParkingInfo}
     * @memberof ListingAdminV2ResidentialOffMarketProperty
     */
    'parkingInfo'?: ListingAdminV2ParkingInfo;
    /**
     * List of image files, photos or floor plans related to the listing.  Supported image file formats: AVIF, BMP, GIF, HEIF/HEIC, JPEG, JPEG 2000, PNG, TIFF, WebP.  The file size is restricted to maximum 100MB.  We recommend against using transparent backgrounds.  Some image formats, such as PNG, support transparency, but when images with transparent areas are resized, they may be converted to a format that doesn’t support transparency, such as JPEG.  By default, transparent areas are converted to black, but the application displaying the image may convert the transparent area to the most appropriate colour for the area where the image is being placed.
     * @type {Array<ListingAdminV2PropertyMedia>}
     * @memberof ListingAdminV2ResidentialOffMarketProperty
     */
    'images'?: Array<ListingAdminV2PropertyMedia>;
    /**
     * 
     * @type {ListingAdminV2Address}
     * @memberof ListingAdminV2ResidentialOffMarketProperty
     */
    'address': ListingAdminV2Address;
    /**
     * 
     * @type {ListingAdminV2Area}
     * @memberof ListingAdminV2ResidentialOffMarketProperty
     */
    'area'?: ListingAdminV2Area;
    /**
     * 
     * @type {ListingAdminV2LandArea}
     * @memberof ListingAdminV2ResidentialOffMarketProperty
     */
    'landArea'?: ListingAdminV2LandArea;
}

export const ListingAdminV2ResidentialOffMarketPropertyPropertyTypeEnum = {
    AcreageSemiRural: 'acreageSemiRural',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    BlockOfUnits: 'blockOfUnits',
    CarSpace: 'carSpace',
    DairyFarming: 'dairyFarming',
    DevelopmentSite: 'developmentSite',
    Duplex: 'duplex',
    Farm: 'farm',
    FishingForestry: 'fishingForestry',
    NewHomeDesigns: 'newHomeDesigns',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    IrrigationServices: 'irrigationServices',
    NewLand: 'newLand',
    Livestock: 'livestock',
    NewApartments: 'newApartments',
    Penthouse: 'penthouse',
    Retirement: 'retirement',
    Rural: 'rural',
    SemiDetached: 'semiDetached',
    SpecialistFarm: 'specialistFarm',
    Studio: 'studio',
    Terrace: 'terrace',
    Townhouse: 'townhouse',
    VacantLand: 'vacantLand',
    Villa: 'villa',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle'
} as const;

export type ListingAdminV2ResidentialOffMarketPropertyPropertyTypeEnum = typeof ListingAdminV2ResidentialOffMarketPropertyPropertyTypeEnum[keyof typeof ListingAdminV2ResidentialOffMarketPropertyPropertyTypeEnum];

/**
 * Contains details about a business sales info
 * @export
 * @interface ListingAdminV2SaleInfo
 */
export interface ListingAdminV2SaleInfo {
    /**
     * Annual sales amount for the business
     * @type {number}
     * @memberof ListingAdminV2SaleInfo
     */
    'annualSales': number;
    /**
     * Annual profit amount for the business
     * @type {number}
     * @memberof ListingAdminV2SaleInfo
     */
    'annualProfit': number;
    /**
     * Stock value of the business
     * @type {number}
     * @memberof ListingAdminV2SaleInfo
     */
    'stockValue': number;
}
/**
 * Sold Details
 * @export
 * @interface ListingAdminV2SoldDetails
 */
export interface ListingAdminV2SoldDetails {
    /**
     * Sold Type
     * @type {string}
     * @memberof ListingAdminV2SoldDetails
     */
    'soldType': ListingAdminV2SoldDetailsSoldTypeEnum;
    /**
     * Price property was sold for
     * @type {number}
     * @memberof ListingAdminV2SoldDetails
     */
    'soldPrice': number;
    /**
     * Indicates how the price will be displayed for free to the general public, default to true if value not provided
     * @type {boolean}
     * @memberof ListingAdminV2SoldDetails
     */
    'displaySoldPrice'?: boolean;
}

export const ListingAdminV2SoldDetailsSoldTypeEnum = {
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    PriorToAuction: 'priorToAuction'
} as const;

export type ListingAdminV2SoldDetailsSoldTypeEnum = typeof ListingAdminV2SoldDetailsSoldTypeEnum[keyof typeof ListingAdminV2SoldDetailsSoldTypeEnum];

/**
 * offered units details
 * @export
 * @interface ListingAdminV2SpecificUnitDetail
 */
export interface ListingAdminV2SpecificUnitDetail {
    /**
     * Unit number
     * @type {string}
     * @memberof ListingAdminV2SpecificUnitDetail
     */
    'name'?: string;
    /**
     * Unit size
     * @type {number}
     * @memberof ListingAdminV2SpecificUnitDetail
     */
    'size'?: number;
    /**
     * Unit price
     * @type {number}
     * @memberof ListingAdminV2SpecificUnitDetail
     */
    'price'?: number;
    /**
     * Additional notes
     * @type {string}
     * @memberof ListingAdminV2SpecificUnitDetail
     */
    'notes'?: string;
    /**
     * Is it available?
     * @type {boolean}
     * @memberof ListingAdminV2SpecificUnitDetail
     */
    'isSoldOrLeased'?: boolean;
    /**
     * Occupancy type
     * @type {string}
     * @memberof ListingAdminV2SpecificUnitDetail
     */
    'occupancy'?: ListingAdminV2SpecificUnitDetailOccupancyEnum;
    /**
     * Price unit type
     * @type {string}
     * @memberof ListingAdminV2SpecificUnitDetail
     */
    'priceUnit'?: ListingAdminV2SpecificUnitDetailPriceUnitEnum;
    /**
     * Lease price for sale or lease
     * @type {number}
     * @memberof ListingAdminV2SpecificUnitDetail
     */
    'leasePriceForSaleorLease'?: number;
}

export const ListingAdminV2SpecificUnitDetailOccupancyEnum = {
    Tenanted: 'tenanted',
    Vacant: 'vacant'
} as const;

export type ListingAdminV2SpecificUnitDetailOccupancyEnum = typeof ListingAdminV2SpecificUnitDetailOccupancyEnum[keyof typeof ListingAdminV2SpecificUnitDetailOccupancyEnum];
export const ListingAdminV2SpecificUnitDetailPriceUnitEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
} as const;

export type ListingAdminV2SpecificUnitDetailPriceUnitEnum = typeof ListingAdminV2SpecificUnitDetailPriceUnitEnum[keyof typeof ListingAdminV2SpecificUnitDetailPriceUnitEnum];

/**
 * Supplementary metadata
 * @export
 * @interface ListingAdminV2SupplementaryMetadata
 */
export interface ListingAdminV2SupplementaryMetadata {
    /**
     * Name
     * @type {string}
     * @memberof ListingAdminV2SupplementaryMetadata
     */
    'name': string;
    /**
     * Description
     * @type {string}
     * @memberof ListingAdminV2SupplementaryMetadata
     */
    'description'?: string;
    /**
     * Measurement
     * @type {number}
     * @memberof ListingAdminV2SupplementaryMetadata
     */
    'measurement'?: number;
    /**
     * Measurement unit
     * @type {string}
     * @memberof ListingAdminV2SupplementaryMetadata
     */
    'measurementUnit'?: ListingAdminV2SupplementaryMetadataMeasurementUnitEnum;
}

export const ListingAdminV2SupplementaryMetadataMeasurementUnitEnum = {
    SquareMetres: 'squareMetres',
    Hectares: 'hectares',
    Millimetres: 'millimetres',
    Dse: 'dse'
} as const;

export type ListingAdminV2SupplementaryMetadataMeasurementUnitEnum = typeof ListingAdminV2SupplementaryMetadataMeasurementUnitEnum[keyof typeof ListingAdminV2SupplementaryMetadataMeasurementUnitEnum];

/**
 * Tenant Information
 * @export
 * @interface ListingAdminV2Tenant
 */
export interface ListingAdminV2Tenant {
    /**
     * The date on which the tenants lease began, or is due to begin.
     * @type {string}
     * @memberof ListingAdminV2Tenant
     */
    'leaseStart'?: string;
    /**
     * The date on which the tenants lease is due to end
     * @type {string}
     * @memberof ListingAdminV2Tenant
     */
    'leaseEnd'?: string;
    /**
     * Name of the current tenant of the property, up to 100 characters
     * @type {string}
     * @memberof ListingAdminV2Tenant
     */
    'name'?: string;
    /**
     * Information regarding current rental, up to 100 characters
     * @type {string}
     * @memberof ListingAdminV2Tenant
     */
    'rentalDetails'?: string;
    /**
     * Leasing options available to a prospective tenant, up to 100 characters
     * @type {string}
     * @memberof ListingAdminV2Tenant
     */
    'leaseOptions'?: string;
    /**
     * The from range of the tenant\'s current lease
     * @type {number}
     * @memberof ListingAdminV2Tenant
     */
    'tenantInfoTermOfLeaseFrom'?: number;
    /**
     * The to range of the tenant\'s current lease
     * @type {number}
     * @memberof ListingAdminV2Tenant
     */
    'tenantInfoTermOfLeaseTo'?: number;
    /**
     * Is tenant lease date variable
     * @type {boolean}
     * @memberof ListingAdminV2Tenant
     */
    'leaseDateVariable'?: boolean;
}
/**
 * Tender Information
 * @export
 * @interface ListingAdminV2Tender
 */
export interface ListingAdminV2Tender {
    /**
     * The recipient name of the tender, up to 50 characters
     * @type {string}
     * @memberof ListingAdminV2Tender
     */
    'recipientName'?: string;
    /**
     * Street address, up to 100 characters.
     * @type {string}
     * @memberof ListingAdminV2Tender
     */
    'address'?: string;
    /**
     * Closing Date
     * @type {string}
     * @memberof ListingAdminV2Tender
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface ListingPerformanceV1DailyProjectStatistics
 */
export interface ListingPerformanceV1DailyProjectStatistics {
    /**
     * Total number of photo views
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalPhotoViews'?: number | null;
    /**
     * Total number of floorplan views
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalFloorplanViews'?: number | null;
    /**
     * Total number of address map views
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalMapViews'?: number | null;
    /**
     * Total number of video views
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalVideoViews'?: number | null;
    /**
     * Total number of agent detail views
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalAgentDetailViews'?: number | null;
    /**
     * Total number of views under search carousel
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalSearchCarouselViews'?: number | null;
    /**
     * Total number of times the agent phone number was revealed for contact
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalAgentPhoneNumberReveals'?: number | null;
    /**
     * Total number of email enquiries
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalEnquiries'?: number | null;
    /**
     * Total number of times the link was emailed
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalEmailToFriend'?: number | null;
    /**
     * Total number of shares via social media
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalSharedViaSocialMedia'?: number | null;
    /**
     * Total number of times when the inspection was saved to calendar
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalInspectionTimeSaving'?: number | null;
    /**
     * Total number of calls made to agent
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalCallToAgentFromMobile'?: number | null;
    /**
     * Domain Advertisement Id
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'devProjectId'?: number | null;
    /**
     * Total number of views
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalViews'?: number | null;
    /**
     * Total number of individual image views
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalIndividualImageViews'?: number | null;
    /**
     * Total number of ads clicked
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalAdClick'?: number | null;
    /**
     * Total number of click throughs to project listings
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalClicksToProjectListing'?: number | null;
    /**
     * Total number of external website view
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalExternalWebsiteViews'?: number | null;
    /**
     * Total number of email enquiries
     * @type {number}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'totalEmailEnquiries'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ListingPerformanceV1DailyProjectStatistics
     */
    'eventDate'?: string | null;
}
/**
 * 
 * @export
 * @interface ListingPerformanceV1DailyStatistics
 */
export interface ListingPerformanceV1DailyStatistics {
    /**
     * Domain Advertisement Id
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'listingId'?: number | null;
    /**
     * Total number of views for the listing details
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalListingViews'?: number | null;
    /**
     * Total number of listing photo views
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalPhotoViews'?: number | null;
    /**
     * Total number of listing photo gallery views
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalPhotoGalleryViews'?: number | null;
    /**
     * Total number of floorplan views
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalFloorplanViews'?: number | null;
    /**
     * Total number of address map views
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalMapViews'?: number | null;
    /**
     * Total number of vedio views
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalVideoViews'?: number | null;
    /**
     * Total number of Ebrochure views
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalEbrochureViews'?: number | null;
    /**
     * Total number of agent detail views
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalAgentDetailViews'?: number | null;
    /**
     * Total number of times the listing was shortlisted
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalShortlisted'?: number | null;
    /**
     * Total number of time the listing detail was printed
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalPrinted'?: number | null;
    /**
     * Total number of times the agent phone number was revealed for contact
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalAgentPhoneNumberReveals'?: number | null;
    /**
     * Total number of enquiries
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalEnquiries'?: number | null;
    /**
     * Total number of times the listing link was emailed
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalEmailToFriend'?: number | null;
    /**
     * Total number of shares via social media
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalSharedViaSocialMedia'?: number | null;
    /**
     * Total numnber of times when the inspection was saved to calendar
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalInspectionTimeSaving'?: number | null;
    /**
     * Total number of calls made to agent from inside the listing
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'totalCallToAgentFromMobile'?: number | null;
    /**
     * Percentage of total views from website
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'percentageWebsiteViews'?: number | null;
    /**
     * Percentage of total views from mobile site
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'percentageMobileSiteViews'?: number | null;
    /**
     * Percentage of total views from smart phone apps
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'percentageSmartPhoneViews'?: number | null;
    /**
     * Percentage of total views from tablets
     * @type {number}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'percentageTabletViews'?: number | null;
    /**
     * Date of statistics events
     * @type {string}
     * @memberof ListingPerformanceV1DailyStatistics
     */
    'eventDate'?: string | null;
}
/**
 * 
 * @export
 * @interface ListingPerformanceV1ProjectListingStatistics
 */
export interface ListingPerformanceV1ProjectListingStatistics {
    /**
     * Total number of photo views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalPhotoViews'?: number | null;
    /**
     * Total number of floorplan views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalFloorplanViews'?: number | null;
    /**
     * Total number of address map views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalMapViews'?: number | null;
    /**
     * Total number of video views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalVideoViews'?: number | null;
    /**
     * Total number of agent detail views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalAgentDetailViews'?: number | null;
    /**
     * Total number of views under search carousel
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalSearchCarouselViews'?: number | null;
    /**
     * Total number of times the agent phone number was revealed for contact
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalAgentPhoneNumberReveals'?: number | null;
    /**
     * Total number of email enquiries
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalEnquiries'?: number | null;
    /**
     * Total number of times the link was emailed
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalEmailToFriend'?: number | null;
    /**
     * Total number of shares via social media
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalSharedViaSocialMedia'?: number | null;
    /**
     * Total number of times when the inspection was saved to calendar
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalInspectionTimeSaving'?: number | null;
    /**
     * Total number of calls made to agent
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalCallToAgentFromMobile'?: number | null;
    /**
     * Domain Advertisement Id
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'devProjectId'?: number | null;
    /**
     * Total number of views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalViews'?: number | null;
    /**
     * Total number of individual image views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalIndividualImageViews'?: number | null;
    /**
     * Total number of ads clicked
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalAdClick'?: number | null;
    /**
     * Total number of click throughs to project listings
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalClicksToProjectListing'?: number | null;
    /**
     * Total number of external website view
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalExternalWebsiteViews'?: number | null;
    /**
     * Total number of email enquiries
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalEmailEnquiries'?: number | null;
    /**
     * Total number of times the listing was short listed
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalShortlisted'?: number | null;
    /**
     * Total number of times when statement of information download
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalStatementOfInformationDownloads'?: number | null;
    /**
     * Total number of times when statement of information reveals
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalStatementOfInformationReveals'?: number | null;
    /**
     * Total number of times when notes added
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalAddedNotes'?: number | null;
    /**
     * Total number of completed inspection checklist
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalCompletedInspectionChecklist'?: number | null;
    /**
     * Total number of views from virtual tours
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'totalVirtualTourViews'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ListingPerformanceV1ProjectListingStatistics
     */
    'listingId'?: number;
}
/**
 * 
 * @export
 * @interface ListingPerformanceV1ProjectListingStatisticsReport
 */
export interface ListingPerformanceV1ProjectListingStatisticsReport {
    /**
     * 
     * @type {ListingPerformanceV1ProjectStatistics}
     * @memberof ListingPerformanceV1ProjectListingStatisticsReport
     */
    'summary'?: ListingPerformanceV1ProjectStatistics;
    /**
     * Listing statistic breakdown for the period by days
     * @type {Array<ListingPerformanceV1DailyProjectStatistics>}
     * @memberof ListingPerformanceV1ProjectListingStatisticsReport
     */
    'dailyBreakdown'?: Array<ListingPerformanceV1DailyProjectStatistics> | null;
    /**
     * Listing statistic breakdown for the period by listings
     * @type {Array<ListingPerformanceV1ProjectListingStatistics>}
     * @memberof ListingPerformanceV1ProjectListingStatisticsReport
     */
    'listingBreakdown'?: Array<ListingPerformanceV1ProjectListingStatistics> | null;
}
/**
 * 
 * @export
 * @interface ListingPerformanceV1ProjectStatistics
 */
export interface ListingPerformanceV1ProjectStatistics {
    /**
     * Total number of photo views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalPhotoViews'?: number | null;
    /**
     * Total number of floorplan views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalFloorplanViews'?: number | null;
    /**
     * Total number of address map views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalMapViews'?: number | null;
    /**
     * Total number of video views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalVideoViews'?: number | null;
    /**
     * Total number of agent detail views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalAgentDetailViews'?: number | null;
    /**
     * Total number of views under search carousel
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalSearchCarouselViews'?: number | null;
    /**
     * Total number of times the agent phone number was revealed for contact
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalAgentPhoneNumberReveals'?: number | null;
    /**
     * Total number of email enquiries
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalEnquiries'?: number | null;
    /**
     * Total number of times the link was emailed
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalEmailToFriend'?: number | null;
    /**
     * Total number of shares via social media
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalSharedViaSocialMedia'?: number | null;
    /**
     * Total number of times when the inspection was saved to calendar
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalInspectionTimeSaving'?: number | null;
    /**
     * Total number of calls made to agent
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalCallToAgentFromMobile'?: number | null;
    /**
     * Domain Advertisement Id
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'devProjectId'?: number | null;
    /**
     * Total number of views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalViews'?: number | null;
    /**
     * Total number of individual image views
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalIndividualImageViews'?: number | null;
    /**
     * Total number of ads clicked
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalAdClick'?: number | null;
    /**
     * Total number of click throughs to project listings
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalClicksToProjectListing'?: number | null;
    /**
     * Total number of external website view
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalExternalWebsiteViews'?: number | null;
    /**
     * Total number of email enquiries
     * @type {number}
     * @memberof ListingPerformanceV1ProjectStatistics
     */
    'totalEmailEnquiries'?: number | null;
}
/**
 * 
 * @export
 * @interface ListingPerformanceV1ProjectStatisticsReport
 */
export interface ListingPerformanceV1ProjectStatisticsReport {
    /**
     * 
     * @type {ListingPerformanceV1ProjectStatistics}
     * @memberof ListingPerformanceV1ProjectStatisticsReport
     */
    'summary'?: ListingPerformanceV1ProjectStatistics;
    /**
     * Listing statistic breakdown for the period by days
     * @type {Array<ListingPerformanceV1DailyProjectStatistics>}
     * @memberof ListingPerformanceV1ProjectStatisticsReport
     */
    'dailyBreakdown'?: Array<ListingPerformanceV1DailyProjectStatistics> | null;
}
/**
 * Statistics report for single listing
 * @export
 * @interface ListingPerformanceV1StatisticReport
 */
export interface ListingPerformanceV1StatisticReport {
    /**
     * 
     * @type {ListingPerformanceV1Statistics}
     * @memberof ListingPerformanceV1StatisticReport
     */
    'summary'?: ListingPerformanceV1Statistics;
    /**
     * Listing statistic breakdown for the period
     * @type {Array<ListingPerformanceV1DailyStatistics>}
     * @memberof ListingPerformanceV1StatisticReport
     */
    'dailyBreakdown'?: Array<ListingPerformanceV1DailyStatistics> | null;
}
/**
 * Listing statistics
 * @export
 * @interface ListingPerformanceV1Statistics
 */
export interface ListingPerformanceV1Statistics {
    /**
     * Domain Advertisement Id
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'listingId'?: number | null;
    /**
     * Total number of views for the listing details
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalListingViews'?: number | null;
    /**
     * Total number of listing photo views
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalPhotoViews'?: number | null;
    /**
     * Total number of listing photo gallery views
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalPhotoGalleryViews'?: number | null;
    /**
     * Total number of floorplan views
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalFloorplanViews'?: number | null;
    /**
     * Total number of address map views
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalMapViews'?: number | null;
    /**
     * Total number of vedio views
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalVideoViews'?: number | null;
    /**
     * Total number of Ebrochure views
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalEbrochureViews'?: number | null;
    /**
     * Total number of agent detail views
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalAgentDetailViews'?: number | null;
    /**
     * Total number of times the listing was shortlisted
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalShortlisted'?: number | null;
    /**
     * Total number of time the listing detail was printed
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalPrinted'?: number | null;
    /**
     * Total number of times the agent phone number was revealed for contact
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalAgentPhoneNumberReveals'?: number | null;
    /**
     * Total number of enquiries
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalEnquiries'?: number | null;
    /**
     * Total number of times the listing link was emailed
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalEmailToFriend'?: number | null;
    /**
     * Total number of shares via social media
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalSharedViaSocialMedia'?: number | null;
    /**
     * Total numnber of times when the inspection was saved to calendar
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalInspectionTimeSaving'?: number | null;
    /**
     * Total number of calls made to agent from inside the listing
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'totalCallToAgentFromMobile'?: number | null;
    /**
     * Percentage of total views from website
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'percentageWebsiteViews'?: number | null;
    /**
     * Percentage of total views from mobile site
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'percentageMobileSiteViews'?: number | null;
    /**
     * Percentage of total views from smart phone apps
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'percentageSmartPhoneViews'?: number | null;
    /**
     * Percentage of total views from tablets
     * @type {number}
     * @memberof ListingPerformanceV1Statistics
     */
    'percentageTabletViews'?: number | null;
}
/**
 * Encapsulates the parts that make up an Address
 * @export
 * @interface ListingsV1AddressParts
 */
export interface ListingsV1AddressParts {
    /**
     * Gets or Sets StateAbbreviation
     * @type {string}
     * @memberof ListingsV1AddressParts
     */
    'stateAbbreviation'?: ListingsV1AddressPartsStateAbbreviationEnum;
    /**
     * Gets or Sets DisplayType
     * @type {string}
     * @memberof ListingsV1AddressParts
     */
    'displayType'?: ListingsV1AddressPartsDisplayTypeEnum;
    /**
     * Street number
     * @type {string}
     * @memberof ListingsV1AddressParts
     */
    'streetNumber'?: string | null;
    /**
     * Unit number.
     * @type {string}
     * @memberof ListingsV1AddressParts
     */
    'unitNumber'?: string | null;
    /**
     * Street address
     * @type {string}
     * @memberof ListingsV1AddressParts
     */
    'street'?: string | null;
    /**
     * Suburb of the address
     * @type {string}
     * @memberof ListingsV1AddressParts
     */
    'suburb'?: string | null;
    /**
     * Domain suburb identifier for address lookup via the domain location api
     * @type {number}
     * @memberof ListingsV1AddressParts
     */
    'suburbId'?: number | null;
    /**
     * Postcode of the address
     * @type {string}
     * @memberof ListingsV1AddressParts
     */
    'postcode'?: string | null;
    /**
     * Advertiser\'s preference in displaying their listing\'s address
     * @type {string}
     * @memberof ListingsV1AddressParts
     */
    'displayAddress'?: string | null;
}

export const ListingsV1AddressPartsStateAbbreviationEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Sa: 'sa',
    Nt: 'nt',
    Tas: 'tas',
    Act: 'act',
    Qld: 'qld',
    Wa: 'wa'
} as const;

export type ListingsV1AddressPartsStateAbbreviationEnum = typeof ListingsV1AddressPartsStateAbbreviationEnum[keyof typeof ListingsV1AddressPartsStateAbbreviationEnum];
export const ListingsV1AddressPartsDisplayTypeEnum = {
    FullAddress: 'fullAddress',
    StreetAndSuburb: 'streetAndSuburb',
    SuburbOnly: 'suburbOnly',
    RegionOnly: 'regionOnly',
    AreaOnly: 'areaOnly',
    StateOnly: 'stateOnly'
} as const;

export type ListingsV1AddressPartsDisplayTypeEnum = typeof ListingsV1AddressPartsDisplayTypeEnum[keyof typeof ListingsV1AddressPartsDisplayTypeEnum];

/**
 * Encapsulates the listing\'s advertiser identifiers
 * @export
 * @interface ListingsV1AdvertiserIdentifiers
 */
export interface ListingsV1AdvertiserIdentifiers {
    /**
     * Gets or Sets AdvertiserType
     * @type {string}
     * @memberof ListingsV1AdvertiserIdentifiers
     */
    'advertiserType'?: ListingsV1AdvertiserIdentifiersAdvertiserTypeEnum;
    /**
     * Advertiser\'s identifier
     * @type {number}
     * @memberof ListingsV1AdvertiserIdentifiers
     */
    'advertiserId'?: number | null;
    /**
     * Identifier of each contact the advertiser has associated with the listing
     * @type {Array<number>}
     * @memberof ListingsV1AdvertiserIdentifiers
     */
    'contactIds'?: Array<number> | null;
    /**
     * Identifier of each agent the advertiser has associated with the listing
     * @type {Array<string>}
     * @memberof ListingsV1AdvertiserIdentifiers
     */
    'agentIds'?: Array<string> | null;
    /**
     * Identifier of each conjunctional contact associated with the listing
     * @type {Array<number>}
     * @memberof ListingsV1AdvertiserIdentifiers
     */
    'conjunctionContactIds'?: Array<number> | null;
    /**
     * Identifier of each conjunctional agent associated with the listing
     * @type {Array<string>}
     * @memberof ListingsV1AdvertiserIdentifiers
     */
    'conjunctionAgentIds'?: Array<string> | null;
}

export const ListingsV1AdvertiserIdentifiersAdvertiserTypeEnum = {
    Agency: 'agency',
    Private: 'private'
} as const;

export type ListingsV1AdvertiserIdentifiersAdvertiserTypeEnum = typeof ListingsV1AdvertiserIdentifiersAdvertiserTypeEnum[keyof typeof ListingsV1AdvertiserIdentifiersAdvertiserTypeEnum];

/**
 * The detail\'s of the auction in case of a listing for sale being auctioned or sold by auction
 * @export
 * @interface ListingsV1AuctionDetails
 */
export interface ListingsV1AuctionDetails {
    /**
     * 
     * @type {ListingsV1AuctionSchedule}
     * @memberof ListingsV1AuctionDetails
     */
    'auctionSchedule'?: ListingsV1AuctionSchedule;
    /**
     * The auctioned price entered by the Advertiser.  This price will only be visible if allowed by the Advertiser  and the listing as been auctioned
     * @type {number}
     * @memberof ListingsV1AuctionDetails
     */
    'auctionedPrice'?: number | null;
    /**
     * The listing\'s last auctioned date and time specified by the Advertiser.  This will only be visible if the listing has been auctioned.  DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV1AuctionDetails
     */
    'auctionedDate'?: string | null;
}
/**
 * Encapsulates the details of a Property being Auctioned.
 * @export
 * @interface ListingsV1AuctionSchedule
 */
export interface ListingsV1AuctionSchedule {
    /**
     * Description and location of the auction provided by advertiser
     * @type {string}
     * @memberof ListingsV1AuctionSchedule
     */
    'locationDescription'?: string | null;
    /**
     * Opening date and time of the auction. e.g. 2015-01-01T12:00:00  DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV1AuctionSchedule
     */
    'openingDateTime'?: string | null;
    /**
     * Terms of the auction
     * @type {string}
     * @memberof ListingsV1AuctionSchedule
     */
    'terms'?: string | null;
    /**
     * On-line URL of the auction
     * @type {string}
     * @memberof ListingsV1AuctionSchedule
     */
    'url'?: string | null;
}
/**
 * APM Identifiers
 * @export
 * @interface ListingsV1AustralianPropertyMonitorsIdentifiers
 */
export interface ListingsV1AustralianPropertyMonitorsIdentifiers {
    /**
     * APM address identifier
     * @type {number}
     * @memberof ListingsV1AustralianPropertyMonitorsIdentifiers
     */
    'addressId'?: number | null;
    /**
     * APM street identifier
     * @type {number}
     * @memberof ListingsV1AustralianPropertyMonitorsIdentifiers
     */
    'streetId'?: number | null;
    /**
     * APM suburb identifier
     * @type {number}
     * @memberof ListingsV1AustralianPropertyMonitorsIdentifiers
     */
    'suburbId'?: number | null;
    /**
     * APM cadastre identifier
     * @type {number}
     * @memberof ListingsV1AustralianPropertyMonitorsIdentifiers
     */
    'cadastreId'?: number | null;
    /**
     * APM postcode identifier
     * @type {number}
     * @memberof ListingsV1AustralianPropertyMonitorsIdentifiers
     */
    'postcodeId'?: number | null;
    /**
     * State identifier
     * @type {number}
     * @memberof ListingsV1AustralianPropertyMonitorsIdentifiers
     */
    'stateId'?: number | null;
    /**
     * APM State
     * @type {string}
     * @memberof ListingsV1AustralianPropertyMonitorsIdentifiers
     */
    'state'?: string | null;
    /**
     * APM property type identifier
     * @type {number}
     * @memberof ListingsV1AustralianPropertyMonitorsIdentifiers
     */
    'propertyTypeId'?: number | null;
    /**
     * APM property category type identifier
     * @type {number}
     * @memberof ListingsV1AustralianPropertyMonitorsIdentifiers
     */
    'propertyTypeCategoryId'?: number | null;
    /**
     * APM washed and standardized address component for the street number,   (including any prefixes, suffixed and composite numbers e.g. \\\"2-4a\\\")
     * @type {string}
     * @memberof ListingsV1AustralianPropertyMonitorsIdentifiers
     */
    'streetNumber'?: string | null;
}
/**
 * Basic price information
 * @export
 * @interface ListingsV1BasicPrice
 */
export interface ListingsV1BasicPrice {
    /**
     * Lowest price the property is expected to sell/rent for to set search price.
     * @type {number}
     * @memberof ListingsV1BasicPrice
     */
    'from'?: number | null;
    /**
     * Highest price the property is expected to sell/rent for to set search price.
     * @type {number}
     * @memberof ListingsV1BasicPrice
     */
    'to'?: number | null;
}
/**
 * Information regarding the past comparable property sales that influenced the setting of the estimation price
 * @export
 * @interface ListingsV1ComparableData
 */
export interface ListingsV1ComparableData {
    /**
     * Comparable properties that are of a similar standard or condition to the property for sale
     * @type {Array<ListingsV1PastSaleData>}
     * @memberof ListingsV1ComparableData
     */
    'comparableProperty'?: Array<ListingsV1PastSaleData> | null;
    /**
     * Text description if there are less than three comparable sales available
     * @type {string}
     * @memberof ListingsV1ComparableData
     */
    'declarationText'?: string | null;
}
/**
 * Encapsulates the details of a geo location, long/lat
 * @export
 * @interface ListingsV1GeoLocation
 */
export interface ListingsV1GeoLocation {
    /**
     * Latitude of the property
     * @type {number}
     * @memberof ListingsV1GeoLocation
     */
    'latitude'?: number | null;
    /**
     * Longitude of the property
     * @type {number}
     * @memberof ListingsV1GeoLocation
     */
    'longitude'?: number | null;
}
/**
 * Encapsulates the details of a Listing\'s Inspection
 * @export
 * @interface ListingsV1Inspection
 */
export interface ListingsV1Inspection {
    /**
     * Gets or Sets Recurrence
     * @type {string}
     * @memberof ListingsV1Inspection
     */
    'recurrence'?: ListingsV1InspectionRecurrenceEnum;
    /**
     * Opening date and time of the inspection. e.g. 2015-01-01T12:00:00.  Not provided by bulk uploaded listings, in these cases refer to the  inspection description field. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV1Inspection
     */
    'openingDateTime'?: string | null;
    /**
     * Closing date and time of the inspection. e.g. 2015-01-01T12:00:00  Not provided by bulk uploaded listings, in these cases refer to the  inspection description field. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV1Inspection
     */
    'closingDateTime'?: string | null;
    /**
     * Description of the inspection provided by the Advertiser.  When listings are bulk uploaded, inspection times are provided as a string.  Other inspection details will not be provided
     * @type {string}
     * @memberof ListingsV1Inspection
     */
    'description'?: string | null;
}

export const ListingsV1InspectionRecurrenceEnum = {
    None: 'none',
    Weekly: 'weekly'
} as const;

export type ListingsV1InspectionRecurrenceEnum = typeof ListingsV1InspectionRecurrenceEnum[keyof typeof ListingsV1InspectionRecurrenceEnum];

/**
 * Represents a Property Listing
 * @export
 * @interface ListingsV1Listing
 */
export interface ListingsV1Listing {
    /**
     * Gets or Sets Objective
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'objective'?: ListingsV1ListingObjectiveEnum;
    /**
     * Gets or Sets Status
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'status'?: ListingsV1ListingStatusEnum;
    /**
     * Gets or Sets SaleMode
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'saleMode'?: ListingsV1ListingSaleModeEnum;
    /**
     * Gets or Sets Channel
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'channel'?: ListingsV1ListingChannelEnum;
    /**
     * The identifier which uniquely identifies the listing.
     * @type {number}
     * @memberof ListingsV1Listing
     */
    'id': number;
    /**
     * 
     * @type {ListingsV1AddressParts}
     * @memberof ListingsV1Listing
     */
    'addressParts'?: ListingsV1AddressParts;
    /**
     * 
     * @type {ListingsV1AdvertiserIdentifiers}
     * @memberof ListingsV1Listing
     */
    'advertiserIdentifiers': ListingsV1AdvertiserIdentifiers;
    /**
     * 
     * @type {ListingsV1AustralianPropertyMonitorsIdentifiers}
     * @memberof ListingsV1Listing
     */
    'apmIdentifiers'?: ListingsV1AustralianPropertyMonitorsIdentifiers;
    /**
     * Total number of bathrooms in the property
     * @type {number}
     * @memberof ListingsV1Listing
     */
    'bathrooms'?: number | null;
    /**
     * Total number of bedrooms in the property; Studio apartments have a value of \\\"0\\\"
     * @type {number}
     * @memberof ListingsV1Listing
     */
    'bedrooms'?: number | null;
    /**
     * The building area display value of the property e.g. 160 ha
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'buildingArea'?: string | null;
    /**
     * The properties building area in square meters
     * @type {number}
     * @memberof ListingsV1Listing
     */
    'buildingAreaSqm'?: number | null;
    /**
     * Total number of car spaces in the property.
     * @type {number}
     * @memberof ListingsV1Listing
     */
    'carspaces'?: number | null;
    /**
     * The date the property is available. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'dateAvailable'?: string | null;
    /**
     * The date/time the listing was created. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'dateCreated'?: string | null;
    /**
     * The date/time the listing had major update. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'dateUpdated'?: string | null;
    /**
     * When minor update applied to the listing. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'dateMinorUpdated'?: string | null;
    /**
     * The date/time the listing was purged. It\'s only returned for archived listings. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'datePurged'?: string | null;
    /**
     * The date/time last listed. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'dateListed'?: string | null;
    /**
     * The long description of the property provided by the advertiser.
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'description'?: string | null;
    /**
     * The ID of the development project - null if no associated project
     * @type {number}
     * @memberof ListingsV1Listing
     */
    'devProjectId'?: number | null;
    /**
     * Energy Efficiency Rating value for ACT properties
     * @type {number}
     * @memberof ListingsV1Listing
     */
    'energyEfficiencyRating'?: number | null;
    /**
     * The property features specified by the advertiser
     * @type {Array<string>}
     * @memberof ListingsV1Listing
     */
    'features'?: Array<string> | null;
    /**
     * 
     * @type {ListingsV1GeoLocation}
     * @memberof ListingsV1Listing
     */
    'geoLocation'?: ListingsV1GeoLocation;
    /**
     * The short description of the property provided by the advertiser.
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'headline'?: string | null;
    /**
     * 
     * @type {ListingsV1PropertyInspections}
     * @memberof ListingsV1Listing
     */
    'inspectionDetails'?: ListingsV1PropertyInspections;
    /**
     * Indicates whether the property is a new development
     * @type {boolean}
     * @memberof ListingsV1Listing
     */
    'isNewDevelopment'?: boolean | null;
    /**
     * The land area display string for the property e.g. 160 sqm
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'landArea'?: string | null;
    /**
     * The properties land area in square meters
     * @type {number}
     * @memberof ListingsV1Listing
     */
    'landAreaSqm'?: number | null;
    /**
     * The media associated with the property provided by the advertiser
     * @type {Array<ListingsV1ListingMedia>}
     * @memberof ListingsV1Listing
     */
    'media'?: Array<ListingsV1ListingMedia> | null;
    /**
     * 
     * @type {ListingsV1PriceDetails}
     * @memberof ListingsV1Listing
     */
    'priceDetails'?: ListingsV1PriceDetails;
    /**
     * The identifier which uniquely identifies the property being advertised.  This may be empty if the Address of property is poorly described
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'propertyId'?: string | null;
    /**
     * Types of the property
     * @type {Array<string>}
     * @memberof ListingsV1Listing
     */
    'propertyTypes': Array<ListingsV1ListingPropertyTypesEnum>;
    /**
     * 
     * @type {ListingsV1ProviderDetails}
     * @memberof ListingsV1Listing
     */
    'providerDetails'?: ListingsV1ProviderDetails;
    /**
     * 
     * @type {ListingsV1RentalDetails}
     * @memberof ListingsV1Listing
     */
    'rentalDetails'?: ListingsV1RentalDetails;
    /**
     * 
     * @type {ListingsV1SaleDetails}
     * @memberof ListingsV1Listing
     */
    'saleDetails'?: ListingsV1SaleDetails;
    /**
     * Indicates if the property has been withdrawn from the market  The value will be \'true\' When a listing is taken off market without being sold or leased.
     * @type {boolean}
     * @memberof ListingsV1Listing
     */
    'isWithdrawn'?: boolean | null;
    /**
     * Listing SEO URL
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'seoUrl'?: string | null;
    /**
     * The Listing\'s Virtual Tour URL.
     * @type {string}
     * @memberof ListingsV1Listing
     */
    'virtualTourUrl'?: string | null;
    /**
     * If Homepass is enabled for the listing (agency)
     * @type {boolean}
     * @memberof ListingsV1Listing
     */
    'homepassEnabled'?: boolean | null;
    /**
     * 
     * @type {ListingsV1StatementOfInformation}
     * @memberof ListingsV1Listing
     */
    'statementOfInformation'?: ListingsV1StatementOfInformation;
    /**
     * Number of dwellings for current listing
     * @type {number}
     * @memberof ListingsV1Listing
     */
    'numberOfDwellings'?: number | null;
    /**
     * Highlight items for the listing
     * @type {Array<string>}
     * @memberof ListingsV1Listing
     */
    'highlights'?: Array<string> | null;
}

export const ListingsV1ListingObjectiveEnum = {
    Sale: 'sale',
    Rent: 'rent'
} as const;

export type ListingsV1ListingObjectiveEnum = typeof ListingsV1ListingObjectiveEnum[keyof typeof ListingsV1ListingObjectiveEnum];
export const ListingsV1ListingStatusEnum = {
    Unknown: 'unknown',
    Archived: 'archived',
    UnderOffer: 'underOffer',
    Sold: 'sold',
    Leased: 'leased',
    NewDevelopment: 'newDevelopment',
    RecentlyUpdated: 'recentlyUpdated',
    New: 'new',
    Live: 'live',
    Pending: 'pending',
    DepositTaken: 'depositTaken'
} as const;

export type ListingsV1ListingStatusEnum = typeof ListingsV1ListingStatusEnum[keyof typeof ListingsV1ListingStatusEnum];
export const ListingsV1ListingSaleModeEnum = {
    Buy: 'buy',
    Rent: 'rent',
    Share: 'share',
    Sold: 'sold',
    Leased: 'leased',
    Archived: 'archived'
} as const;

export type ListingsV1ListingSaleModeEnum = typeof ListingsV1ListingSaleModeEnum[keyof typeof ListingsV1ListingSaleModeEnum];
export const ListingsV1ListingChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
} as const;

export type ListingsV1ListingChannelEnum = typeof ListingsV1ListingChannelEnum[keyof typeof ListingsV1ListingChannelEnum];
export const ListingsV1ListingPropertyTypesEnum = {
    Unknown: 'unknown',
    AcreageSemiRural: 'acreageSemiRural',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    BlockOfUnits: 'blockOfUnits',
    Carspace: 'carspace',
    DairyFarming: 'dairyFarming',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Duplex: 'duplex',
    Farm: 'farm',
    FishingForestry: 'fishingForestry',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HotelLeisure: 'hotelLeisure',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    IndustrialWarehouse: 'industrialWarehouse',
    IrrigationServices: 'irrigationServices',
    NewLand: 'newLand',
    Livestock: 'livestock',
    International: 'international',
    MedicalConsulting: 'medicalConsulting',
    NewApartments: 'newApartments',
    Offices: 'offices',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    Retail: 'retail',
    Retirement: 'retirement',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    SemiDetached: 'semiDetached',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    Studio: 'studio',
    Terrace: 'terrace',
    Townhouse: 'townhouse',
    VacantLand: 'vacantLand',
    Villa: 'villa',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
} as const;

export type ListingsV1ListingPropertyTypesEnum = typeof ListingsV1ListingPropertyTypesEnum[keyof typeof ListingsV1ListingPropertyTypesEnum];

/**
 * Encapsulates media associated with a Listing
 * @export
 * @interface ListingsV1ListingMedia
 */
export interface ListingsV1ListingMedia {
    /**
     * Gets or Sets Category
     * @type {string}
     * @memberof ListingsV1ListingMedia
     */
    'category'?: ListingsV1ListingMediaCategoryEnum;
    /**
     * Gets or Sets Type
     * @type {string}
     * @memberof ListingsV1ListingMedia
     */
    'type'?: ListingsV1ListingMediaTypeEnum;
    /**
     * The URL to the property media
     * @type {string}
     * @memberof ListingsV1ListingMedia
     */
    'url': string;
}

export const ListingsV1ListingMediaCategoryEnum = {
    Image: 'image',
    Video: 'video',
    Others: 'others'
} as const;

export type ListingsV1ListingMediaCategoryEnum = typeof ListingsV1ListingMediaCategoryEnum[keyof typeof ListingsV1ListingMediaCategoryEnum];
export const ListingsV1ListingMediaTypeEnum = {
    Photo: 'photo',
    Mp4: 'mp4',
    Youtube: 'youtube',
    Floorplan: 'floorplan',
    Vimeo: 'vimeo',
    NotSpecified: 'notSpecified'
} as const;

export type ListingsV1ListingMediaTypeEnum = typeof ListingsV1ListingMediaTypeEnum[keyof typeof ListingsV1ListingMediaTypeEnum];

/**
 * Information regarding median house/unit price   for the suburb
 * @export
 * @interface ListingsV1MedianPriceData
 */
export interface ListingsV1MedianPriceData {
    /**
     * Gets or Sets PriceType
     * @type {string}
     * @memberof ListingsV1MedianPriceData
     */
    'priceType'?: ListingsV1MedianPriceDataPriceTypeEnum;
    /**
     * Name of the suburb median price is based on.
     * @type {string}
     * @memberof ListingsV1MedianPriceData
     */
    'suburb'?: string | null;
    /**
     * Postcode of the suburb
     * @type {string}
     * @memberof ListingsV1MedianPriceData
     */
    'postcode'?: string | null;
    /**
     * Median price for the suburb.
     * @type {number}
     * @memberof ListingsV1MedianPriceData
     */
    'medianPrice'?: number | null;
    /**
     * Where median price data comes from
     * @type {string}
     * @memberof ListingsV1MedianPriceData
     */
    'source'?: string | null;
    /**
     * Start date of the median price source time period
     * @type {string}
     * @memberof ListingsV1MedianPriceData
     */
    'sourceDateFrom'?: string | null;
    /**
     * End date of the median price source time period
     * @type {string}
     * @memberof ListingsV1MedianPriceData
     */
    'sourceDateTo'?: string | null;
    /**
     * The collection date of the median price source
     * @type {string}
     * @memberof ListingsV1MedianPriceData
     */
    'sourceCollectionDate'?: string | null;
}

export const ListingsV1MedianPriceDataPriceTypeEnum = {
    House: 'house',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    VacantLand: 'vacantLand'
} as const;

export type ListingsV1MedianPriceDataPriceTypeEnum = typeof ListingsV1MedianPriceDataPriceTypeEnum[keyof typeof ListingsV1MedianPriceDataPriceTypeEnum];

/**
 * Information for past property sales
 * @export
 * @interface ListingsV1PastSaleData
 */
export interface ListingsV1PastSaleData {
    /**
     * Property unit number
     * @type {string}
     * @memberof ListingsV1PastSaleData
     */
    'unitNumber'?: string | null;
    /**
     * Property street number
     * @type {string}
     * @memberof ListingsV1PastSaleData
     */
    'streetNumber'?: string | null;
    /**
     * Property Street name
     * @type {string}
     * @memberof ListingsV1PastSaleData
     */
    'street'?: string | null;
    /**
     * Property suburb name
     * @type {string}
     * @memberof ListingsV1PastSaleData
     */
    'suburb'?: string | null;
    /**
     * Property postcode
     * @type {string}
     * @memberof ListingsV1PastSaleData
     */
    'postcode'?: string | null;
    /**
     * Property state
     * @type {string}
     * @memberof ListingsV1PastSaleData
     */
    'state'?: string | null;
    /**
     * display formatted address
     * @type {string}
     * @memberof ListingsV1PastSaleData
     */
    'displayAddress'?: string | null;
    /**
     * Registered date of the sale
     * @type {string}
     * @memberof ListingsV1PastSaleData
     */
    'dateOfSale'?: string | null;
    /**
     * Property sold price
     * @type {number}
     * @memberof ListingsV1PastSaleData
     */
    'soldPrice'?: number | null;
}
/**
 * Encapsulates a listing\'s price information
 * @export
 * @interface ListingsV1PriceDetails
 */
export interface ListingsV1PriceDetails {
    /**
     * Gets or Sets GstOption
     * @type {string}
     * @memberof ListingsV1PriceDetails
     */
    'gstOption'?: ListingsV1PriceDetailsGstOptionEnum;
    /**
     * Gets or Sets PriceType
     * @type {string}
     * @memberof ListingsV1PriceDetails
     */
    'priceType'?: ListingsV1PriceDetailsPriceTypeEnum;
    /**
     * Gets or Sets PriceUnit
     * @type {string}
     * @memberof ListingsV1PriceDetails
     */
    'priceUnit'?: ListingsV1PriceDetailsPriceUnitEnum;
    /**
     * Price of the property
     * @type {number}
     * @memberof ListingsV1PriceDetails
     */
    'price'?: number | null;
    /**
     * Price starting range of the property
     * @type {number}
     * @memberof ListingsV1PriceDetails
     */
    'priceFrom'?: number | null;
    /**
     * Upper price range of the property
     * @type {number}
     * @memberof ListingsV1PriceDetails
     */
    'priceTo'?: number | null;
    /**
     * Display price for the advertisement
     * @type {string}
     * @memberof ListingsV1PriceDetails
     */
    'pricePrefix'?: string | null;
    /**
     * Flag indicating whether the advertiser has chosen to display the property price
     * @type {boolean}
     * @memberof ListingsV1PriceDetails
     */
    'canDisplayPrice'?: boolean | null;
    /**
     * Reasons when price need to be hidden
     * @type {Array<string>}
     * @memberof ListingsV1PriceDetails
     */
    'hiddenReasons'?: Array<ListingsV1PriceDetailsHiddenReasonsEnum>;
    /**
     * A string provided by the Advertiser representing the ByIdListingPriceQueryResult of the Listing e.g. Over $1,000,000   This should be the default price field for client to use
     * @type {string}
     * @memberof ListingsV1PriceDetails
     */
    'displayPrice'?: string | null;
    /**
     * Rental bond
     * @type {number}
     * @memberof ListingsV1PriceDetails
     */
    'bond'?: number | null;
    /**
     * Indicates if this property is under price reduction
     * @type {boolean}
     * @memberof ListingsV1PriceDetails
     */
    'priceReduction'?: boolean | null;
}

export const ListingsV1PriceDetailsGstOptionEnum = {
    Na: 'na',
    Inc: 'inc',
    Ex: 'ex'
} as const;

export type ListingsV1PriceDetailsGstOptionEnum = typeof ListingsV1PriceDetailsGstOptionEnum[keyof typeof ListingsV1PriceDetailsGstOptionEnum];
export const ListingsV1PriceDetailsPriceTypeEnum = {
    Gross: 'gross',
    Net: 'net'
} as const;

export type ListingsV1PriceDetailsPriceTypeEnum = typeof ListingsV1PriceDetailsPriceTypeEnum[keyof typeof ListingsV1PriceDetailsPriceTypeEnum];
export const ListingsV1PriceDetailsPriceUnitEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
} as const;

export type ListingsV1PriceDetailsPriceUnitEnum = typeof ListingsV1PriceDetailsPriceUnitEnum[keyof typeof ListingsV1PriceDetailsPriceUnitEnum];
export const ListingsV1PriceDetailsHiddenReasonsEnum = {
    ByAgency: 'byAgency',
    QldRestriction: 'qldRestriction'
} as const;

export type ListingsV1PriceDetailsHiddenReasonsEnum = typeof ListingsV1PriceDetailsHiddenReasonsEnum[keyof typeof ListingsV1PriceDetailsHiddenReasonsEnum];

/**
 * Property Inspection(s) details
 * @export
 * @interface ListingsV1PropertyInspections
 */
export interface ListingsV1PropertyInspections {
    /**
     * Inspection details for the property. e.g. opening and closing times
     * @type {Array<ListingsV1Inspection>}
     * @memberof ListingsV1PropertyInspections
     */
    'inspections'?: Array<ListingsV1Inspection> | null;
    /**
     * Inspection details for the property. e.g. opening and closing times
     * @type {Array<ListingsV1Inspection>}
     * @memberof ListingsV1PropertyInspections
     */
    'pastInspections'?: Array<ListingsV1Inspection> | null;
    /**
     * True or False indicating whether the inspection is by appointment only
     * @type {boolean}
     * @memberof ListingsV1PropertyInspections
     */
    'isByAppointmentOnly'?: boolean | null;
}
/**
 * Information for the listing provider. e.g. bulkuploader information
 * @export
 * @interface ListingsV1ProviderDetails
 */
export interface ListingsV1ProviderDetails {
    /**
     * Feed provider ID
     * @type {string}
     * @memberof ListingsV1ProviderDetails
     */
    'providerSystem'?: string | null;
    /**
     * Unique ID within provider system
     * @type {string}
     * @memberof ListingsV1ProviderDetails
     */
    'providerAdID'?: string | null;
}
/**
 * The rental detail\'s of the listing in case of it being for rent or leased
 * @export
 * @interface ListingsV1RentalDetails
 */
export interface ListingsV1RentalDetails {
    /**
     * Gets or Sets RentalMethod
     * @type {string}
     * @memberof ListingsV1RentalDetails
     */
    'rentalMethod'?: ListingsV1RentalDetailsRentalMethodEnum;
    /**
     * Gets or Sets Source
     * @type {string}
     * @memberof ListingsV1RentalDetails
     */
    'source'?: ListingsV1RentalDetailsSourceEnum;
    /**
     * The Date the listing was leased. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV1RentalDetails
     */
    'leasedDate'?: string | null;
    /**
     * The last leased price entered by the Advertiser  This price will only be visible if allowed by the Advertiser  and the listing as been leased
     * @type {number}
     * @memberof ListingsV1RentalDetails
     */
    'leasedPrice'?: number | null;
    /**
     * Indicates whether this instance can display price
     * @type {boolean}
     * @memberof ListingsV1RentalDetails
     */
    'canDisplayPrice'?: boolean | null;
    /**
     * The number of months the property was last leased for  This will only be visible if the property has been leased
     * @type {number}
     * @memberof ListingsV1RentalDetails
     */
    'leasedMonths'?: number | null;
    /**
     * Lease term range from
     * @type {number}
     * @memberof ListingsV1RentalDetails
     */
    'termOfLeaseFrom'?: number | null;
    /**
     * Lease term range to
     * @type {number}
     * @memberof ListingsV1RentalDetails
     */
    'termOfLeaseTo'?: number | null;
    /**
     * Outgoing cost of current lease
     * @type {number}
     * @memberof ListingsV1RentalDetails
     */
    'leaseOutgoings'?: number | null;
}

export const ListingsV1RentalDetailsRentalMethodEnum = {
    NotStated: 'notStated',
    Rent: 'rent',
    Share: 'share',
    Holiday: 'holiday',
    Lease: 'lease'
} as const;

export type ListingsV1RentalDetailsRentalMethodEnum = typeof ListingsV1RentalDetailsRentalMethodEnum[keyof typeof ListingsV1RentalDetailsRentalMethodEnum];
export const ListingsV1RentalDetailsSourceEnum = {
    Internal: 'internal',
    External: 'external'
} as const;

export type ListingsV1RentalDetailsSourceEnum = typeof ListingsV1RentalDetailsSourceEnum[keyof typeof ListingsV1RentalDetailsSourceEnum];

/**
 * The sale detail\'s of the listing in case of it being for sale or sold
 * @export
 * @interface ListingsV1SaleDetails
 */
export interface ListingsV1SaleDetails {
    /**
     * Gets or Sets SaleMethod
     * @type {string}
     * @memberof ListingsV1SaleDetails
     */
    'saleMethod'?: ListingsV1SaleDetailsSaleMethodEnum;
    /**
     * 
     * @type {ListingsV1SoldDetails}
     * @memberof ListingsV1SaleDetails
     */
    'soldDetails'?: ListingsV1SoldDetails;
    /**
     * 
     * @type {ListingsV1AuctionDetails}
     * @memberof ListingsV1SaleDetails
     */
    'auctionDetails'?: ListingsV1AuctionDetails;
    /**
     * 
     * @type {ListingsV1TenderDetails}
     * @memberof ListingsV1SaleDetails
     */
    'tenderDetails'?: ListingsV1TenderDetails;
    /**
     * 
     * @type {ListingsV1TenantDetails}
     * @memberof ListingsV1SaleDetails
     */
    'tenantDetails'?: ListingsV1TenantDetails;
    /**
     * Integer value of percentage return on this property or business
     * @type {number}
     * @memberof ListingsV1SaleDetails
     */
    'annualReturn'?: number | null;
    /**
     * Information relating to aspects of the sale, such as required deposit, settlement time
     * @type {string}
     * @memberof ListingsV1SaleDetails
     */
    'saleTerms'?: string | null;
}

export const ListingsV1SaleDetailsSaleMethodEnum = {
    NotStated: 'notStated',
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    Tender: 'tender',
    ExpressionOfInterest: 'expressionOfInterest'
} as const;

export type ListingsV1SaleDetailsSaleMethodEnum = typeof ListingsV1SaleDetailsSaleMethodEnum[keyof typeof ListingsV1SaleDetailsSaleMethodEnum];

/**
 * Sold details in the case of the listing being sold.
 * @export
 * @interface ListingsV1SoldDetails
 */
export interface ListingsV1SoldDetails {
    /**
     * Gets or Sets SoldAction
     * @type {string}
     * @memberof ListingsV1SoldDetails
     */
    'soldAction'?: ListingsV1SoldDetailsSoldActionEnum;
    /**
     * Gets or Sets Source
     * @type {string}
     * @memberof ListingsV1SoldDetails
     */
    'source'?: ListingsV1SoldDetailsSourceEnum;
    /**
     * The last sold price entered by the Advertiser.  This price will only be visible if allowed by the Advertiser  and the listing as been sold
     * @type {number}
     * @memberof ListingsV1SoldDetails
     */
    'soldPrice'?: number | null;
    /**
     * The government recorded sold price sourced from APM
     * @type {number}
     * @memberof ListingsV1SoldDetails
     */
    'governmentRecordedSoldPrice'?: number | null;
    /**
     * The Date the listing was sold. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV1SoldDetails
     */
    'soldDate'?: string | null;
    /**
     * Indicates whether this instance can display price
     * @type {boolean}
     * @memberof ListingsV1SoldDetails
     */
    'canDisplayPrice'?: boolean | null;
}

export const ListingsV1SoldDetailsSoldActionEnum = {
    NotStated: 'notStated',
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    Withdrawn: 'withdrawn',
    SoldPriorToAuction: 'soldPriorToAuction'
} as const;

export type ListingsV1SoldDetailsSoldActionEnum = typeof ListingsV1SoldDetailsSoldActionEnum[keyof typeof ListingsV1SoldDetailsSoldActionEnum];
export const ListingsV1SoldDetailsSourceEnum = {
    Internal: 'internal',
    External: 'external'
} as const;

export type ListingsV1SoldDetailsSourceEnum = typeof ListingsV1SoldDetailsSourceEnum[keyof typeof ListingsV1SoldDetailsSourceEnum];

/**
 * Statement of Information  Regarding sale listing
 * @export
 * @interface ListingsV1StatementOfInformation
 */
export interface ListingsV1StatementOfInformation {
    /**
     * 
     * @type {ListingsV1BasicPrice}
     * @memberof ListingsV1StatementOfInformation
     */
    'estimatedPrice'?: ListingsV1BasicPrice;
    /**
     * 
     * @type {ListingsV1ComparableData}
     * @memberof ListingsV1StatementOfInformation
     */
    'comparableData'?: ListingsV1ComparableData;
    /**
     * 
     * @type {ListingsV1MedianPriceData}
     * @memberof ListingsV1StatementOfInformation
     */
    'suburbMedianPrice'?: ListingsV1MedianPriceData;
    /**
     * Link to the statement of information documentation file
     * @type {string}
     * @memberof ListingsV1StatementOfInformation
     */
    'documentationUrl'?: string | null;
}
/**
 * Tenant Details
 * @export
 * @interface ListingsV1TenantDetails
 */
export interface ListingsV1TenantDetails {
    /**
     * Is tenant lease date variable
     * @type {boolean}
     * @memberof ListingsV1TenantDetails
     */
    'leaseDateVariable'?: boolean | null;
    /**
     * Leasing options available to a prospective tenant
     * @type {string}
     * @memberof ListingsV1TenantDetails
     */
    'leaseOptions'?: string | null;
    /**
     * The from range of the tenant\'s current lease
     * @type {number}
     * @memberof ListingsV1TenantDetails
     */
    'tenantInfoTermOfLeaseFrom'?: number | null;
    /**
     * The to range of the tenant\'s current lease
     * @type {number}
     * @memberof ListingsV1TenantDetails
     */
    'tenantInfoTermOfLeaseTo'?: number | null;
    /**
     * Name of the current tenant of the property
     * @type {string}
     * @memberof ListingsV1TenantDetails
     */
    'tenantName'?: string | null;
    /**
     * Information regarding current rental
     * @type {string}
     * @memberof ListingsV1TenantDetails
     */
    'tenantRentDetails'?: string | null;
    /**
     * The date on which the tenants lease began, or is due to begin. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV1TenantDetails
     */
    'leaseStartDate'?: string | null;
    /**
     * The date on which the tenants lease is due to end. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV1TenantDetails
     */
    'leaseEndDate'?: string | null;
}
/**
 * Tender details
 * @export
 * @interface ListingsV1TenderDetails
 */
export interface ListingsV1TenderDetails {
    /**
     * Tender recipient name
     * @type {string}
     * @memberof ListingsV1TenderDetails
     */
    'tenderRecipientName'?: string | null;
    /**
     * Tender address
     * @type {string}
     * @memberof ListingsV1TenderDetails
     */
    'tenderAddress'?: string | null;
    /**
     * Tender closing date. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV1TenderDetails
     */
    'tenderEndDate'?: string | null;
}
/**
 * Encapsulates the parts that make up an Address
 * @export
 * @interface ListingsV2AddressParts
 */
export interface ListingsV2AddressParts {
    /**
     * Gets or Sets StateAbbreviation
     * @type {string}
     * @memberof ListingsV2AddressParts
     */
    'stateAbbreviation'?: ListingsV2AddressPartsStateAbbreviationEnum;
    /**
     * Gets or Sets DisplayType
     * @type {string}
     * @memberof ListingsV2AddressParts
     */
    'displayType'?: ListingsV2AddressPartsDisplayTypeEnum;
    /**
     * Street number
     * @type {string}
     * @memberof ListingsV2AddressParts
     */
    'streetNumber'?: string | null;
    /**
     * Unit number.
     * @type {string}
     * @memberof ListingsV2AddressParts
     */
    'unitNumber'?: string | null;
    /**
     * Street address
     * @type {string}
     * @memberof ListingsV2AddressParts
     */
    'street'?: string | null;
    /**
     * Suburb of the address
     * @type {string}
     * @memberof ListingsV2AddressParts
     */
    'suburb'?: string | null;
    /**
     * Domain suburb identifier for address lookup via the domain location api
     * @type {number}
     * @memberof ListingsV2AddressParts
     */
    'suburbId'?: number | null;
    /**
     * Postcode of the address
     * @type {string}
     * @memberof ListingsV2AddressParts
     */
    'postcode'?: string | null;
    /**
     * Advertiser\'s preference in displaying their listing\'s address
     * @type {string}
     * @memberof ListingsV2AddressParts
     */
    'displayAddress'?: string | null;
}

export const ListingsV2AddressPartsStateAbbreviationEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Sa: 'sa',
    Nt: 'nt',
    Tas: 'tas',
    Act: 'act',
    Qld: 'qld',
    Wa: 'wa'
} as const;

export type ListingsV2AddressPartsStateAbbreviationEnum = typeof ListingsV2AddressPartsStateAbbreviationEnum[keyof typeof ListingsV2AddressPartsStateAbbreviationEnum];
export const ListingsV2AddressPartsDisplayTypeEnum = {
    FullAddress: 'fullAddress',
    StreetAndSuburb: 'streetAndSuburb',
    SuburbOnly: 'suburbOnly',
    RegionOnly: 'regionOnly',
    AreaOnly: 'areaOnly',
    StateOnly: 'stateOnly'
} as const;

export type ListingsV2AddressPartsDisplayTypeEnum = typeof ListingsV2AddressPartsDisplayTypeEnum[keyof typeof ListingsV2AddressPartsDisplayTypeEnum];

/**
 * Encapsulates the listing\'s advertiser identifiers
 * @export
 * @interface ListingsV2AdvertiserIdentifiers
 */
export interface ListingsV2AdvertiserIdentifiers {
    /**
     * Gets or Sets AdvertiserType
     * @type {string}
     * @memberof ListingsV2AdvertiserIdentifiers
     */
    'advertiserType'?: ListingsV2AdvertiserIdentifiersAdvertiserTypeEnum;
    /**
     * Advertiser\'s identifier
     * @type {number}
     * @memberof ListingsV2AdvertiserIdentifiers
     */
    'advertiserId'?: number | null;
    /**
     * Identifier of each contact the advertiser has associated with the listing
     * @type {Array<number>}
     * @memberof ListingsV2AdvertiserIdentifiers
     */
    'contactIds'?: Array<number> | null;
    /**
     * Identifier of each agent the advertiser has associated with the listing
     * @type {Array<string>}
     * @memberof ListingsV2AdvertiserIdentifiers
     */
    'agentIds'?: Array<string> | null;
    /**
     * Identifier of each conjunctional contact associated with the listing
     * @type {Array<number>}
     * @memberof ListingsV2AdvertiserIdentifiers
     */
    'conjunctionContactIds'?: Array<number> | null;
    /**
     * Identifier of each conjunctional agent associated with the listing
     * @type {Array<string>}
     * @memberof ListingsV2AdvertiserIdentifiers
     */
    'conjunctionAgentIds'?: Array<string> | null;
}

export const ListingsV2AdvertiserIdentifiersAdvertiserTypeEnum = {
    Agency: 'agency',
    Private: 'private'
} as const;

export type ListingsV2AdvertiserIdentifiersAdvertiserTypeEnum = typeof ListingsV2AdvertiserIdentifiersAdvertiserTypeEnum[keyof typeof ListingsV2AdvertiserIdentifiersAdvertiserTypeEnum];

/**
 * The detail\'s of the auction in case of a listing for sale being auctioned or sold by auction
 * @export
 * @interface ListingsV2AuctionDetails
 */
export interface ListingsV2AuctionDetails {
    /**
     * 
     * @type {ListingsV2AuctionSchedule}
     * @memberof ListingsV2AuctionDetails
     */
    'auctionSchedule'?: ListingsV2AuctionSchedule;
    /**
     * The auctioned price entered by the Advertiser.  This price will only be visible if allowed by the Advertiser  and the listing as been auctioned
     * @type {number}
     * @memberof ListingsV2AuctionDetails
     */
    'auctionedPrice'?: number | null;
    /**
     * The listing\'s last auctioned date and time specified by the Advertiser.  This will only be visible if the listing has been auctioned.  DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV2AuctionDetails
     */
    'auctionedDate'?: string | null;
}
/**
 * Encapsulates the details of a Property being Auctioned.
 * @export
 * @interface ListingsV2AuctionSchedule
 */
export interface ListingsV2AuctionSchedule {
    /**
     * Description and location of the auction provided by advertiser
     * @type {string}
     * @memberof ListingsV2AuctionSchedule
     */
    'locationDescription'?: string | null;
    /**
     * Opening date and time of the auction. e.g. 2015-01-01T12:00:00  DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV2AuctionSchedule
     */
    'openingDateTime'?: string | null;
    /**
     * Terms of the auction
     * @type {string}
     * @memberof ListingsV2AuctionSchedule
     */
    'terms'?: string | null;
    /**
     * On-line URL of the auction
     * @type {string}
     * @memberof ListingsV2AuctionSchedule
     */
    'url'?: string | null;
}
/**
 * APM Identifiers
 * @export
 * @interface ListingsV2AustralianPropertyMonitorsIdentifiers
 */
export interface ListingsV2AustralianPropertyMonitorsIdentifiers {
    /**
     * APM address identifier
     * @type {number}
     * @memberof ListingsV2AustralianPropertyMonitorsIdentifiers
     */
    'addressId'?: number | null;
    /**
     * APM street identifier
     * @type {number}
     * @memberof ListingsV2AustralianPropertyMonitorsIdentifiers
     */
    'streetId'?: number | null;
    /**
     * APM suburb identifier
     * @type {number}
     * @memberof ListingsV2AustralianPropertyMonitorsIdentifiers
     */
    'suburbId'?: number | null;
    /**
     * APM cadastre identifier
     * @type {number}
     * @memberof ListingsV2AustralianPropertyMonitorsIdentifiers
     */
    'cadastreId'?: number | null;
    /**
     * APM postcode identifier
     * @type {number}
     * @memberof ListingsV2AustralianPropertyMonitorsIdentifiers
     */
    'postcodeId'?: number | null;
    /**
     * State identifier
     * @type {number}
     * @memberof ListingsV2AustralianPropertyMonitorsIdentifiers
     */
    'stateId'?: number | null;
    /**
     * APM State
     * @type {string}
     * @memberof ListingsV2AustralianPropertyMonitorsIdentifiers
     */
    'state'?: string | null;
    /**
     * APM property type identifier
     * @type {number}
     * @memberof ListingsV2AustralianPropertyMonitorsIdentifiers
     */
    'propertyTypeId'?: number | null;
    /**
     * APM property category type identifier
     * @type {number}
     * @memberof ListingsV2AustralianPropertyMonitorsIdentifiers
     */
    'propertyTypeCategoryId'?: number | null;
    /**
     * APM washed and standardized address component for the street number,   (including any prefixes, suffixed and composite numbers e.g. \\\"2-4a\\\")
     * @type {string}
     * @memberof ListingsV2AustralianPropertyMonitorsIdentifiers
     */
    'streetNumber'?: string | null;
}
/**
 * Basic price information
 * @export
 * @interface ListingsV2BasicPrice
 */
export interface ListingsV2BasicPrice {
    /**
     * Lowest price the property is expected to sell/rent for to set search price.
     * @type {number}
     * @memberof ListingsV2BasicPrice
     */
    'from'?: number | null;
    /**
     * Highest price the property is expected to sell/rent for to set search price.
     * @type {number}
     * @memberof ListingsV2BasicPrice
     */
    'to'?: number | null;
}
/**
 * Information regarding the past comparable property sales that influenced the setting of the estimation price
 * @export
 * @interface ListingsV2ComparableData
 */
export interface ListingsV2ComparableData {
    /**
     * Comparable properties that are of a similar standard or condition to the property for sale
     * @type {Array<ListingsV2PastSaleData>}
     * @memberof ListingsV2ComparableData
     */
    'comparableProperty'?: Array<ListingsV2PastSaleData> | null;
    /**
     * Text description if there are less than three comparable sales available
     * @type {string}
     * @memberof ListingsV2ComparableData
     */
    'declarationText'?: string | null;
}
/**
 * Encapsulates the details of a geo location, long/lat
 * @export
 * @interface ListingsV2GeoLocation
 */
export interface ListingsV2GeoLocation {
    /**
     * Latitude of the property
     * @type {number}
     * @memberof ListingsV2GeoLocation
     */
    'latitude'?: number | null;
    /**
     * Longitude of the property
     * @type {number}
     * @memberof ListingsV2GeoLocation
     */
    'longitude'?: number | null;
}
/**
 * Encapsulates the details of a Listing\'s Inspection
 * @export
 * @interface ListingsV2Inspection
 */
export interface ListingsV2Inspection {
    /**
     * Gets or Sets Recurrence
     * @type {string}
     * @memberof ListingsV2Inspection
     */
    'recurrence'?: ListingsV2InspectionRecurrenceEnum;
    /**
     * Opening date and time of the inspection. e.g. 2015-01-01T12:00:00.  Not provided by bulk uploaded listings, in these cases refer to the  inspection description field. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV2Inspection
     */
    'openingDateTime'?: string | null;
    /**
     * Closing date and time of the inspection. e.g. 2015-01-01T12:00:00  Not provided by bulk uploaded listings, in these cases refer to the  inspection description field. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV2Inspection
     */
    'closingDateTime'?: string | null;
    /**
     * Description of the inspection provided by the Advertiser.  When listings are bulk uploaded, inspection times are provided as a string.  Other inspection details will not be provided
     * @type {string}
     * @memberof ListingsV2Inspection
     */
    'description'?: string | null;
}

export const ListingsV2InspectionRecurrenceEnum = {
    None: 'none',
    Weekly: 'weekly'
} as const;

export type ListingsV2InspectionRecurrenceEnum = typeof ListingsV2InspectionRecurrenceEnum[keyof typeof ListingsV2InspectionRecurrenceEnum];

/**
 * Represents a Property Listing
 * @export
 * @interface ListingsV2Listing
 */
export interface ListingsV2Listing {
    /**
     * Gets or Sets Objective
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'objective'?: ListingsV2ListingObjectiveEnum;
    /**
     * Gets or Sets Status
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'status'?: ListingsV2ListingStatusEnum;
    /**
     * Gets or Sets SaleMode
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'saleMode'?: ListingsV2ListingSaleModeEnum;
    /**
     * Gets or Sets Channel
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'channel'?: ListingsV2ListingChannelEnum;
    /**
     * The identifier which uniquely identifies the listing.
     * @type {number}
     * @memberof ListingsV2Listing
     */
    'id': number;
    /**
     * 
     * @type {ListingsV2AddressParts}
     * @memberof ListingsV2Listing
     */
    'addressParts'?: ListingsV2AddressParts;
    /**
     * 
     * @type {ListingsV2AdvertiserIdentifiers}
     * @memberof ListingsV2Listing
     */
    'advertiserIdentifiers': ListingsV2AdvertiserIdentifiers;
    /**
     * 
     * @type {ListingsV2AustralianPropertyMonitorsIdentifiers}
     * @memberof ListingsV2Listing
     */
    'apmIdentifiers'?: ListingsV2AustralianPropertyMonitorsIdentifiers;
    /**
     * Total number of bathrooms in the property
     * @type {number}
     * @memberof ListingsV2Listing
     */
    'bathrooms'?: number | null;
    /**
     * Total number of bedrooms in the property; Studio apartments have a value of \\\"0\\\"
     * @type {number}
     * @memberof ListingsV2Listing
     */
    'bedrooms'?: number | null;
    /**
     * The building area display value of the property e.g. 160 ha
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'buildingArea'?: string | null;
    /**
     * The properties building area in square meters
     * @type {number}
     * @memberof ListingsV2Listing
     */
    'buildingAreaSqm'?: number | null;
    /**
     * Total number of car spaces in the property.
     * @type {number}
     * @memberof ListingsV2Listing
     */
    'carspaces'?: number | null;
    /**
     * The date the property is available. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'dateAvailable'?: string | null;
    /**
     * The date/time the listing was created. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'dateCreated'?: string | null;
    /**
     * The date/time the listing had major update. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'dateUpdated'?: string | null;
    /**
     * When minor update applied to the listing. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'dateMinorUpdated'?: string | null;
    /**
     * The date/time the listing was purged. It\'s only returned for archived listings. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'datePurged'?: string | null;
    /**
     * The date/time last listed. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'dateListed'?: string | null;
    /**
     * The long description of the property provided by the advertiser.
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'description'?: string | null;
    /**
     * The ID of the development project - null if no associated project
     * @type {number}
     * @memberof ListingsV2Listing
     */
    'devProjectId'?: number | null;
    /**
     * Energy Efficiency Rating value for ACT properties
     * @type {number}
     * @memberof ListingsV2Listing
     */
    'energyEfficiencyRating'?: number | null;
    /**
     * The property features specified by the advertiser
     * @type {Array<string>}
     * @memberof ListingsV2Listing
     */
    'features'?: Array<string> | null;
    /**
     * 
     * @type {ListingsV2GeoLocation}
     * @memberof ListingsV2Listing
     */
    'geoLocation'?: ListingsV2GeoLocation;
    /**
     * The short description of the property provided by the advertiser.
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'headline'?: string | null;
    /**
     * 
     * @type {ListingsV2PropertyInspections}
     * @memberof ListingsV2Listing
     */
    'inspectionDetails'?: ListingsV2PropertyInspections;
    /**
     * Indicates whether the property is a new development
     * @type {boolean}
     * @memberof ListingsV2Listing
     */
    'isNewDevelopment'?: boolean | null;
    /**
     * The land area display string for the property e.g. 160 sqm
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'landArea'?: string | null;
    /**
     * The properties land area in square meters
     * @type {number}
     * @memberof ListingsV2Listing
     */
    'landAreaSqm'?: number | null;
    /**
     * The media associated with the property provided by the advertiser
     * @type {Array<ListingsV2ListingMedia>}
     * @memberof ListingsV2Listing
     */
    'media'?: Array<ListingsV2ListingMedia> | null;
    /**
     * 
     * @type {ListingsV2PriceDetails}
     * @memberof ListingsV2Listing
     */
    'priceDetails'?: ListingsV2PriceDetails;
    /**
     * The identifier which uniquely identifies the property being advertised.  This may be empty if the Address of property is poorly described
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'propertyId'?: string | null;
    /**
     * Types of the property
     * @type {Array<string>}
     * @memberof ListingsV2Listing
     */
    'propertyTypes': Array<ListingsV2ListingPropertyTypesEnum>;
    /**
     * 
     * @type {ListingsV2ProviderDetails}
     * @memberof ListingsV2Listing
     */
    'providerDetails'?: ListingsV2ProviderDetails;
    /**
     * 
     * @type {ListingsV2RentalDetails}
     * @memberof ListingsV2Listing
     */
    'rentalDetails'?: ListingsV2RentalDetails;
    /**
     * 
     * @type {ListingsV2SaleDetails}
     * @memberof ListingsV2Listing
     */
    'saleDetails'?: ListingsV2SaleDetails;
    /**
     * Indicates if the property has been withdrawn from the market  The value will be \'true\' When a listing is taken off market without being sold or leased.
     * @type {boolean}
     * @memberof ListingsV2Listing
     */
    'isWithdrawn'?: boolean | null;
    /**
     * Listing SEO URL
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'seoUrl'?: string | null;
    /**
     * The Listing\'s Virtual Tour URL.
     * @type {string}
     * @memberof ListingsV2Listing
     */
    'virtualTourUrl'?: string | null;
    /**
     * If Homepass is enabled for the listing (agency)
     * @type {boolean}
     * @memberof ListingsV2Listing
     */
    'homepassEnabled'?: boolean | null;
    /**
     * 
     * @type {ListingsV2StatementOfInformation}
     * @memberof ListingsV2Listing
     */
    'statementOfInformation'?: ListingsV2StatementOfInformation;
    /**
     * Number of dwellings for current listing
     * @type {number}
     * @memberof ListingsV2Listing
     */
    'numberOfDwellings'?: number | null;
    /**
     * Highlight items for the listing
     * @type {Array<string>}
     * @memberof ListingsV2Listing
     */
    'highlights'?: Array<string> | null;
}

export const ListingsV2ListingObjectiveEnum = {
    Sale: 'sale',
    Rent: 'rent'
} as const;

export type ListingsV2ListingObjectiveEnum = typeof ListingsV2ListingObjectiveEnum[keyof typeof ListingsV2ListingObjectiveEnum];
export const ListingsV2ListingStatusEnum = {
    Unknown: 'unknown',
    Archived: 'archived',
    UnderOffer: 'underOffer',
    Sold: 'sold',
    Leased: 'leased',
    NewDevelopment: 'newDevelopment',
    RecentlyUpdated: 'recentlyUpdated',
    New: 'new',
    Live: 'live',
    Pending: 'pending',
    DepositTaken: 'depositTaken'
} as const;

export type ListingsV2ListingStatusEnum = typeof ListingsV2ListingStatusEnum[keyof typeof ListingsV2ListingStatusEnum];
export const ListingsV2ListingSaleModeEnum = {
    Buy: 'buy',
    Rent: 'rent',
    Share: 'share',
    Sold: 'sold',
    Leased: 'leased',
    Archived: 'archived'
} as const;

export type ListingsV2ListingSaleModeEnum = typeof ListingsV2ListingSaleModeEnum[keyof typeof ListingsV2ListingSaleModeEnum];
export const ListingsV2ListingChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
} as const;

export type ListingsV2ListingChannelEnum = typeof ListingsV2ListingChannelEnum[keyof typeof ListingsV2ListingChannelEnum];
export const ListingsV2ListingPropertyTypesEnum = {
    Unknown: 'unknown',
    AcreageSemiRural: 'acreageSemiRural',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    BlockOfUnits: 'blockOfUnits',
    Carspace: 'carspace',
    DairyFarming: 'dairyFarming',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Duplex: 'duplex',
    Farm: 'farm',
    FishingForestry: 'fishingForestry',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HotelLeisure: 'hotelLeisure',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    IndustrialWarehouse: 'industrialWarehouse',
    IrrigationServices: 'irrigationServices',
    NewLand: 'newLand',
    Livestock: 'livestock',
    International: 'international',
    MedicalConsulting: 'medicalConsulting',
    NewApartments: 'newApartments',
    Offices: 'offices',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    Retail: 'retail',
    Retirement: 'retirement',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    SemiDetached: 'semiDetached',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    Studio: 'studio',
    Terrace: 'terrace',
    Townhouse: 'townhouse',
    VacantLand: 'vacantLand',
    Villa: 'villa',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
} as const;

export type ListingsV2ListingPropertyTypesEnum = typeof ListingsV2ListingPropertyTypesEnum[keyof typeof ListingsV2ListingPropertyTypesEnum];

/**
 * Encapsulates media associated with a Listing
 * @export
 * @interface ListingsV2ListingMedia
 */
export interface ListingsV2ListingMedia {
    /**
     * Gets or Sets Category
     * @type {string}
     * @memberof ListingsV2ListingMedia
     */
    'category'?: ListingsV2ListingMediaCategoryEnum;
    /**
     * Gets or Sets Type
     * @type {string}
     * @memberof ListingsV2ListingMedia
     */
    'type'?: ListingsV2ListingMediaTypeEnum;
    /**
     * The URL to the property media
     * @type {string}
     * @memberof ListingsV2ListingMedia
     */
    'url': string;
}

export const ListingsV2ListingMediaCategoryEnum = {
    Image: 'image',
    Video: 'video',
    Others: 'others'
} as const;

export type ListingsV2ListingMediaCategoryEnum = typeof ListingsV2ListingMediaCategoryEnum[keyof typeof ListingsV2ListingMediaCategoryEnum];
export const ListingsV2ListingMediaTypeEnum = {
    Photo: 'photo',
    Mp4: 'mp4',
    Youtube: 'youtube',
    Floorplan: 'floorplan',
    Vimeo: 'vimeo',
    NotSpecified: 'notSpecified'
} as const;

export type ListingsV2ListingMediaTypeEnum = typeof ListingsV2ListingMediaTypeEnum[keyof typeof ListingsV2ListingMediaTypeEnum];

/**
 * Information regarding median house/unit price   for the suburb
 * @export
 * @interface ListingsV2MedianPriceData
 */
export interface ListingsV2MedianPriceData {
    /**
     * Gets or Sets PriceType
     * @type {string}
     * @memberof ListingsV2MedianPriceData
     */
    'priceType'?: ListingsV2MedianPriceDataPriceTypeEnum;
    /**
     * Name of the suburb median price is based on.
     * @type {string}
     * @memberof ListingsV2MedianPriceData
     */
    'suburb'?: string | null;
    /**
     * Postcode of the suburb
     * @type {string}
     * @memberof ListingsV2MedianPriceData
     */
    'postcode'?: string | null;
    /**
     * Median price for the suburb.
     * @type {number}
     * @memberof ListingsV2MedianPriceData
     */
    'medianPrice'?: number | null;
    /**
     * Where median price data comes from
     * @type {string}
     * @memberof ListingsV2MedianPriceData
     */
    'source'?: string | null;
    /**
     * Start date of the median price source time period
     * @type {string}
     * @memberof ListingsV2MedianPriceData
     */
    'sourceDateFrom'?: string | null;
    /**
     * End date of the median price source time period
     * @type {string}
     * @memberof ListingsV2MedianPriceData
     */
    'sourceDateTo'?: string | null;
    /**
     * The collection date of the median price source
     * @type {string}
     * @memberof ListingsV2MedianPriceData
     */
    'sourceCollectionDate'?: string | null;
}

export const ListingsV2MedianPriceDataPriceTypeEnum = {
    House: 'house',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    VacantLand: 'vacantLand'
} as const;

export type ListingsV2MedianPriceDataPriceTypeEnum = typeof ListingsV2MedianPriceDataPriceTypeEnum[keyof typeof ListingsV2MedianPriceDataPriceTypeEnum];

/**
 * Information for past property sales
 * @export
 * @interface ListingsV2PastSaleData
 */
export interface ListingsV2PastSaleData {
    /**
     * Property unit number
     * @type {string}
     * @memberof ListingsV2PastSaleData
     */
    'unitNumber'?: string | null;
    /**
     * Property street number
     * @type {string}
     * @memberof ListingsV2PastSaleData
     */
    'streetNumber'?: string | null;
    /**
     * Property Street name
     * @type {string}
     * @memberof ListingsV2PastSaleData
     */
    'street'?: string | null;
    /**
     * Property suburb name
     * @type {string}
     * @memberof ListingsV2PastSaleData
     */
    'suburb'?: string | null;
    /**
     * Property postcode
     * @type {string}
     * @memberof ListingsV2PastSaleData
     */
    'postcode'?: string | null;
    /**
     * Property state
     * @type {string}
     * @memberof ListingsV2PastSaleData
     */
    'state'?: string | null;
    /**
     * display formatted address
     * @type {string}
     * @memberof ListingsV2PastSaleData
     */
    'displayAddress'?: string | null;
    /**
     * Registered date of the sale
     * @type {string}
     * @memberof ListingsV2PastSaleData
     */
    'dateOfSale'?: string | null;
    /**
     * Property sold price
     * @type {number}
     * @memberof ListingsV2PastSaleData
     */
    'soldPrice'?: number | null;
}
/**
 * PDF file
 * @export
 * @interface ListingsV2PdfUpload
 */
export interface ListingsV2PdfUpload {
    /**
     * Gets or Sets Type
     * @type {string}
     * @memberof ListingsV2PdfUpload
     */
    'type'?: ListingsV2PdfUploadTypeEnum;
    /**
     * Url of the PDF
     * @type {string}
     * @memberof ListingsV2PdfUpload
     */
    'url'?: string | null;
    /**
     * Original file name of the PDF
     * @type {string}
     * @memberof ListingsV2PdfUpload
     */
    'filename'?: string | null;
    /**
     * Description of the PDF
     * @type {string}
     * @memberof ListingsV2PdfUpload
     */
    'fileDescription'?: string | null;
}

export const ListingsV2PdfUploadTypeEnum = {
    CommercialPdf: 'commercialPdf',
    NewDevBrochurePdf: 'newDevBrochurePdf',
    FloorplanPdf: 'floorplanPdf',
    DevProjectPdf: 'devProjectPdf',
    DevProjectMasterplanPdf: 'devProjectMasterplanPdf'
} as const;

export type ListingsV2PdfUploadTypeEnum = typeof ListingsV2PdfUploadTypeEnum[keyof typeof ListingsV2PdfUploadTypeEnum];

/**
 * Encapsulates a listing\'s price information
 * @export
 * @interface ListingsV2PriceDetails
 */
export interface ListingsV2PriceDetails {
    /**
     * Gets or Sets GstOption
     * @type {string}
     * @memberof ListingsV2PriceDetails
     */
    'gstOption'?: ListingsV2PriceDetailsGstOptionEnum;
    /**
     * Gets or Sets PriceType
     * @type {string}
     * @memberof ListingsV2PriceDetails
     */
    'priceType'?: ListingsV2PriceDetailsPriceTypeEnum;
    /**
     * Gets or Sets PriceUnit
     * @type {string}
     * @memberof ListingsV2PriceDetails
     */
    'priceUnit'?: ListingsV2PriceDetailsPriceUnitEnum;
    /**
     * Price of the property
     * @type {number}
     * @memberof ListingsV2PriceDetails
     */
    'price'?: number | null;
    /**
     * Price starting range of the property
     * @type {number}
     * @memberof ListingsV2PriceDetails
     */
    'priceFrom'?: number | null;
    /**
     * Upper price range of the property
     * @type {number}
     * @memberof ListingsV2PriceDetails
     */
    'priceTo'?: number | null;
    /**
     * Display price for the advertisement
     * @type {string}
     * @memberof ListingsV2PriceDetails
     */
    'pricePrefix'?: string | null;
    /**
     * Flag indicating whether the advertiser has chosen to display the property price
     * @type {boolean}
     * @memberof ListingsV2PriceDetails
     */
    'canDisplayPrice'?: boolean | null;
    /**
     * Reasons when price need to be hidden
     * @type {Array<string>}
     * @memberof ListingsV2PriceDetails
     */
    'hiddenReasons'?: Array<ListingsV2PriceDetailsHiddenReasonsEnum>;
    /**
     * A string provided by the Advertiser representing the ByIdListingPriceQueryResult of the Listing e.g. Over $1,000,000   This should be the default price field for client to use
     * @type {string}
     * @memberof ListingsV2PriceDetails
     */
    'displayPrice'?: string | null;
    /**
     * Rental bond
     * @type {number}
     * @memberof ListingsV2PriceDetails
     */
    'bond'?: number | null;
    /**
     * Indicates if this property is under price reduction
     * @type {boolean}
     * @memberof ListingsV2PriceDetails
     */
    'priceReduction'?: boolean | null;
}

export const ListingsV2PriceDetailsGstOptionEnum = {
    Na: 'na',
    Inc: 'inc',
    Ex: 'ex'
} as const;

export type ListingsV2PriceDetailsGstOptionEnum = typeof ListingsV2PriceDetailsGstOptionEnum[keyof typeof ListingsV2PriceDetailsGstOptionEnum];
export const ListingsV2PriceDetailsPriceTypeEnum = {
    Gross: 'gross',
    Net: 'net'
} as const;

export type ListingsV2PriceDetailsPriceTypeEnum = typeof ListingsV2PriceDetailsPriceTypeEnum[keyof typeof ListingsV2PriceDetailsPriceTypeEnum];
export const ListingsV2PriceDetailsPriceUnitEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
} as const;

export type ListingsV2PriceDetailsPriceUnitEnum = typeof ListingsV2PriceDetailsPriceUnitEnum[keyof typeof ListingsV2PriceDetailsPriceUnitEnum];
export const ListingsV2PriceDetailsHiddenReasonsEnum = {
    ByAgency: 'byAgency',
    QldRestriction: 'qldRestriction'
} as const;

export type ListingsV2PriceDetailsHiddenReasonsEnum = typeof ListingsV2PriceDetailsHiddenReasonsEnum[keyof typeof ListingsV2PriceDetailsHiddenReasonsEnum];

/**
 * A structured representation of a Project
 * @export
 * @interface ListingsV2Project
 */
export interface ListingsV2Project {
    /**
     * Gets or Sets ProjectProfileType
     * @type {string}
     * @memberof ListingsV2Project
     */
    'projectProfileType'?: ListingsV2ProjectProjectProfileTypeEnum;
    /**
     * Gets or Sets EstimatedCompletionTertile
     * @type {string}
     * @memberof ListingsV2Project
     */
    'estimatedCompletionTertile'?: ListingsV2ProjectEstimatedCompletionTertileEnum;
    /**
     * Gets or Sets Category
     * @type {string}
     * @memberof ListingsV2Project
     */
    'category'?: ListingsV2ProjectCategoryEnum;
    /**
     * Project ID
     * @type {number}
     * @memberof ListingsV2Project
     */
    'id'?: number | null;
    /**
     * Project Name
     * @type {string}
     * @memberof ListingsV2Project
     */
    'name'?: string | null;
    /**
     * Start date. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV2Project
     */
    'startDate'?: string | null;
    /**
     * End date.DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV2Project
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {ListingsV2ProjectAddressParts}
     * @memberof ListingsV2Project
     */
    'address'?: ListingsV2ProjectAddressParts;
    /**
     * 
     * @type {ListingsV2ProjectAddressParts}
     * @memberof ListingsV2Project
     */
    'viewingAddress'?: ListingsV2ProjectAddressParts;
    /**
     * Property types available at the project.
     * @type {Array<string>}
     * @memberof ListingsV2Project
     */
    'propertyTypes'?: Array<ListingsV2ProjectPropertyTypesEnum>;
    /**
     * 
     * @type {ListingsV2ProjectAddressParts}
     * @memberof ListingsV2Project
     */
    'displayableAddress'?: ListingsV2ProjectAddressParts;
    /**
     * Enquiry email address
     * @type {string}
     * @memberof ListingsV2Project
     */
    'enquiryEmailAddress'?: string | null;
    /**
     * 
     * @type {ListingsV2AdvertiserIdentifiers}
     * @memberof ListingsV2Project
     */
    'advertiserIdentifiers'?: ListingsV2AdvertiserIdentifiers;
    /**
     * 
     * @type {ListingsV2ProviderDetails}
     * @memberof ListingsV2Project
     */
    'providerDetails'?: ListingsV2ProviderDetails;
    /**
     * Images and videos
     * @type {Array<ListingsV2ProjectMedia>}
     * @memberof ListingsV2Project
     */
    'media'?: Array<ListingsV2ProjectMedia> | null;
    /**
     * Project URL
     * @type {string}
     * @memberof ListingsV2Project
     */
    'projectUrl'?: string | null;
    /**
     * Headline
     * @type {string}
     * @memberof ListingsV2Project
     */
    'headline'?: string | null;
    /**
     * Tag line
     * @type {string}
     * @memberof ListingsV2Project
     */
    'tagline'?: string | null;
    /**
     * The \'last updated\' date to show to customers. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV2Project
     */
    'displayAsLastUpdated'?: string | null;
    /**
     * Last updated by
     * @type {string}
     * @memberof ListingsV2Project
     */
    'modifiedBy'?: string | null;
    /**
     * Last updated, used for auditing. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV2Project
     */
    'modifiedDate'?: string | null;
    /**
     * Created by
     * @type {string}
     * @memberof ListingsV2Project
     */
    'createdBy'?: string | null;
    /**
     * Created date. DateTime is in AEST (Australian Eastern Standard Time) or AEDT (Australian Eastern Daylight Time) timezone.
     * @type {string}
     * @memberof ListingsV2Project
     */
    'createdDate'?: string | null;
    /**
     * Background colour
     * @type {string}
     * @memberof ListingsV2Project
     */
    'backgroundColour'?: string | null;
    /**
     * Description
     * @type {string}
     * @memberof ListingsV2Project
     */
    'description'?: string | null;
    /**
     * If inspections require an appointment.
     * @type {boolean}
     * @memberof ListingsV2Project
     */
    'appointmentRequired'?: boolean | null;
    /**
     * Features
     * @type {Array<string>}
     * @memberof ListingsV2Project
     */
    'features'?: Array<string> | null;
    /**
     * Price from
     * @type {number}
     * @memberof ListingsV2Project
     */
    'priceFrom'?: number | null;
    /**
     * Price to
     * @type {number}
     * @memberof ListingsV2Project
     */
    'priceTo'?: number | null;
    /**
     * Banner URL
     * @type {string}
     * @memberof ListingsV2Project
     */
    'bannerUrl'?: string | null;
    /**
     * Big banner URL
     * @type {string}
     * @memberof ListingsV2Project
     */
    'bigBannerUrl'?: string | null;
    /**
     * Small banner URL
     * @type {string}
     * @memberof ListingsV2Project
     */
    'smallBannerUrl'?: string | null;
    /**
     * Logo URL
     * @type {string}
     * @memberof ListingsV2Project
     */
    'logoUrl'?: string | null;
    /**
     * PDF files, such as brochures etc.
     * @type {Array<ListingsV2PdfUpload>}
     * @memberof ListingsV2Project
     */
    'pdfs'?: Array<ListingsV2PdfUpload> | null;
    /**
     * 
     * @type {ListingsV2PropertyInspections}
     * @memberof ListingsV2Project
     */
    'inspectionDetails'?: ListingsV2PropertyInspections;
    /**
     * Maximum number of floors
     * @type {number}
     * @memberof ListingsV2Project
     */
    'numberOfFloors'?: number | null;
    /**
     * Minimum number of floors
     * @type {number}
     * @memberof ListingsV2Project
     */
    'minNumberOfFloors'?: number | null;
    /**
     * Minimum building height
     * @type {number}
     * @memberof ListingsV2Project
     */
    'minBuildingHeight'?: number | null;
    /**
     * Maximum building height
     * @type {number}
     * @memberof ListingsV2Project
     */
    'maxBuildingHeight'?: number | null;
    /**
     * Number of buildings
     * @type {number}
     * @memberof ListingsV2Project
     */
    'numberOfBuildings'?: number | null;
    /**
     * Number of apartments
     * @type {number}
     * @memberof ListingsV2Project
     */
    'numberOfApartments'?: number | null;
    /**
     * Estimated completion date. DateTime in a local timezone.
     * @type {string}
     * @memberof ListingsV2Project
     */
    'estimatedCompletionDate'?: string | null;
    /**
     * Lowest child listing price
     * @type {number}
     * @memberof ListingsV2Project
     */
    'startingPrice'?: number | null;
    /**
     * Child listing identifiers.
     * @type {Array<number>}
     * @memberof ListingsV2Project
     */
    'childListingIds'?: Array<number> | null;
    /**
     * Linked project identifiers.
     * @type {Array<number>}
     * @memberof ListingsV2Project
     */
    'linkedProjectIds'?: Array<number> | null;
}

export const ListingsV2ProjectProjectProfileTypeEnum = {
    NoProfile: 'noProfile',
    ProjectProfileStandard: 'projectProfileStandard',
    ProjectProfilePremium: 'projectProfilePremium'
} as const;

export type ListingsV2ProjectProjectProfileTypeEnum = typeof ListingsV2ProjectProjectProfileTypeEnum[keyof typeof ListingsV2ProjectProjectProfileTypeEnum];
export const ListingsV2ProjectEstimatedCompletionTertileEnum = {
    Early: 'early',
    Mid: 'mid',
    Late: 'late'
} as const;

export type ListingsV2ProjectEstimatedCompletionTertileEnum = typeof ListingsV2ProjectEstimatedCompletionTertileEnum[keyof typeof ListingsV2ProjectEstimatedCompletionTertileEnum];
export const ListingsV2ProjectCategoryEnum = {
    HouseAndLand: 'houseAndLand',
    Apartment: 'apartment',
    Retirement: 'retirement'
} as const;

export type ListingsV2ProjectCategoryEnum = typeof ListingsV2ProjectCategoryEnum[keyof typeof ListingsV2ProjectCategoryEnum];
export const ListingsV2ProjectPropertyTypesEnum = {
    Unknown: 'unknown',
    AcreageSemiRural: 'acreageSemiRural',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    BlockOfUnits: 'blockOfUnits',
    Carspace: 'carspace',
    DairyFarming: 'dairyFarming',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Duplex: 'duplex',
    Farm: 'farm',
    FishingForestry: 'fishingForestry',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HotelLeisure: 'hotelLeisure',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    IndustrialWarehouse: 'industrialWarehouse',
    IrrigationServices: 'irrigationServices',
    NewLand: 'newLand',
    Livestock: 'livestock',
    International: 'international',
    MedicalConsulting: 'medicalConsulting',
    NewApartments: 'newApartments',
    Offices: 'offices',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    Retail: 'retail',
    Retirement: 'retirement',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    SemiDetached: 'semiDetached',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    Studio: 'studio',
    Terrace: 'terrace',
    Townhouse: 'townhouse',
    VacantLand: 'vacantLand',
    Villa: 'villa',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
} as const;

export type ListingsV2ProjectPropertyTypesEnum = typeof ListingsV2ProjectPropertyTypesEnum[keyof typeof ListingsV2ProjectPropertyTypesEnum];

/**
 * Project address parts
 * @export
 * @interface ListingsV2ProjectAddressParts
 */
export interface ListingsV2ProjectAddressParts {
    /**
     * Gets or Sets StateAbbreviation
     * @type {string}
     * @memberof ListingsV2ProjectAddressParts
     */
    'stateAbbreviation'?: ListingsV2ProjectAddressPartsStateAbbreviationEnum;
    /**
     * Gets or Sets DisplayType
     * @type {string}
     * @memberof ListingsV2ProjectAddressParts
     */
    'displayType'?: ListingsV2ProjectAddressPartsDisplayTypeEnum;
    /**
     * Street number
     * @type {string}
     * @memberof ListingsV2ProjectAddressParts
     */
    'streetNumber'?: string | null;
    /**
     * Unit number.
     * @type {string}
     * @memberof ListingsV2ProjectAddressParts
     */
    'unitNumber'?: string | null;
    /**
     * Street address
     * @type {string}
     * @memberof ListingsV2ProjectAddressParts
     */
    'street'?: string | null;
    /**
     * Suburb of the address
     * @type {string}
     * @memberof ListingsV2ProjectAddressParts
     */
    'suburb'?: string | null;
    /**
     * Domain suburb identifier for address lookup via the domain location api
     * @type {number}
     * @memberof ListingsV2ProjectAddressParts
     */
    'suburbId'?: number | null;
    /**
     * Postcode of the address
     * @type {string}
     * @memberof ListingsV2ProjectAddressParts
     */
    'postcode'?: string | null;
    /**
     * Advertiser\'s preference in displaying their listing\'s address
     * @type {string}
     * @memberof ListingsV2ProjectAddressParts
     */
    'displayAddress'?: string | null;
    /**
     * Street 2
     * @type {string}
     * @memberof ListingsV2ProjectAddressParts
     */
    'street2'?: string | null;
    /**
     * Latitude
     * @type {number}
     * @memberof ListingsV2ProjectAddressParts
     */
    'latitude'?: number | null;
    /**
     * Longitude
     * @type {number}
     * @memberof ListingsV2ProjectAddressParts
     */
    'longitude'?: number | null;
}

export const ListingsV2ProjectAddressPartsStateAbbreviationEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Sa: 'sa',
    Nt: 'nt',
    Tas: 'tas',
    Act: 'act',
    Qld: 'qld',
    Wa: 'wa'
} as const;

export type ListingsV2ProjectAddressPartsStateAbbreviationEnum = typeof ListingsV2ProjectAddressPartsStateAbbreviationEnum[keyof typeof ListingsV2ProjectAddressPartsStateAbbreviationEnum];
export const ListingsV2ProjectAddressPartsDisplayTypeEnum = {
    FullAddress: 'fullAddress',
    StreetAndSuburb: 'streetAndSuburb',
    SuburbOnly: 'suburbOnly',
    RegionOnly: 'regionOnly',
    AreaOnly: 'areaOnly',
    StateOnly: 'stateOnly'
} as const;

export type ListingsV2ProjectAddressPartsDisplayTypeEnum = typeof ListingsV2ProjectAddressPartsDisplayTypeEnum[keyof typeof ListingsV2ProjectAddressPartsDisplayTypeEnum];

/**
 * Project Media
 * @export
 * @interface ListingsV2ProjectMedia
 */
export interface ListingsV2ProjectMedia {
    /**
     * Gets or Sets Category
     * @type {string}
     * @memberof ListingsV2ProjectMedia
     */
    'category'?: ListingsV2ProjectMediaCategoryEnum;
    /**
     * Gets or Sets Type
     * @type {string}
     * @memberof ListingsV2ProjectMedia
     */
    'type'?: ListingsV2ProjectMediaTypeEnum;
    /**
     * Url
     * @type {string}
     * @memberof ListingsV2ProjectMedia
     */
    'url'?: string | null;
    /**
     * Optional description
     * @type {string}
     * @memberof ListingsV2ProjectMedia
     */
    'description'?: string | null;
}

export const ListingsV2ProjectMediaCategoryEnum = {
    Image: 'image',
    Video: 'video',
    Others: 'others'
} as const;

export type ListingsV2ProjectMediaCategoryEnum = typeof ListingsV2ProjectMediaCategoryEnum[keyof typeof ListingsV2ProjectMediaCategoryEnum];
export const ListingsV2ProjectMediaTypeEnum = {
    Photo: 'photo',
    Poster: 'poster',
    Video: 'video',
    VirtualTour: 'virtualTour',
    WebLink: 'webLink'
} as const;

export type ListingsV2ProjectMediaTypeEnum = typeof ListingsV2ProjectMediaTypeEnum[keyof typeof ListingsV2ProjectMediaTypeEnum];

/**
 * Property Inspection(s) details
 * @export
 * @interface ListingsV2PropertyInspections
 */
export interface ListingsV2PropertyInspections {
    /**
     * Inspection details for the property. e.g. opening and closing times
     * @type {Array<ListingsV2Inspection>}
     * @memberof ListingsV2PropertyInspections
     */
    'inspections'?: Array<ListingsV2Inspection> | null;
    /**
     * Inspection details for the property. e.g. opening and closing times
     * @type {Array<ListingsV2Inspection>}
     * @memberof ListingsV2PropertyInspections
     */
    'pastInspections'?: Array<ListingsV2Inspection> | null;
    /**
     * True or False indicating whether the inspection is by appointment only
     * @type {boolean}
     * @memberof ListingsV2PropertyInspections
     */
    'isByAppointmentOnly'?: boolean | null;
}
/**
 * Information for the listing provider. e.g. bulkuploader information
 * @export
 * @interface ListingsV2ProviderDetails
 */
export interface ListingsV2ProviderDetails {
    /**
     * Feed provider ID
     * @type {string}
     * @memberof ListingsV2ProviderDetails
     */
    'providerSystem'?: string | null;
    /**
     * Unique ID within provider system
     * @type {string}
     * @memberof ListingsV2ProviderDetails
     */
    'providerAdID'?: string | null;
}
/**
 * The rental detail\'s of the listing in case of it being for rent or leased
 * @export
 * @interface ListingsV2RentalDetails
 */
export interface ListingsV2RentalDetails {
    /**
     * Gets or Sets RentalMethod
     * @type {string}
     * @memberof ListingsV2RentalDetails
     */
    'rentalMethod'?: ListingsV2RentalDetailsRentalMethodEnum;
    /**
     * Gets or Sets Source
     * @type {string}
     * @memberof ListingsV2RentalDetails
     */
    'source'?: ListingsV2RentalDetailsSourceEnum;
    /**
     * The Date the listing was leased. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV2RentalDetails
     */
    'leasedDate'?: string | null;
    /**
     * The last leased price entered by the Advertiser  This price will only be visible if allowed by the Advertiser  and the listing as been leased
     * @type {number}
     * @memberof ListingsV2RentalDetails
     */
    'leasedPrice'?: number | null;
    /**
     * Indicates whether this instance can display price
     * @type {boolean}
     * @memberof ListingsV2RentalDetails
     */
    'canDisplayPrice'?: boolean | null;
    /**
     * The number of months the property was last leased for  This will only be visible if the property has been leased
     * @type {number}
     * @memberof ListingsV2RentalDetails
     */
    'leasedMonths'?: number | null;
    /**
     * Lease term range from
     * @type {number}
     * @memberof ListingsV2RentalDetails
     */
    'termOfLeaseFrom'?: number | null;
    /**
     * Lease term range to
     * @type {number}
     * @memberof ListingsV2RentalDetails
     */
    'termOfLeaseTo'?: number | null;
    /**
     * Outgoing cost of current lease
     * @type {number}
     * @memberof ListingsV2RentalDetails
     */
    'leaseOutgoings'?: number | null;
}

export const ListingsV2RentalDetailsRentalMethodEnum = {
    NotStated: 'notStated',
    Rent: 'rent',
    Share: 'share',
    Holiday: 'holiday',
    Lease: 'lease'
} as const;

export type ListingsV2RentalDetailsRentalMethodEnum = typeof ListingsV2RentalDetailsRentalMethodEnum[keyof typeof ListingsV2RentalDetailsRentalMethodEnum];
export const ListingsV2RentalDetailsSourceEnum = {
    Internal: 'internal',
    External: 'external'
} as const;

export type ListingsV2RentalDetailsSourceEnum = typeof ListingsV2RentalDetailsSourceEnum[keyof typeof ListingsV2RentalDetailsSourceEnum];

/**
 * The sale detail\'s of the listing in case of it being for sale or sold
 * @export
 * @interface ListingsV2SaleDetails
 */
export interface ListingsV2SaleDetails {
    /**
     * Gets or Sets SaleMethod
     * @type {string}
     * @memberof ListingsV2SaleDetails
     */
    'saleMethod'?: ListingsV2SaleDetailsSaleMethodEnum;
    /**
     * 
     * @type {ListingsV2SoldDetails}
     * @memberof ListingsV2SaleDetails
     */
    'soldDetails'?: ListingsV2SoldDetails;
    /**
     * 
     * @type {ListingsV2AuctionDetails}
     * @memberof ListingsV2SaleDetails
     */
    'auctionDetails'?: ListingsV2AuctionDetails;
    /**
     * 
     * @type {ListingsV2TenderDetails}
     * @memberof ListingsV2SaleDetails
     */
    'tenderDetails'?: ListingsV2TenderDetails;
    /**
     * 
     * @type {ListingsV2TenantDetails}
     * @memberof ListingsV2SaleDetails
     */
    'tenantDetails'?: ListingsV2TenantDetails;
    /**
     * Integer value of percentage return on this property or business
     * @type {number}
     * @memberof ListingsV2SaleDetails
     */
    'annualReturn'?: number | null;
    /**
     * Information relating to aspects of the sale, such as required deposit, settlement time
     * @type {string}
     * @memberof ListingsV2SaleDetails
     */
    'saleTerms'?: string | null;
}

export const ListingsV2SaleDetailsSaleMethodEnum = {
    NotStated: 'notStated',
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    Tender: 'tender',
    ExpressionOfInterest: 'expressionOfInterest'
} as const;

export type ListingsV2SaleDetailsSaleMethodEnum = typeof ListingsV2SaleDetailsSaleMethodEnum[keyof typeof ListingsV2SaleDetailsSaleMethodEnum];

/**
 * Sold details in the case of the listing being sold.
 * @export
 * @interface ListingsV2SoldDetails
 */
export interface ListingsV2SoldDetails {
    /**
     * Gets or Sets SoldAction
     * @type {string}
     * @memberof ListingsV2SoldDetails
     */
    'soldAction'?: ListingsV2SoldDetailsSoldActionEnum;
    /**
     * Gets or Sets Source
     * @type {string}
     * @memberof ListingsV2SoldDetails
     */
    'source'?: ListingsV2SoldDetailsSourceEnum;
    /**
     * The last sold price entered by the Advertiser.  This price will only be visible if allowed by the Advertiser  and the listing as been sold
     * @type {number}
     * @memberof ListingsV2SoldDetails
     */
    'soldPrice'?: number | null;
    /**
     * The government recorded sold price sourced from APM
     * @type {number}
     * @memberof ListingsV2SoldDetails
     */
    'governmentRecordedSoldPrice'?: number | null;
    /**
     * The Date the listing was sold. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV2SoldDetails
     */
    'soldDate'?: string | null;
    /**
     * Indicates whether this instance can display price
     * @type {boolean}
     * @memberof ListingsV2SoldDetails
     */
    'canDisplayPrice'?: boolean | null;
}

export const ListingsV2SoldDetailsSoldActionEnum = {
    NotStated: 'notStated',
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    Withdrawn: 'withdrawn',
    SoldPriorToAuction: 'soldPriorToAuction'
} as const;

export type ListingsV2SoldDetailsSoldActionEnum = typeof ListingsV2SoldDetailsSoldActionEnum[keyof typeof ListingsV2SoldDetailsSoldActionEnum];
export const ListingsV2SoldDetailsSourceEnum = {
    Internal: 'internal',
    External: 'external'
} as const;

export type ListingsV2SoldDetailsSourceEnum = typeof ListingsV2SoldDetailsSourceEnum[keyof typeof ListingsV2SoldDetailsSourceEnum];

/**
 * Statement of Information  Regarding sale listing
 * @export
 * @interface ListingsV2StatementOfInformation
 */
export interface ListingsV2StatementOfInformation {
    /**
     * 
     * @type {ListingsV2BasicPrice}
     * @memberof ListingsV2StatementOfInformation
     */
    'estimatedPrice'?: ListingsV2BasicPrice;
    /**
     * 
     * @type {ListingsV2ComparableData}
     * @memberof ListingsV2StatementOfInformation
     */
    'comparableData'?: ListingsV2ComparableData;
    /**
     * 
     * @type {ListingsV2MedianPriceData}
     * @memberof ListingsV2StatementOfInformation
     */
    'suburbMedianPrice'?: ListingsV2MedianPriceData;
    /**
     * Link to the statement of information documentation file
     * @type {string}
     * @memberof ListingsV2StatementOfInformation
     */
    'documentationUrl'?: string | null;
}
/**
 * Tenant Details
 * @export
 * @interface ListingsV2TenantDetails
 */
export interface ListingsV2TenantDetails {
    /**
     * Is tenant lease date variable
     * @type {boolean}
     * @memberof ListingsV2TenantDetails
     */
    'leaseDateVariable'?: boolean | null;
    /**
     * Leasing options available to a prospective tenant
     * @type {string}
     * @memberof ListingsV2TenantDetails
     */
    'leaseOptions'?: string | null;
    /**
     * The from range of the tenant\'s current lease
     * @type {number}
     * @memberof ListingsV2TenantDetails
     */
    'tenantInfoTermOfLeaseFrom'?: number | null;
    /**
     * The to range of the tenant\'s current lease
     * @type {number}
     * @memberof ListingsV2TenantDetails
     */
    'tenantInfoTermOfLeaseTo'?: number | null;
    /**
     * Name of the current tenant of the property
     * @type {string}
     * @memberof ListingsV2TenantDetails
     */
    'tenantName'?: string | null;
    /**
     * Information regarding current rental
     * @type {string}
     * @memberof ListingsV2TenantDetails
     */
    'tenantRentDetails'?: string | null;
    /**
     * The date on which the tenants lease began, or is due to begin. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV2TenantDetails
     */
    'leaseStartDate'?: string | null;
    /**
     * The date on which the tenants lease is due to end. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV2TenantDetails
     */
    'leaseEndDate'?: string | null;
}
/**
 * Tender details
 * @export
 * @interface ListingsV2TenderDetails
 */
export interface ListingsV2TenderDetails {
    /**
     * Tender recipient name
     * @type {string}
     * @memberof ListingsV2TenderDetails
     */
    'tenderRecipientName'?: string | null;
    /**
     * Tender address
     * @type {string}
     * @memberof ListingsV2TenderDetails
     */
    'tenderAddress'?: string | null;
    /**
     * Tender closing date. DateTime is in a local timezone.
     * @type {string}
     * @memberof ListingsV2TenderDetails
     */
    'tenderEndDate'?: string | null;
}
/**
 * 
 * @export
 * @interface LocationTypeaheadV1AddressComponents
 */
export interface LocationTypeaheadV1AddressComponents {
    /**
     * 
     * @type {string}
     * @memberof LocationTypeaheadV1AddressComponents
     */
    'unitNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LocationTypeaheadV1AddressComponents
     */
    'streetNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LocationTypeaheadV1AddressComponents
     */
    'streetName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LocationTypeaheadV1AddressComponents
     */
    'streetType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LocationTypeaheadV1AddressComponents
     */
    'streetTypeLong'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LocationTypeaheadV1AddressComponents
     */
    'suburb'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LocationTypeaheadV1AddressComponents
     */
    'postCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LocationTypeaheadV1AddressComponents
     */
    'state'?: string | null;
}
/**
 * 
 * @export
 * @interface LocationTypeaheadV1PropertySuggestion
 */
export interface LocationTypeaheadV1PropertySuggestion {
    /**
     * 
     * @type {string}
     * @memberof LocationTypeaheadV1PropertySuggestion
     */
    'address'?: string | null;
    /**
     * 
     * @type {LocationTypeaheadV1AddressComponents}
     * @memberof LocationTypeaheadV1PropertySuggestion
     */
    'addressComponents'?: LocationTypeaheadV1AddressComponents;
    /**
     * 
     * @type {string}
     * @memberof LocationTypeaheadV1PropertySuggestion
     */
    'id'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LocationTypeaheadV1PropertySuggestion
     */
    'relativeScore'?: number;
}
/**
 * 
 * @export
 * @interface MeV1AgencySummary
 */
export interface MeV1AgencySummary {
    /**
     * 
     * @type {number}
     * @memberof MeV1AgencySummary
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MeV1AgencySummary
     */
    'name'?: string | null;
    /**
     * True if this user is an admin of this agency
     * @type {boolean}
     * @memberof MeV1AgencySummary
     */
    'admin'?: boolean | null;
}
/**
 * 
 * @export
 * @interface MeV1MyDetails
 */
export interface MeV1MyDetails {
    /**
     * True if the current request was successfully authenticated
     * @type {boolean}
     * @memberof MeV1MyDetails
     */
    'authenticated'?: boolean;
    /**
     * The Client ID or API Key used to authenticated this request
     * @type {string}
     * @memberof MeV1MyDetails
     */
    'clientId'?: string | null;
    /**
     * A unique user id, only if this request is authenticated as a user context.
     * @type {string}
     * @memberof MeV1MyDetails
     */
    'subjectId'?: string | null;
    /**
     * The users email address if available
     * @type {string}
     * @memberof MeV1MyDetails
     */
    'subjectEmail'?: string | null;
}
/**
 * Create provider response
 * @export
 * @interface MeV1ProviderSummary
 */
export interface MeV1ProviderSummary {
    /**
     * Provider identifier - this will map to the username
     * @type {string}
     * @memberof MeV1ProviderSummary
     */
    'id'?: string | null;
    /**
     * Company name
     * @type {string}
     * @memberof MeV1ProviderSummary
     */
    'companyName'?: string | null;
    /**
     * Contact person\'s name for technical related enquiries
     * @type {string}
     * @memberof MeV1ProviderSummary
     */
    'contactNameTechnical'?: string | null;
    /**
     * Email address to receive technical related emails
     * @type {string}
     * @memberof MeV1ProviderSummary
     */
    'emailTechnical'?: string | null;
    /**
     * Phone to be contact for technical related enquiries
     * @type {string}
     * @memberof MeV1ProviderSummary
     */
    'phoneTechnical'?: string | null;
    /**
     * Contact person\'s name for business related enquiries
     * @type {string}
     * @memberof MeV1ProviderSummary
     */
    'contactNameBusiness'?: string | null;
    /**
     * Email address to receive business related emails
     * @type {string}
     * @memberof MeV1ProviderSummary
     */
    'emailBusiness'?: string | null;
    /**
     * Phone to be contact for business related enquiries
     * @type {string}
     * @memberof MeV1ProviderSummary
     */
    'phoneBusiness'?: string | null;
}
/**
 * 
 * @export
 * @interface PreMarketV1Address
 */
export interface PreMarketV1Address {
    /**
     * Street (and possibly unit) number component of an address. E.g. 23, 1a, 11/1.
     * @type {string}
     * @memberof PreMarketV1Address
     */
    'streetNumber': string;
    /**
     * Street name, e.g. Punt Road.
     * @type {string}
     * @memberof PreMarketV1Address
     */
    'street': string;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1Address
     */
    'suburb': string;
    /**
     * 
     * @type {PreMarketV1State}
     * @memberof PreMarketV1Address
     */
    'state': PreMarketV1State;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1Address
     */
    'postcode': string;
}


/**
 * 
 * @export
 * @interface PreMarketV1AddressResponse
 */
export interface PreMarketV1AddressResponse {
    /**
     * Street (and possibly unit) number component of an address. E.g. 23, 1a, 11/1.
     * @type {string}
     * @memberof PreMarketV1AddressResponse
     */
    'streetNumber': string;
    /**
     * Street name, e.g. Punt Road.
     * @type {string}
     * @memberof PreMarketV1AddressResponse
     */
    'street': string;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1AddressResponse
     */
    'suburb': string;
    /**
     * 
     * @type {PreMarketV1State}
     * @memberof PreMarketV1AddressResponse
     */
    'state': PreMarketV1State;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1AddressResponse
     */
    'postcode': string;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1AddressResponse
     */
    'slug': string;
}


/**
 * 
 * @export
 * @interface PreMarketV1AdvertiserIdentifiers
 */
export interface PreMarketV1AdvertiserIdentifiers {
    /**
     * Domain Agency Id
     * @type {number}
     * @memberof PreMarketV1AdvertiserIdentifiers
     */
    'domainAgencyId': number;
    /**
     * Identifier of each contact the advertiser has associated with the listing
     * @type {Array<number>}
     * @memberof PreMarketV1AdvertiserIdentifiers
     */
    'contactIds'?: Array<number> | null;
    /**
     * Identifier of each agent the advertiser has associated with the listing
     * @type {Array<string>}
     * @memberof PreMarketV1AdvertiserIdentifiers
     */
    'agentIds'?: Array<string> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PreMarketV1AuthorityType = {
    PrivateSale: 'privateSale',
    Auction: 'auction',
    ExpressionOfInterest: 'expressionOfInterest'
} as const;

export type PreMarketV1AuthorityType = typeof PreMarketV1AuthorityType[keyof typeof PreMarketV1AuthorityType];


/**
 * 
 * @export
 * @interface PreMarketV1Contact
 */
export interface PreMarketV1Contact {
    /**
     * First name of the agent contact.
     * @type {string}
     * @memberof PreMarketV1Contact
     */
    'firstName': string;
    /**
     * Last name of the agent contact.
     * @type {string}
     * @memberof PreMarketV1Contact
     */
    'lastName': string;
    /**
     * Agent contact email. Valid email address.
     * @type {string}
     * @memberof PreMarketV1Contact
     */
    'email': string;
    /**
     * Agent contact phone number. Valid phone number.
     * @type {string}
     * @memberof PreMarketV1Contact
     */
    'phone'?: string | null;
    /**
     * Agent contact mobile number. Valid mobile number.
     * @type {string}
     * @memberof PreMarketV1Contact
     */
    'mobile'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1Contact
     */
    'fax'?: string | null;
}
/**
 * Create or update pre-portal listing response.
 * @export
 * @interface PreMarketV1CreateOrUpdateListingResponse
 */
export interface PreMarketV1CreateOrUpdateListingResponse {
    /**
     * Pre-portal listing ID.
     * @type {string}
     * @memberof PreMarketV1CreateOrUpdateListingResponse
     */
    'id': string;
}
/**
 * Encapsulates the details of a geo location.
 * @export
 * @interface PreMarketV1GeoLocation
 */
export interface PreMarketV1GeoLocation {
    /**
     * Latitude of the property.
     * @type {number}
     * @memberof PreMarketV1GeoLocation
     */
    'latitude'?: number;
    /**
     * Longitude of the property.
     * @type {number}
     * @memberof PreMarketV1GeoLocation
     */
    'longitude'?: number;
}
/**
 * Pre-portal listing request.
 * @export
 * @interface PreMarketV1ListingRequest
 */
export interface PreMarketV1ListingRequest {
    /**
     * 
     * @type {PreMarketV1PrePortalListingStatus}
     * @memberof PreMarketV1ListingRequest
     */
    'listingStatus': PreMarketV1PrePortalListingStatus;
    /**
     * 
     * @type {PreMarketV1Address}
     * @memberof PreMarketV1ListingRequest
     */
    'address': PreMarketV1Address;
    /**
     * The Domain agency ID. Must match an existing Domain agency ID.
     * @type {number}
     * @memberof PreMarketV1ListingRequest
     */
    'domainAgencyId': number;
    /**
     * A string identifying the source of the listing.
     * @type {string}
     * @memberof PreMarketV1ListingRequest
     */
    'listingProvider': string;
    /**
     * External Advertisement Id of up to 50 characters will be stored.  This value is correlated with actual Domain listing when it is created, and it should be unique for the listing provider.  This value is case-insensitive (meaning AAAA will update aaaa).
     * @type {string}
     * @memberof PreMarketV1ListingRequest
     */
    'providerAdId': string;
    /**
     * 
     * @type {Array<PreMarketV1Contact>}
     * @memberof PreMarketV1ListingRequest
     */
    'contacts'?: Array<PreMarketV1Contact> | null;
    /**
     * Number of bedrooms divisible by 0.5.
     * @type {number}
     * @memberof PreMarketV1ListingRequest
     */
    'bedrooms': number;
    /**
     * Number of bathrooms divisible by 0.5.
     * @type {number}
     * @memberof PreMarketV1ListingRequest
     */
    'bathrooms': number;
    /**
     * Number of car spaces divisible by 0.5.
     * @type {number}
     * @memberof PreMarketV1ListingRequest
     */
    'carspaces': number;
    /**
     * Headline of the advertisement. Any HTML will be stripped out.
     * @type {string}
     * @memberof PreMarketV1ListingRequest
     */
    'summary'?: string | null;
    /**
     * Description of the property.  Allow up to 6000 characters in length. The following HTML elements are permitted: ```<br />, <p></p>, &nbsp;``` . HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade
     * @type {string}
     * @memberof PreMarketV1ListingRequest
     */
    'description'?: string | null;
    /**
     * The date on which the authority contract was executed.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     * @type {string}
     * @memberof PreMarketV1ListingRequest
     */
    'authorityExecutedDate'?: string | null;
    /**
     * Vendor reserve price.
     * @type {number}
     * @memberof PreMarketV1ListingRequest
     */
    'reservePrice'?: number | null;
    /**
     * 
     * @type {PreMarketV1Price}
     * @memberof PreMarketV1ListingRequest
     */
    'estimatedSalePrice': PreMarketV1Price;
    /**
     * The property types (e.g. house, apartment/unit/flat, etc.).
     * @type {Array<PreMarketV1PropertyType>}
     * @memberof PreMarketV1ListingRequest
     */
    'propertyTypes': Array<PreMarketV1PropertyType>;
    /**
     * 
     * @type {PreMarketV1AuthorityType}
     * @memberof PreMarketV1ListingRequest
     */
    'authorityType'?: PreMarketV1AuthorityType;
    /**
     * The time (in days) that the agent has exclusive authority to sell the property.
     * @type {number}
     * @memberof PreMarketV1ListingRequest
     */
    'exclusivePeriodDays'?: number | null;
    /**
     * The time (in days) that exclusive authority has been extended.
     * @type {number}
     * @memberof PreMarketV1ListingRequest
     */
    'exclusiveContinuingPeriodDays'?: number | null;
    /**
     * Start date of the exclusivity period.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     * @type {string}
     * @memberof PreMarketV1ListingRequest
     */
    'exclusivePeriodStartDate'?: string | null;
    /**
     * 
     * @type {PreMarketV1StatementOfInformation}
     * @memberof PreMarketV1ListingRequest
     */
    'statementOfInformation'?: PreMarketV1StatementOfInformation;
    /**
     * 
     * @type {Array<PreMarketV1PropertyMedia>}
     * @memberof PreMarketV1ListingRequest
     */
    'images'?: Array<PreMarketV1PropertyMedia> | null;
    /**
     * Optional listing metadata.
     * @type {{ [key: string]: string; }}
     * @memberof PreMarketV1ListingRequest
     */
    'metadata'?: { [key: string]: string; } | null;
    /**
     * Optional listing comment.
     * @type {string}
     * @memberof PreMarketV1ListingRequest
     */
    'comment'?: string | null;
    /**
     * 
     * @type {PreMarketV1SoldDetails}
     * @memberof PreMarketV1ListingRequest
     */
    'soldDetails'?: PreMarketV1SoldDetails;
}


/**
 * 
 * @export
 * @interface PreMarketV1ListingRequestJsonPatchDocument
 */
export interface PreMarketV1ListingRequestJsonPatchDocument {
    /**
     * 
     * @type {Array<PreMarketV1ListingRequestOperation>}
     * @memberof PreMarketV1ListingRequestJsonPatchDocument
     */
    'operations'?: Array<PreMarketV1ListingRequestOperation> | null;
    /**
     * 
     * @type {object}
     * @memberof PreMarketV1ListingRequestJsonPatchDocument
     */
    'contractResolver'?: object;
}
/**
 * 
 * @export
 * @interface PreMarketV1ListingRequestOperation
 */
export interface PreMarketV1ListingRequestOperation {
    /**
     * 
     * @type {PreMarketV1OperationType}
     * @memberof PreMarketV1ListingRequestOperation
     */
    'operationType'?: PreMarketV1OperationType;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1ListingRequestOperation
     */
    'path'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1ListingRequestOperation
     */
    'op'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1ListingRequestOperation
     */
    'from'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof PreMarketV1ListingRequestOperation
     */
    'value'?: any | null;
}


/**
 * Pre-portal listing response.
 * @export
 * @interface PreMarketV1ListingResponse
 */
export interface PreMarketV1ListingResponse {
    /**
     * Pre-portal listing ID.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'id': string;
    /**
     * 
     * @type {PreMarketV1PrePortalListingStatus}
     * @memberof PreMarketV1ListingResponse
     */
    'listingStatus': PreMarketV1PrePortalListingStatus;
    /**
     * The Domain Ad Id of the related listing.
     * @type {number}
     * @memberof PreMarketV1ListingResponse
     */
    'relatedAdId'?: number | null;
    /**
     * 
     * @type {PreMarketV1ProviderDetails}
     * @memberof PreMarketV1ListingResponse
     */
    'providerDetails'?: PreMarketV1ProviderDetails;
    /**
     * 
     * @type {PreMarketV1AddressResponse}
     * @memberof PreMarketV1ListingResponse
     */
    'address': PreMarketV1AddressResponse;
    /**
     * 
     * @type {PreMarketV1AdvertiserIdentifiers}
     * @memberof PreMarketV1ListingResponse
     */
    'advertiserIdentifiers'?: PreMarketV1AdvertiserIdentifiers;
    /**
     * Total number of bedrooms in the property.
     * @type {number}
     * @memberof PreMarketV1ListingResponse
     */
    'bedrooms': number;
    /**
     * Total number of bathrooms in the property.
     * @type {number}
     * @memberof PreMarketV1ListingResponse
     */
    'bathrooms': number;
    /**
     * Total number of car spaces in the property.
     * @type {number}
     * @memberof PreMarketV1ListingResponse
     */
    'carspaces': number;
    /**
     * The short description of the property provided by the advertiser.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'headline'?: string | null;
    /**
     * The long description of the property provided by the advertiser.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'description'?: string | null;
    /**
     * The date on which the authority contract was executed.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'authorityExecutedDate'?: string | null;
    /**
     * Vendor reserve price.
     * @type {number}
     * @memberof PreMarketV1ListingResponse
     */
    'reservePrice'?: number | null;
    /**
     * 
     * @type {PreMarketV1Price}
     * @memberof PreMarketV1ListingResponse
     */
    'estimatedSalePrice': PreMarketV1Price;
    /**
     * The property types (e.g. house, apartment/unit/flat, etc.).
     * @type {Array<PreMarketV1PropertyType>}
     * @memberof PreMarketV1ListingResponse
     */
    'propertyTypes'?: Array<PreMarketV1PropertyType> | null;
    /**
     * 
     * @type {PreMarketV1AuthorityType}
     * @memberof PreMarketV1ListingResponse
     */
    'authorityType'?: PreMarketV1AuthorityType;
    /**
     * The time (in days) that the agent has exclusive authority to sell the property.
     * @type {number}
     * @memberof PreMarketV1ListingResponse
     */
    'exclusivePeriodDays'?: number | null;
    /**
     * The time (in days) that exclusive authority has been extended.
     * @type {number}
     * @memberof PreMarketV1ListingResponse
     */
    'exclusiveContinuingPeriodDays'?: number | null;
    /**
     * Start date of the exclusivity period.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'exclusivePeriodStartDate'?: string | null;
    /**
     * 
     * @type {PreMarketV1GeoLocation}
     * @memberof PreMarketV1ListingResponse
     */
    'geoLocation'?: PreMarketV1GeoLocation;
    /**
     * Map certainty of the property location.
     * @type {number}
     * @memberof PreMarketV1ListingResponse
     */
    'mapCertainty'?: number;
    /**
     * The media associated with the property provided by the advertiser.
     * @type {Array<PreMarketV1PropertyMedia>}
     * @memberof PreMarketV1ListingResponse
     */
    'media'?: Array<PreMarketV1PropertyMedia> | null;
    /**
     * The identifier which uniquely identifies the property being advertised.  This may be empty if the Address of property is poorly described.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'propertyId'?: string | null;
    /**
     * 
     * @type {PreMarketV1StatementOfInformation}
     * @memberof PreMarketV1ListingResponse
     */
    'statementOfInformation'?: PreMarketV1StatementOfInformation;
    /**
     * The date/time the listing was created.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'dateCreated'?: string;
    /**
     * The date/time the listing was last updated.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'dateUpdated'?: string;
    /**
     * The date/time the listing went pre-market.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'datePreMarket'?: string | null;
    /**
     * The date/time the listing was listed.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'dateListed'?: string | null;
    /**
     * The date/time when the listing status was changed to sold (it is NOT the date/time when the property was sold).  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'dateSold'?: string | null;
    /**
     * The date/time the listing was withdrawn.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'dateWithdrawn'?: string | null;
    /**
     * The date/time the listing was drafted.  The date is compliant with the ISO 8601 and is in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'dateDrafted'?: string | null;
    /**
     * Optional listing metadata.
     * @type {{ [key: string]: string; }}
     * @memberof PreMarketV1ListingResponse
     */
    'metadata'?: { [key: string]: string; } | null;
    /**
     * Optional listing comment.
     * @type {string}
     * @memberof PreMarketV1ListingResponse
     */
    'comment'?: string | null;
    /**
     * 
     * @type {PreMarketV1SoldDetails}
     * @memberof PreMarketV1ListingResponse
     */
    'soldDetails'?: PreMarketV1SoldDetails;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const PreMarketV1OperationType = {
    Add: 'add',
    Remove: 'remove',
    Replace: 'replace',
    Move: 'move',
    Copy: 'copy',
    Test: 'test',
    Invalid: 'invalid'
} as const;

export type PreMarketV1OperationType = typeof PreMarketV1OperationType[keyof typeof PreMarketV1OperationType];


/**
 * 
 * @export
 * @enum {string}
 */

export const PreMarketV1PrePortalListingStatus = {
    PreMarket: 'preMarket',
    Sold: 'sold',
    Listed: 'listed',
    Withdrawn: 'withdrawn',
    Draft: 'draft'
} as const;

export type PreMarketV1PrePortalListingStatus = typeof PreMarketV1PrePortalListingStatus[keyof typeof PreMarketV1PrePortalListingStatus];


/**
 * 
 * @export
 * @interface PreMarketV1Price
 */
export interface PreMarketV1Price {
    /**
     * Lower end of the price range.
     * @type {number}
     * @memberof PreMarketV1Price
     */
    'from': number;
    /**
     * Upper end of the price range.
     * @type {number}
     * @memberof PreMarketV1Price
     */
    'to': number;
    /**
     * When provided this will be shown instead of the price range, e.g.: \"Offers over $450K considered\"
     * @type {string}
     * @memberof PreMarketV1Price
     */
    'displayText'?: string | null;
}
/**
 * 
 * @export
 * @interface PreMarketV1ProblemDetails
 */
export interface PreMarketV1ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof PreMarketV1ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PreMarketV1ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface PreMarketV1PropertyMedia
 */
export interface PreMarketV1PropertyMedia {
    /**
     * 
     * @type {PreMarketV1ResourceType}
     * @memberof PreMarketV1PropertyMedia
     */
    'resourceType': PreMarketV1ResourceType;
    /**
     * 
     * @type {string}
     * @memberof PreMarketV1PropertyMedia
     */
    'url': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const PreMarketV1PropertyType = {
    House: 'house',
    Townhouse: 'townhouse',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    VacantLand: 'vacantLand'
} as const;

export type PreMarketV1PropertyType = typeof PreMarketV1PropertyType[keyof typeof PreMarketV1PropertyType];


/**
 * Information for the listing provider
 * @export
 * @interface PreMarketV1ProviderDetails
 */
export interface PreMarketV1ProviderDetails {
    /**
     * Identify the source of the listing
     * @type {string}
     * @memberof PreMarketV1ProviderDetails
     */
    'providerSystem'?: string | null;
    /**
     * Unique ID within provider system
     * @type {string}
     * @memberof PreMarketV1ProviderDetails
     */
    'providerAdID'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PreMarketV1ResourceType = {
    Photograph: 'photograph',
    FloorPlan: 'floorPlan'
} as const;

export type PreMarketV1ResourceType = typeof PreMarketV1ResourceType[keyof typeof PreMarketV1ResourceType];


/**
 * 
 * @export
 * @interface PreMarketV1SoldDetails
 */
export interface PreMarketV1SoldDetails {
    /**
     * Price the property was sold for.
     * @type {number}
     * @memberof PreMarketV1SoldDetails
     */
    'soldPrice'?: number | null;
    /**
     * The date when the property was sold.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2021-10-15T13:45:30.0000000Z.
     * @type {string}
     * @memberof PreMarketV1SoldDetails
     */
    'soldDate'?: string | null;
}
/**
 * Australian states
 * @export
 * @enum {string}
 */

export const PreMarketV1State = {
    Nsw: 'nsw',
    Vic: 'vic',
    Act: 'act',
    Sa: 'sa',
    Wa: 'wa',
    Tas: 'tas',
    Qld: 'qld',
    Nt: 'nt'
} as const;

export type PreMarketV1State = typeof PreMarketV1State[keyof typeof PreMarketV1State];


/**
 * 
 * @export
 * @interface PreMarketV1StatementOfInformation
 */
export interface PreMarketV1StatementOfInformation {
    /**
     * Link to the statement of information documentation file.  Must be a PDF file.  File should be less than 10 MB in size  The Statement of Information must be updated if there is a change in the indicative selling price.
     * @type {string}
     * @memberof PreMarketV1StatementOfInformation
     */
    'documentationUrl': string;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface PropertiesV1ActivityBoundary
 */
export interface PropertiesV1ActivityBoundary {
    /**
     * Gets or Sets AdvertisedDate
     * @type {string}
     * @memberof PropertiesV1ActivityBoundary
     */
    'advertisedDate'?: string | null;
    /**
     * Gets or Sets AdvertisedPrice
     * @type {number}
     * @memberof PropertiesV1ActivityBoundary
     */
    'advertisedPrice'?: number | null;
    /**
     * Gets or Sets Agency
     * @type {string}
     * @memberof PropertiesV1ActivityBoundary
     */
    'agency'?: string | null;
    /**
     * Gets or Sets AgencyColour
     * @type {string}
     * @memberof PropertiesV1ActivityBoundary
     */
    'agencyColour'?: string | null;
    /**
     * Gets or Sets AgencyId
     * @type {number}
     * @memberof PropertiesV1ActivityBoundary
     */
    'agencyId'?: number | null;
    /**
     * Gets or Sets AgencyLogo
     * @type {string}
     * @memberof PropertiesV1ActivityBoundary
     */
    'agencyLogo'?: string | null;
    /**
     * Gets or Sets AgencyUrl
     * @type {string}
     * @memberof PropertiesV1ActivityBoundary
     */
    'agencyUrl'?: string | null;
    /**
     * Gets or Sets ApmAgencyId
     * @type {number}
     * @memberof PropertiesV1ActivityBoundary
     */
    'apmAgencyId'?: number | null;
    /**
     * Gets or Sets Source
     * @type {string}
     * @memberof PropertiesV1ActivityBoundary
     */
    'source'?: string | null;
    /**
     * Gets or Sets SuppressDetails
     * @type {boolean}
     * @memberof PropertiesV1ActivityBoundary
     */
    'suppressDetails'?: boolean | null;
    /**
     * Gets or Sets SuppressPrice
     * @type {boolean}
     * @memberof PropertiesV1ActivityBoundary
     */
    'suppressPrice'?: boolean | null;
    /**
     * Gets or Sets Type
     * @type {string}
     * @memberof PropertiesV1ActivityBoundary
     */
    'type'?: string | null;
    /**
     * Gets or Sets Url
     * @type {string}
     * @memberof PropertiesV1ActivityBoundary
     */
    'url'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PropertiesV1ActivityBoundary
     */
    'listingId'?: number | null;
}
/**
 * DomainPropertyIdModelModelsAdvert
 * @export
 * @interface PropertiesV1Advert
 */
export interface PropertiesV1Advert {
    /**
     * Gets or Sets OnMarketTypes
     * @type {Array<string>}
     * @memberof PropertiesV1Advert
     */
    'onMarketTypes'?: Array<PropertiesV1AdvertOnMarketTypesEnum>;
    /**
     * Gets or Sets AdvertId
     * @type {number}
     * @memberof PropertiesV1Advert
     */
    'advertId'?: number | null;
    /**
     * Gets or Sets Agency
     * @type {string}
     * @memberof PropertiesV1Advert
     */
    'agency'?: string | null;
    /**
     * Gets or Sets AgencyColour
     * @type {string}
     * @memberof PropertiesV1Advert
     */
    'agencyColour'?: string | null;
    /**
     * Gets or Sets AgencyId
     * @type {number}
     * @memberof PropertiesV1Advert
     */
    'agencyId'?: number | null;
    /**
     * Gets or Sets AgencyLogo
     * @type {string}
     * @memberof PropertiesV1Advert
     */
    'agencyLogo'?: string | null;
    /**
     * Gets or Sets Url
     * @type {string}
     * @memberof PropertiesV1Advert
     */
    'url'?: string | null;
}

export const PropertiesV1AdvertOnMarketTypesEnum = {
    Unknown: 'Unknown',
    Rent: 'Rent',
    Sale: 'Sale',
    Share: 'Share'
} as const;

export type PropertiesV1AdvertOnMarketTypesEnum = typeof PropertiesV1AdvertOnMarketTypesEnum[keyof typeof PropertiesV1AdvertOnMarketTypesEnum];

/**
 * DomainPropertyIdModelClaimsClaimData
 * @export
 * @interface PropertiesV1ClaimData
 */
export interface PropertiesV1ClaimData {
    /**
     * Gets or Sets Claimant
     * @type {string}
     * @memberof PropertiesV1ClaimData
     */
    'claimant'?: PropertiesV1ClaimDataClaimantEnum;
}

export const PropertiesV1ClaimDataClaimantEnum = {
    Owner: 'Owner',
    Tenant: 'Tenant',
    Investor: 'Investor',
    Unspecified: 'Unspecified'
} as const;

export type PropertiesV1ClaimDataClaimantEnum = typeof PropertiesV1ClaimDataClaimantEnum[keyof typeof PropertiesV1ClaimDataClaimantEnum];

/**
 * DomainPropertyIdModelModelsGeoCoordinate
 * @export
 * @interface PropertiesV1GeoCoordinate
 */
export interface PropertiesV1GeoCoordinate {
    /**
     * Gets or Sets Lat
     * @type {number}
     * @memberof PropertiesV1GeoCoordinate
     */
    'lat'?: number | null;
    /**
     * Gets or Sets Lon
     * @type {number}
     * @memberof PropertiesV1GeoCoordinate
     */
    'lon'?: number | null;
}
/**
 * DomainPropertyIdModelModelsGnafId
 * @export
 * @interface PropertiesV1GnafId
 */
export interface PropertiesV1GnafId {
    /**
     * Gets or Sets MonthNo
     * @type {number}
     * @memberof PropertiesV1GnafId
     */
    'monthNo'?: number | null;
    /**
     * Gets or Sets YearNo
     * @type {number}
     * @memberof PropertiesV1GnafId
     */
    'yearNo'?: number | null;
    /**
     * Gets or Sets GnafPID
     * @type {string}
     * @memberof PropertiesV1GnafId
     */
    'gnafPID'?: string | null;
}
/**
 * DomainPropertyIdModelModelsPhoto
 * @export
 * @interface PropertiesV1Photo
 */
export interface PropertiesV1Photo {
    /**
     * Gets or Sets ImageType
     * @type {string}
     * @memberof PropertiesV1Photo
     */
    'imageType'?: PropertiesV1PhotoImageTypeEnum;
    /**
     * Gets or Sets AdvertId
     * @type {number}
     * @memberof PropertiesV1Photo
     */
    'advertId'?: number | null;
    /**
     * Gets or Sets Date
     * @type {string}
     * @memberof PropertiesV1Photo
     */
    'date'?: string | null;
    /**
     * Gets or Sets FullUrl
     * @type {string}
     * @memberof PropertiesV1Photo
     */
    'fullUrl'?: string | null;
    /**
     * Gets or Sets Rank
     * @type {number}
     * @memberof PropertiesV1Photo
     */
    'rank'?: number | null;
}

export const PropertiesV1PhotoImageTypeEnum = {
    Property: 'Property',
    Floorplan: 'Floorplan',
    GoogleStreetView: 'GoogleStreetView'
} as const;

export type PropertiesV1PhotoImageTypeEnum = typeof PropertiesV1PhotoImageTypeEnum[keyof typeof PropertiesV1PhotoImageTypeEnum];

/**
 * 
 * @export
 * @interface PropertiesV1Property
 */
export interface PropertiesV1Property {
    /**
     * Gets or Sets CadastreType
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'cadastreType'?: PropertiesV1PropertyCadastreTypeEnum;
    /**
     * Gets or Sets OnMarketTypes
     * @type {Array<string>}
     * @memberof PropertiesV1Property
     */
    'onMarketTypes'?: Array<PropertiesV1PropertyOnMarketTypesEnum>;
    /**
     * Gets or Sets Status
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'status'?: PropertiesV1PropertyStatusEnum;
    /**
     * Gets or Sets Address
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'address'?: string | null;
    /**
     * 
     * @type {PropertiesV1GeoCoordinate}
     * @memberof PropertiesV1Property
     */
    'addressCoordinate'?: PropertiesV1GeoCoordinate;
    /**
     * Gets or Sets AddressId
     * @type {number}
     * @memberof PropertiesV1Property
     */
    'addressId'?: number | null;
    /**
     * Gets or Sets Adverts
     * @type {Array<PropertiesV1Advert>}
     * @memberof PropertiesV1Property
     */
    'adverts'?: Array<PropertiesV1Advert> | null;
    /**
     * Gets or Sets Bathrooms
     * @type {number}
     * @memberof PropertiesV1Property
     */
    'bathrooms'?: number | null;
    /**
     * Gets or Sets Bedrooms
     * @type {number}
     * @memberof PropertiesV1Property
     */
    'bedrooms'?: number | null;
    /**
     * Gets or Sets CarSpaces
     * @type {number}
     * @memberof PropertiesV1Property
     */
    'carSpaces'?: number | null;
    /**
     * 
     * @type {PropertiesV1ClaimData}
     * @memberof PropertiesV1Property
     */
    'claim'?: PropertiesV1ClaimData;
    /**
     * Gets or Sets Condition
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'condition'?: string | null;
    /**
     * Gets or Sets Created
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'created'?: string | null;
    /**
     * Gets or Sets Ensuites
     * @type {number}
     * @memberof PropertiesV1Property
     */
    'ensuites'?: number | null;
    /**
     * Gets or Sets Features
     * @type {Array<string>}
     * @memberof PropertiesV1Property
     */
    'features'?: Array<string> | null;
    /**
     * Gets or Sets FlatNumber
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'flatNumber'?: string | null;
    /**
     * 
     * @type {PropertiesV1PropertyHistory}
     * @memberof PropertiesV1Property
     */
    'history'?: PropertiesV1PropertyHistory;
    /**
     * Gets or Sets Id
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'id'?: string | null;
    /**
     * Gets or Sets Improvements
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'improvements'?: string | null;
    /**
     * Gets or Sets InternalArea
     * @type {number}
     * @memberof PropertiesV1Property
     */
    'internalArea'?: number | null;
    /**
     * Gets or Sets IsResidential
     * @type {boolean}
     * @memberof PropertiesV1Property
     */
    'isResidential'?: boolean | null;
    /**
     * Gets or Sets LandUse
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'landUse'?: string | null;
    /**
     * Gets or Sets LotNumber
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'lotNumber'?: string | null;
    /**
     * Gets or Sets Photos
     * @type {Array<PropertiesV1Photo>}
     * @memberof PropertiesV1Property
     */
    'photos'?: Array<PropertiesV1Photo> | null;
    /**
     * Gets or Sets PlanNumber
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'planNumber'?: string | null;
    /**
     * Gets or Sets Postcode
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'postcode'?: string | null;
    /**
     * Gets or Sets PropertyCategory
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'propertyCategory'?: string | null;
    /**
     * Gets or Sets PropertyCategoryId
     * @type {number}
     * @memberof PropertiesV1Property
     */
    'propertyCategoryId'?: number | null;
    /**
     * Gets or Sets PropertyType
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'propertyType'?: string | null;
    /**
     * Gets or Sets PropertyTypeId
     * @type {number}
     * @memberof PropertiesV1Property
     */
    'propertyTypeId'?: number | null;
    /**
     * Gets or Sets Rooms
     * @type {number}
     * @memberof PropertiesV1Property
     */
    'rooms'?: number | null;
    /**
     * Gets or Sets SectionNumber
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'sectionNumber'?: string | null;
    /**
     * Gets or Sets State
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'state'?: string | null;
    /**
     * Gets or Sets Storeys
     * @type {number}
     * @memberof PropertiesV1Property
     */
    'storeys'?: number | null;
    /**
     * Gets or Sets StreetAddress
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'streetAddress'?: string | null;
    /**
     * Gets or Sets StreetName
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'streetName'?: string | null;
    /**
     * Gets or Sets StreetNumber
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'streetNumber'?: string | null;
    /**
     * Gets or Sets StreetType
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'streetType'?: string | null;
    /**
     * Gets or Sets StreetTypeLong
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'streetTypeLong'?: string | null;
    /**
     * Gets or Sets Suburb
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'suburb'?: string | null;
    /**
     * Gets or Sets SuburbId
     * @type {number}
     * @memberof PropertiesV1Property
     */
    'suburbId'?: number | null;
    /**
     * Gets or Sets Title
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'title'?: string | null;
    /**
     * Gets or Sets Updated
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'updated'?: string | null;
    /**
     * Gets or Sets UrlSlug
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'urlSlug'?: string | null;
    /**
     * Gets or Sets UrlSlugShort
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'urlSlugShort'?: string | null;
    /**
     * Gets or Sets Zone
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'zone'?: string | null;
    /**
     * Gets or Sets GnafIds
     * @type {Array<PropertiesV1GnafId>}
     * @memberof PropertiesV1Property
     */
    'gnafIds'?: Array<PropertiesV1GnafId> | null;
    /**
     * Gets or Sets AreaSize
     * @type {number}
     * @memberof PropertiesV1Property
     */
    'areaSize'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PropertiesV1Property
     */
    'canonicalUrl'?: string | null;
}

export const PropertiesV1PropertyCadastreTypeEnum = {
    Point: 'Point',
    MultiPoint: 'MultiPoint',
    LineString: 'LineString',
    MultiLineString: 'MultiLineString',
    Polygon: 'Polygon',
    MultiPolygon: 'MultiPolygon',
    GeometryCollection: 'GeometryCollection',
    Feature: 'Feature',
    FeatureCollection: 'FeatureCollection'
} as const;

export type PropertiesV1PropertyCadastreTypeEnum = typeof PropertiesV1PropertyCadastreTypeEnum[keyof typeof PropertiesV1PropertyCadastreTypeEnum];
export const PropertiesV1PropertyOnMarketTypesEnum = {
    Unknown: 'Unknown',
    Rent: 'Rent',
    Sale: 'Sale',
    Share: 'Share'
} as const;

export type PropertiesV1PropertyOnMarketTypesEnum = typeof PropertiesV1PropertyOnMarketTypesEnum[keyof typeof PropertiesV1PropertyOnMarketTypesEnum];
export const PropertiesV1PropertyStatusEnum = {
    OffMarket: 'OffMarket',
    OnMarket: 'OnMarket'
} as const;

export type PropertiesV1PropertyStatusEnum = typeof PropertiesV1PropertyStatusEnum[keyof typeof PropertiesV1PropertyStatusEnum];

/**
 * 
 * @export
 * @interface PropertiesV1PropertyHistory
 */
export interface PropertiesV1PropertyHistory {
    /**
     * 
     * @type {Array<PropertiesV1RentalActivity>}
     * @memberof PropertiesV1PropertyHistory
     */
    'rentals'?: Array<PropertiesV1RentalActivity> | null;
    /**
     * 
     * @type {Array<PropertiesV1SaleActivity>}
     * @memberof PropertiesV1PropertyHistory
     */
    'sales'?: Array<PropertiesV1SaleActivity> | null;
    /**
     * Gets or Sets Suppress
     * @type {boolean}
     * @memberof PropertiesV1PropertyHistory
     */
    'suppress'?: boolean | null;
}
/**
 * 
 * @export
 * @interface PropertiesV1RentalActivity
 */
export interface PropertiesV1RentalActivity {
    /**
     * 
     * @type {PropertiesV1ActivityBoundary}
     * @memberof PropertiesV1RentalActivity
     */
    'first'?: PropertiesV1ActivityBoundary;
    /**
     * Gets or Sets Id
     * @type {number}
     * @memberof PropertiesV1RentalActivity
     */
    'id'?: number | null;
    /**
     * 
     * @type {PropertiesV1ActivityBoundary}
     * @memberof PropertiesV1RentalActivity
     */
    'last'?: PropertiesV1ActivityBoundary;
    /**
     * Gets or Sets PropertyType
     * @type {string}
     * @memberof PropertiesV1RentalActivity
     */
    'propertyType'?: string | null;
}
/**
 * 
 * @export
 * @interface PropertiesV1SaleActivity
 */
export interface PropertiesV1SaleActivity {
    /**
     * Gets or Sets Agency
     * @type {string}
     * @memberof PropertiesV1SaleActivity
     */
    'agency'?: string | null;
    /**
     * Gets or Sets AgencyColour
     * @type {string}
     * @memberof PropertiesV1SaleActivity
     */
    'agencyColour'?: string | null;
    /**
     * Gets or Sets AgencyId
     * @type {number}
     * @memberof PropertiesV1SaleActivity
     */
    'agencyId'?: number | null;
    /**
     * Gets or Sets AgencyLogo
     * @type {string}
     * @memberof PropertiesV1SaleActivity
     */
    'agencyLogo'?: string | null;
    /**
     * Gets or Sets AgencyUrl
     * @type {string}
     * @memberof PropertiesV1SaleActivity
     */
    'agencyUrl'?: string | null;
    /**
     * Gets or Sets ApmAgencyId
     * @type {number}
     * @memberof PropertiesV1SaleActivity
     */
    'apmAgencyId'?: number | null;
    /**
     * Gets or Sets Date
     * @type {string}
     * @memberof PropertiesV1SaleActivity
     */
    'date'?: string | null;
    /**
     * Gets or Sets DaysOnMarket
     * @type {number}
     * @memberof PropertiesV1SaleActivity
     */
    'daysOnMarket'?: number | null;
    /**
     * Gets or Sets DocumentedAsSold
     * @type {boolean}
     * @memberof PropertiesV1SaleActivity
     */
    'documentedAsSold'?: boolean | null;
    /**
     * Gets or Sets Price
     * @type {number}
     * @memberof PropertiesV1SaleActivity
     */
    'price'?: number | null;
    /**
     * Gets or Sets ReportedAsSold
     * @type {boolean}
     * @memberof PropertiesV1SaleActivity
     */
    'reportedAsSold'?: boolean | null;
    /**
     * Gets or Sets SuppressDetails
     * @type {boolean}
     * @memberof PropertiesV1SaleActivity
     */
    'suppressDetails'?: boolean | null;
    /**
     * Gets or Sets SuppressPrice
     * @type {boolean}
     * @memberof PropertiesV1SaleActivity
     */
    'suppressPrice'?: boolean | null;
    /**
     * Gets or Sets Type
     * @type {string}
     * @memberof PropertiesV1SaleActivity
     */
    'type'?: string | null;
    /**
     * Gets or Sets Url
     * @type {string}
     * @memberof PropertiesV1SaleActivity
     */
    'url'?: string | null;
    /**
     * 
     * @type {PropertiesV1ActivityBoundary}
     * @memberof PropertiesV1SaleActivity
     */
    'first'?: PropertiesV1ActivityBoundary;
    /**
     * Gets or Sets Id
     * @type {number}
     * @memberof PropertiesV1SaleActivity
     */
    'id'?: number | null;
    /**
     * 
     * @type {PropertiesV1ActivityBoundary}
     * @memberof PropertiesV1SaleActivity
     */
    'last'?: PropertiesV1ActivityBoundary;
    /**
     * Gets or Sets PropertyType
     * @type {string}
     * @memberof PropertiesV1SaleActivity
     */
    'propertyType'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PropertiesV1SaleActivity
     */
    'listingId'?: number | null;
}
/**
 * 
 * @export
 * @interface PropertyActivityAPIV1PortfolioCreated
 */
export interface PropertyActivityAPIV1PortfolioCreated {
    /**
     * Unique ID for the portfolio
     * @type {string}
     * @memberof PropertyActivityAPIV1PortfolioCreated
     */
    'PortfolioId'?: string;
}
/**
 * Portfolio Details
 * @export
 * @interface PropertyActivityAPIV1PortfolioDetails
 */
export interface PropertyActivityAPIV1PortfolioDetails {
    /**
     * Array of property id\'s in format XX-9999-XX
     * @type {Array<string>}
     * @memberof PropertyActivityAPIV1PortfolioDetails
     */
    'PropertyIds'?: Array<string>;
    /**
     * Array of gnaf id\'s
     * @type {Array<string>}
     * @memberof PropertyActivityAPIV1PortfolioDetails
     */
    'GnafIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PropertyActivityAPIV1PortfolioList
 */
export interface PropertyActivityAPIV1PortfolioList {
    /**
     * 
     * @type {Array<PropertyActivityAPIV1PortfolioListPortfoliosInner>}
     * @memberof PropertyActivityAPIV1PortfolioList
     */
    'Portfolios'?: Array<PropertyActivityAPIV1PortfolioListPortfoliosInner>;
}
/**
 * 
 * @export
 * @interface PropertyActivityAPIV1PortfolioListPortfoliosInner
 */
export interface PropertyActivityAPIV1PortfolioListPortfoliosInner {
    /**
     * 
     * @type {string}
     * @memberof PropertyActivityAPIV1PortfolioListPortfoliosInner
     */
    'PortfolioId'?: string;
    /**
     * Total number of property ids defined
     * @type {number}
     * @memberof PropertyActivityAPIV1PortfolioListPortfoliosInner
     */
    'PropertyIdCount'?: number;
    /**
     * Total number of gnaf ids defined
     * @type {number}
     * @memberof PropertyActivityAPIV1PortfolioListPortfoliosInner
     */
    'GnafIdCount'?: number;
}
/**
 * 
 * @export
 * @interface PropertyActivityCreatePortfolioRequest
 */
export interface PropertyActivityCreatePortfolioRequest {
    /**
     * Create an empty portfolio
     * @type {object}
     * @memberof PropertyActivityCreatePortfolioRequest
     */
    'empty'?: object;
}
/**
 * 
 * @export
 * @interface PropertyActivityCreatePortfolioRequestAnyOf
 */
export interface PropertyActivityCreatePortfolioRequestAnyOf {
    /**
     * Create an empty portfolio
     * @type {object}
     * @memberof PropertyActivityCreatePortfolioRequestAnyOf
     */
    'empty'?: object;
}
/**
 * 
 * @export
 * @interface PropertyActivityRemoveFromPortfolio200Response
 */
export interface PropertyActivityRemoveFromPortfolio200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof PropertyActivityRemoveFromPortfolio200Response
     */
    'MissingPropertyIds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PropertyActivityRemoveFromPortfolio200Response
     */
    'MissingGnafIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PropertyActivityViewPortfolio200Response
 */
export interface PropertyActivityViewPortfolio200Response {
    /**
     * 
     * @type {string}
     * @memberof PropertyActivityViewPortfolio200Response
     */
    'PortfolioId'?: string;
    /**
     * 
     * @type {PropertyActivityViewPortfolio200ResponseProperties}
     * @memberof PropertyActivityViewPortfolio200Response
     */
    'Properties'?: PropertyActivityViewPortfolio200ResponseProperties;
}
/**
 * 
 * @export
 * @interface PropertyActivityViewPortfolio200ResponseProperties
 */
export interface PropertyActivityViewPortfolio200ResponseProperties {
    /**
     * 
     * @type {Array<string>}
     * @memberof PropertyActivityViewPortfolio200ResponseProperties
     */
    'PropertyIds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PropertyActivityViewPortfolio200ResponseProperties
     */
    'GnafIds'?: Array<string>;
}
/**
 * Address of property
 * @export
 * @interface PropertyEnrichmentV1AddressBasic
 */
export interface PropertyEnrichmentV1AddressBasic {
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1AddressBasic
     */
    'flatNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1AddressBasic
     */
    'streetNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1AddressBasic
     */
    'streetName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1AddressBasic
     */
    'streetType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1AddressBasic
     */
    'streetTypeLong'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1AddressBasic
     */
    'suburb'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1AddressBasic
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1AddressBasic
     */
    'state'?: string;
}
/**
 * 
 * @export
 * @interface PropertyEnrichmentV1MultiplePropertyResults
 */
export interface PropertyEnrichmentV1MultiplePropertyResults {
    /**
     * 
     * @type {Array<PropertyEnrichmentV1MultiplePropertyResultsPropertiesInner>}
     * @memberof PropertyEnrichmentV1MultiplePropertyResults
     */
    'properties'?: Array<PropertyEnrichmentV1MultiplePropertyResultsPropertiesInner>;
}
/**
 * 
 * @export
 * @interface PropertyEnrichmentV1MultiplePropertyResultsPropertiesInner
 */
export interface PropertyEnrichmentV1MultiplePropertyResultsPropertiesInner {
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1MultiplePropertyResultsPropertiesInner
     */
    'propertyId'?: string;
    /**
     * 
     * @type {PropertyEnrichmentV1AddressBasic}
     * @memberof PropertyEnrichmentV1MultiplePropertyResultsPropertiesInner
     */
    'addressComponents'?: PropertyEnrichmentV1AddressBasic;
}
/**
 * Property activity summary derived from property activity events (not currently in EVENT-SCHEMAS project)
 * @export
 * @interface PropertyEnrichmentV1PropertyActivitySummary
 */
export interface PropertyEnrichmentV1PropertyActivitySummary {
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1PropertyActivitySummary
     */
    'lastListedDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1PropertyActivitySummary
     */
    'lastSoldDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1PropertyActivitySummary
     */
    'lastRentedDate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PropertyEnrichmentV1PropertyActivitySummary
     */
    'lastListedPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PropertyEnrichmentV1PropertyActivitySummary
     */
    'lastSoldPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PropertyEnrichmentV1PropertyActivitySummary
     */
    'lastRentedPrice'?: number | null;
    /**
     * Whether the most recent known activity indicates that the current resident is the owner or renter
     * @type {string}
     * @memberof PropertyEnrichmentV1PropertyActivitySummary
     */
    'ownerRenter'?: PropertyEnrichmentV1PropertyActivitySummaryOwnerRenterEnum;
}

export const PropertyEnrichmentV1PropertyActivitySummaryOwnerRenterEnum = {
    Owner: 'owner',
    Renter: 'renter'
} as const;

export type PropertyEnrichmentV1PropertyActivitySummaryOwnerRenterEnum = typeof PropertyEnrichmentV1PropertyActivitySummaryOwnerRenterEnum[keyof typeof PropertyEnrichmentV1PropertyActivitySummaryOwnerRenterEnum];

/**
 * 
 * @export
 * @interface PropertyEnrichmentV1PropertyResults
 */
export interface PropertyEnrichmentV1PropertyResults {
    /**
     * Unique ID for the property
     * @type {string}
     * @memberof PropertyEnrichmentV1PropertyResults
     */
    'propertyId'?: string;
    /**
     * 
     * @type {PropertyEnrichmentV1AddressBasic}
     * @memberof PropertyEnrichmentV1PropertyResults
     */
    'addressComponents'?: PropertyEnrichmentV1AddressBasic;
    /**
     * 
     * @type {PropertyEnrichmentV1PropertySummary}
     * @memberof PropertyEnrichmentV1PropertyResults
     */
    'propertySummary'?: PropertyEnrichmentV1PropertySummary;
    /**
     * 
     * @type {PropertyEnrichmentV1PropertyActivitySummary}
     * @memberof PropertyEnrichmentV1PropertyResults
     */
    'activitySummary'?: PropertyEnrichmentV1PropertyActivitySummary;
}
/**
 * Property summary
 * @export
 * @interface PropertyEnrichmentV1PropertySummary
 */
export interface PropertyEnrichmentV1PropertySummary {
    /**
     * 
     * @type {string}
     * @memberof PropertyEnrichmentV1PropertySummary
     */
    'propertyType'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PropertyEnrichmentV1PropertySummary
     */
    'bedrooms'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PropertyEnrichmentV1PropertySummary
     */
    'bathrooms'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PropertyEnrichmentV1PropertySummary
     */
    'carSpaces'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PropertyEnrichmentV1PropertySummary
     */
    'landSize'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PropertyEnrichmentV1PropertySummary
     */
    'buildingSize'?: number | null;
}
/**
 * last date when results were updated
 * @export
 * @interface SalesResultsV1CityResultsDate
 */
export interface SalesResultsV1CityResultsDate {
    /**
     * Date when results were published
     * @type {string}
     * @memberof SalesResultsV1CityResultsDate
     */
    'auctionedDate'?: string | null;
    /**
     * When the results were last modified in Redis. Useful for knowing  when the listing enhancer last ran.  If Redis is not use this will be the same as Published Date
     * @type {string}
     * @memberof SalesResultsV1CityResultsDate
     */
    'lastModifiedDateTime'?: string | null;
}
/**
 * summary of report for a given city
 * @export
 * @interface SalesResultsV1CityResultsSummary
 */
export interface SalesResultsV1CityResultsSummary {
    /**
     * total number for auction
     * @type {number}
     * @memberof SalesResultsV1CityResultsSummary
     */
    'numberListedForAuction'?: number | null;
    /**
     * number withdrawn
     * @type {number}
     * @memberof SalesResultsV1CityResultsSummary
     */
    'numberWithdrawn'?: number | null;
    /**
     * number not reported
     * @type {number}
     * @memberof SalesResultsV1CityResultsSummary
     */
    'numberUnreported'?: number | null;
    /**
     * number auctioned
     * @type {number}
     * @memberof SalesResultsV1CityResultsSummary
     */
    'numberAuctioned'?: number | null;
    /**
     * solde number
     * @type {number}
     * @memberof SalesResultsV1CityResultsSummary
     */
    'numberSold'?: number | null;
    /**
     * total
     * @type {number}
     * @memberof SalesResultsV1CityResultsSummary
     */
    'totalSales'?: number | null;
    /**
     * median for auctioned
     * @type {number}
     * @memberof SalesResultsV1CityResultsSummary
     */
    'median'?: number | null;
    /**
     * adjusted clearance rate
     * @type {number}
     * @memberof SalesResultsV1CityResultsSummary
     */
    'adjClearanceRate'?: number | null;
    /**
     * Date when results were published
     * @type {string}
     * @memberof SalesResultsV1CityResultsSummary
     */
    'auctionedDate'?: string | null;
    /**
     * When the results were last modified in Redis. Useful for knowing  when the listing enhancer last ran.  If Redis is not use this will be the same as Published Date
     * @type {string}
     * @memberof SalesResultsV1CityResultsSummary
     */
    'lastModifiedDateTime'?: string | null;
}
/**
 * Encapsulates the details of a geo location, long/lat
 * @export
 * @interface SalesResultsV1GeoLocation
 */
export interface SalesResultsV1GeoLocation {
    /**
     * The property\'s Latitude
     * @type {number}
     * @memberof SalesResultsV1GeoLocation
     */
    'latitude': number;
    /**
     * The property\'s Longitude
     * @type {number}
     * @memberof SalesResultsV1GeoLocation
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface SalesResultsV1SaleListing
 */
export interface SalesResultsV1SaleListing {
    /**
     * Gets or Sets UnitNumber
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'unitNumber'?: string | null;
    /**
     * Gets or Sets StreetNumber
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'streetNumber'?: string | null;
    /**
     * Gets or Sets StreetName
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'streetName'?: string | null;
    /**
     * Gets or Sets StreetType
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'streetType'?: string | null;
    /**
     * Gets or Sets Suburb
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'suburb'?: string | null;
    /**
     * Gets or Sets Postcode
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'postcode'?: string | null;
    /**
     * Gets or Sets State
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'state'?: string | null;
    /**
     * 
     * @type {SalesResultsV1GeoLocation}
     * @memberof SalesResultsV1SaleListing
     */
    'geoLocation'?: SalesResultsV1GeoLocation;
    /**
     * Gets or Sets PropertyType
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'propertyType'?: string | null;
    /**
     * Gets or Sets Bedrooms
     * @type {number}
     * @memberof SalesResultsV1SaleListing
     */
    'bedrooms'?: number | null;
    /**
     * Gets or Sets Bathrooms
     * @type {number}
     * @memberof SalesResultsV1SaleListing
     */
    'bathrooms'?: number | null;
    /**
     * Gets or Sets Carspaces
     * @type {number}
     * @memberof SalesResultsV1SaleListing
     */
    'carspaces'?: number | null;
    /**
     * Gets or Sets Price
     * @type {number}
     * @memberof SalesResultsV1SaleListing
     */
    'price'?: number | null;
    /**
     * Gets or Sets Result
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'result'?: string | null;
    /**
     * Gets or Sets Agent
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'agent'?: string | null;
    /**
     * Gets or Sets AgencyName
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'agencyName'?: string | null;
    /**
     * Gets or Sets AgencyProfilePageUrl
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'agencyProfilePageUrl'?: string | null;
    /**
     * Listing id on Domain
     * @type {number}
     * @memberof SalesResultsV1SaleListing
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SalesResultsV1SaleListing
     */
    'agencyId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof SalesResultsV1SaleListing
     */
    'propertyDetailsUrl'?: string | null;
}
/**
 * School
 * @export
 * @interface SchoolsV2School
 */
export interface SchoolsV2School {
    /**
     * Gets or Sets SchoolSector
     * @type {string}
     * @memberof SchoolsV2School
     */
    'schoolSector'?: SchoolsV2SchoolSchoolSectorEnum;
    /**
     * Gets or Sets SchoolType
     * @type {string}
     * @memberof SchoolsV2School
     */
    'schoolType'?: SchoolsV2SchoolSchoolTypeEnum;
    /**
     * Gets or Sets Gender
     * @type {string}
     * @memberof SchoolsV2School
     */
    'gender'?: SchoolsV2SchoolGenderEnum;
    /**
     * Gets or Sets Name
     * @type {string}
     * @memberof SchoolsV2School
     */
    'name'?: string | null;
    /**
     * Gets or Sets Suburb
     * @type {string}
     * @memberof SchoolsV2School
     */
    'suburb'?: string | null;
    /**
     * Gets or Sets State
     * @type {string}
     * @memberof SchoolsV2School
     */
    'state'?: string | null;
    /**
     * Gets or Sets Postcode
     * @type {string}
     * @memberof SchoolsV2School
     */
    'postcode'?: string | null;
    /**
     * Gets or Sets Centroid
     * @type {string}
     * @memberof SchoolsV2School
     */
    'centroid'?: string | null;
    /**
     * 
     * @type {SchoolsV2SchoolProfile}
     * @memberof SchoolsV2School
     */
    'profile'?: SchoolsV2SchoolProfile;
    /**
     * Gets or Sets Catchments
     * @type {Array<SchoolsV2SchoolCatchment>}
     * @memberof SchoolsV2School
     */
    'catchments'?: Array<SchoolsV2SchoolCatchment> | null;
    /**
     * Gets or Sets DomainId
     * @type {number}
     * @memberof SchoolsV2School
     */
    'domainId'?: number | null;
}

export const SchoolsV2SchoolSchoolSectorEnum = {
    Catholic: 'Catholic',
    Government: 'Government',
    Independent: 'Independent'
} as const;

export type SchoolsV2SchoolSchoolSectorEnum = typeof SchoolsV2SchoolSchoolSectorEnum[keyof typeof SchoolsV2SchoolSchoolSectorEnum];
export const SchoolsV2SchoolSchoolTypeEnum = {
    Combined: 'Combined',
    Primary: 'Primary',
    Secondary: 'Secondary',
    Special: 'Special'
} as const;

export type SchoolsV2SchoolSchoolTypeEnum = typeof SchoolsV2SchoolSchoolTypeEnum[keyof typeof SchoolsV2SchoolSchoolTypeEnum];
export const SchoolsV2SchoolGenderEnum = {
    Boys: 'Boys',
    Girls: 'Girls',
    CoEd: 'CoEd'
} as const;

export type SchoolsV2SchoolGenderEnum = typeof SchoolsV2SchoolGenderEnum[keyof typeof SchoolsV2SchoolGenderEnum];

/**
 * SchoolCatchment
 * @export
 * @interface SchoolsV2SchoolCatchment
 */
export interface SchoolsV2SchoolCatchment {
    /**
     * Gets or Sets Type
     * @type {string}
     * @memberof SchoolsV2SchoolCatchment
     */
    'type'?: SchoolsV2SchoolCatchmentTypeEnum;
}

export const SchoolsV2SchoolCatchmentTypeEnum = {
    Primary: 'Primary',
    Secondary: 'Secondary'
} as const;

export type SchoolsV2SchoolCatchmentTypeEnum = typeof SchoolsV2SchoolCatchmentTypeEnum[keyof typeof SchoolsV2SchoolCatchmentTypeEnum];

/**
 * SchoolProfile
 * @export
 * @interface SchoolsV2SchoolProfile
 */
export interface SchoolsV2SchoolProfile {
    /**
     * Website for the school
     * @type {string}
     * @memberof SchoolsV2SchoolProfile
     */
    'url'?: string | null;
    /**
     * The range of year levels offered by the school.
     * @type {string}
     * @memberof SchoolsV2SchoolProfile
     */
    'yearRange'?: string | null;
    /**
     * The Index of Community Socio-Educational Advantage score for the school. This score is derived from a number of variables including parental school and non-school education and occupation, the school’s geographical location and proportion of Indigenous students.
     * @type {number}
     * @memberof SchoolsV2SchoolProfile
     */
    'icsea'?: number | null;
    /**
     * The percentage of students positioned in the lowest socio-educational advantage quarter.
     * @type {number}
     * @memberof SchoolsV2SchoolProfile
     */
    'bottomSeaQuarter'?: number | null;
    /**
     * The percentage of students positioned in the lower middle socio-educational advantage quarter.
     * @type {number}
     * @memberof SchoolsV2SchoolProfile
     */
    'lowerMiddleSeaQuarter'?: number | null;
    /**
     * The percentage of students positioned in the higher middle socio-educational advantage quarter.
     * @type {number}
     * @memberof SchoolsV2SchoolProfile
     */
    'upperMiddleSeaQuarter'?: number | null;
    /**
     * The percentage of students positioned in the highest socio-educational advantage quarter.
     * @type {number}
     * @memberof SchoolsV2SchoolProfile
     */
    'topSeaQuarter'?: number | null;
    /**
     * The total number of students, including both full-time and part-time students, who are enrolled at the school in the calendar year specified.
     * @type {number}
     * @memberof SchoolsV2SchoolProfile
     */
    'totalEnrolments'?: number | null;
    /**
     * The total number of female students, including both full-time and part-time students, who are enrolled at the school in the calendar year specified.
     * @type {number}
     * @memberof SchoolsV2SchoolProfile
     */
    'girlsEnrolments'?: number | null;
    /**
     * The total number of male students, including full-time and part-time students, who are enrolled at the school in the calendar year specified.
     * @type {number}
     * @memberof SchoolsV2SchoolProfile
     */
    'boysEnrolments'?: number | null;
}
/**
 * SchoolWithDistance
 * @export
 * @interface SchoolsV2SchoolWithDistance
 */
export interface SchoolsV2SchoolWithDistance {
    /**
     * Gets or Sets Distance
     * @type {number}
     * @memberof SchoolsV2SchoolWithDistance
     */
    'distance'?: number | null;
    /**
     * 
     * @type {SchoolsV2School}
     * @memberof SchoolsV2SchoolWithDistance
     */
    'school'?: SchoolsV2School;
}
/**
 * ContractInfo
 * @export
 * @interface SocialBoostV1ContractInfo
 */
export interface SocialBoostV1ContractInfo {
    /**
     * Gets or Sets Id
     * @type {number}
     * @memberof SocialBoostV1ContractInfo
     */
    'id'?: number | null;
    /**
     * Gets or Sets BookingProductId
     * @type {number}
     * @memberof SocialBoostV1ContractInfo
     */
    'bookingProductId'?: number | null;
    /**
     * Gets or Sets AgencyId
     * @type {number}
     * @memberof SocialBoostV1ContractInfo
     */
    'agencyId'?: number | null;
    /**
     * Gets or Sets StartDate
     * @type {string}
     * @memberof SocialBoostV1ContractInfo
     */
    'startDate'?: string | null;
    /**
     * Gets or Sets EndDate
     * @type {string}
     * @memberof SocialBoostV1ContractInfo
     */
    'endDate'?: string | null;
    /**
     * Gets or Sets FinishedDate
     * @type {string}
     * @memberof SocialBoostV1ContractInfo
     */
    'finishedDate'?: string | null;
    /**
     * Gets or Sets Attributes
     * @type {string}
     * @memberof SocialBoostV1ContractInfo
     */
    'attributes'?: string | null;
    /**
     * Gets or Sets AgentId
     * @type {string}
     * @memberof SocialBoostV1ContractInfo
     */
    'agentId'?: string | null;
    /**
     * Gets or Sets IsAgentContract
     * @type {boolean}
     * @memberof SocialBoostV1ContractInfo
     */
    'isAgentContract'?: boolean | null;
}
/**
 * ListingRateInfo
 * @export
 * @interface SocialBoostV1ListingRateInfo
 */
export interface SocialBoostV1ListingRateInfo {
    /**
     * Gets or Sets ProductListingLevel
     * @type {string}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'productListingLevel'?: SocialBoostV1ListingRateInfoProductListingLevelEnum;
    /**
     * Gets or Sets ProductListingRule
     * @type {string}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'productListingRule'?: SocialBoostV1ListingRateInfoProductListingRuleEnum;
    /**
     * Gets or Sets BookingProductId
     * @type {number}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'bookingProductId'?: number | null;
    /**
     * Gets or Sets BookingProductRateId
     * @type {number}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'bookingProductRateId'?: number | null;
    /**
     * Gets or Sets BookingProductName
     * @type {string}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'bookingProductName'?: string | null;
    /**
     * Gets or Sets DurationInDays
     * @type {number}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'durationInDays'?: number | null;
    /**
     * Gets or Sets CostExGst
     * @type {number}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'costExGst'?: number | null;
    /**
     * Gets or Sets CostIncGst
     * @type {number}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'costIncGst'?: number | null;
    /**
     * Gets or Sets ZoneId
     * @type {number}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'zoneId'?: number | null;
    /**
     * Gets or Sets ProductAttributes
     * @type {string}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'productAttributes'?: string | null;
    /**
     * Gets or Sets RateAttributes
     * @type {string}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'rateAttributes'?: string | null;
    /**
     * Gets or Sets BookingMethod
     * @type {string}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'bookingMethod'?: string | null;
    /**
     * Gets or Sets ProductForRural
     * @type {boolean}
     * @memberof SocialBoostV1ListingRateInfo
     */
    'productForRural'?: boolean | null;
}

export const SocialBoostV1ListingRateInfoProductListingLevelEnum = {
    None: 'None',
    PlatinumExtend: 'PlatinumExtend',
    Platinum: 'Platinum',
    Gold: 'Gold',
    Silver: 'Silver',
    Branded: 'Branded',
    Tier1: 'Tier1',
    Tier2: 'Tier2',
    Tier3: 'Tier3'
} as const;

export type SocialBoostV1ListingRateInfoProductListingLevelEnum = typeof SocialBoostV1ListingRateInfoProductListingLevelEnum[keyof typeof SocialBoostV1ListingRateInfoProductListingLevelEnum];
export const SocialBoostV1ListingRateInfoProductListingRuleEnum = {
    None: 'None',
    EarlyAccess: 'EarlyAccess',
    SocialBoostAll: 'SocialBoostAll',
    SocialBoostCasual: 'SocialBoostCasual',
    SocialBoostRuralAll: 'SocialBoostRuralAll',
    SocialBoostRuralCasual: 'SocialBoostRuralCasual',
    SocialBoostAgent: 'SocialBoostAgent',
    SocialBoostRuralAgent: 'SocialBoostRuralAgent'
} as const;

export type SocialBoostV1ListingRateInfoProductListingRuleEnum = typeof SocialBoostV1ListingRateInfoProductListingRuleEnum[keyof typeof SocialBoostV1ListingRateInfoProductListingRuleEnum];

/**
 * GetRatesForNewSocialBoostResponse
 * @export
 * @interface SocialBoostV1RateForNewSocialBoost
 */
export interface SocialBoostV1RateForNewSocialBoost {
    /**
     * Gets or Sets Reason
     * @type {string}
     * @memberof SocialBoostV1RateForNewSocialBoost
     */
    'reason'?: SocialBoostV1RateForNewSocialBoostReasonEnum;
    /**
     * 
     * @type {SocialBoostV1ContractInfo}
     * @memberof SocialBoostV1RateForNewSocialBoost
     */
    'contract'?: SocialBoostV1ContractInfo;
    /**
     * 
     * @type {SocialBoostV1ListingRateInfo}
     * @memberof SocialBoostV1RateForNewSocialBoost
     */
    'rate'?: SocialBoostV1ListingRateInfo;
}

export const SocialBoostV1RateForNewSocialBoostReasonEnum = {
    BasedOnContract: 'BasedOnContract',
    NoContractFound: 'NoContractFound',
    NoRateFound: 'NoRateFound',
    PropertyTypeExcluded: 'PropertyTypeExcluded'
} as const;

export type SocialBoostV1RateForNewSocialBoostReasonEnum = typeof SocialBoostV1RateForNewSocialBoostReasonEnum[keyof typeof SocialBoostV1RateForNewSocialBoostReasonEnum];

/**
 * 
 * @export
 * @interface SocialBoostV1RateForNewSocialBoostRequestModel
 */
export interface SocialBoostV1RateForNewSocialBoostRequestModel {
    /**
     * Id of the agency for whom rates are to be calculated.
     * @type {number}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'agencyId': number;
    /**
     * The first name of the primary agent associated with the listing.
     * @type {string}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'agentFirstName': string;
    /**
     * The last name of the primary agent associated with the listing
     * @type {string}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'agentLastName': string;
    /**
     * The email of the primary agent associated with the listing.
     * @type {string}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'agentEmail': string;
    /**
     * Suburb for which rates are to be calculated.
     * @type {string}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'suburb': string;
    /**
     * Postcode for which rates are to be calculated.
     * @type {string}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'postcode': string;
    /**
     * State for which rates are to be calculated
     * @type {string}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'state': string;
    /**
     * The property type of the listing e.g. House
     * @type {string}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'propertyType': SocialBoostV1RateForNewSocialBoostRequestModelPropertyTypeEnum;
    /**
     * Whether to return the normal or rural rates
     * @type {boolean}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'isRural': boolean;
    /**
     * Type of the listing whether sale or rent
     * @type {string}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'listingType': SocialBoostV1RateForNewSocialBoostRequestModelListingTypeEnum;
    /**
     * The value of the listing
     * @type {number}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'price': number;
    /**
     * The intended channel of the listing.
     * @type {string}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'channel': SocialBoostV1RateForNewSocialBoostRequestModelChannelEnum;
    /**
     * Date at which the booking will start. Defaults to today. Allows for returning future contracts/price changes.
     * @type {string}
     * @memberof SocialBoostV1RateForNewSocialBoostRequestModel
     */
    'bookingStartDate'?: string | null;
}

export const SocialBoostV1RateForNewSocialBoostRequestModelPropertyTypeEnum = {
    Unknown: 'Unknown',
    AcreageSemiRural: 'AcreageSemiRural',
    ApartmentUnitFlat: 'ApartmentUnitFlat',
    Aquaculture: 'Aquaculture',
    BlockOfUnits: 'BlockOfUnits',
    Carspace: 'Carspace',
    DairyFarming: 'DairyFarming',
    DevelopmentSite: 'DevelopmentSite',
    Duplex: 'Duplex',
    Farm: 'Farm',
    FishingForestry: 'FishingForestry',
    NewHomeDesigns: 'NewHomeDesigns',
    House: 'House',
    NewHouseLand: 'NewHouseLand',
    IrrigationServices: 'IrrigationServices',
    NewLand: 'NewLand',
    Livestock: 'Livestock',
    NewApartments: 'NewApartments',
    Penthouse: 'Penthouse',
    Retirement: 'Retirement',
    RetirementVillage: 'RetirementVillage',
    Rural: 'Rural',
    SemiDetached: 'SemiDetached',
    SpecialistFarm: 'SpecialistFarm',
    Studio: 'Studio',
    Terrace: 'Terrace',
    Townhouse: 'Townhouse',
    VacantLand: 'VacantLand',
    Villa: 'Villa',
    Cropping: 'Cropping',
    Viticulture: 'Viticulture',
    MixedFarming: 'MixedFarming',
    Grazing: 'Grazing',
    Horticulture: 'Horticulture',
    Equine: 'Equine',
    Farmlet: 'Farmlet',
    Orchard: 'Orchard',
    RuralLifestyle: 'RuralLifestyle'
} as const;

export type SocialBoostV1RateForNewSocialBoostRequestModelPropertyTypeEnum = typeof SocialBoostV1RateForNewSocialBoostRequestModelPropertyTypeEnum[keyof typeof SocialBoostV1RateForNewSocialBoostRequestModelPropertyTypeEnum];
export const SocialBoostV1RateForNewSocialBoostRequestModelListingTypeEnum = {
    Sale: 'Sale',
    Rent: 'Rent',
    None: 'None'
} as const;

export type SocialBoostV1RateForNewSocialBoostRequestModelListingTypeEnum = typeof SocialBoostV1RateForNewSocialBoostRequestModelListingTypeEnum[keyof typeof SocialBoostV1RateForNewSocialBoostRequestModelListingTypeEnum];
export const SocialBoostV1RateForNewSocialBoostRequestModelChannelEnum = {
    Residential: 'Residential',
    Commercial: 'Commercial',
    Business: 'Business'
} as const;

export type SocialBoostV1RateForNewSocialBoostRequestModelChannelEnum = typeof SocialBoostV1RateForNewSocialBoostRequestModelChannelEnum[keyof typeof SocialBoostV1RateForNewSocialBoostRequestModelChannelEnum];

/**
 * APMAPIModelsSuburbV2SuburbPerformanceModel
 * @export
 * @interface SuburbPerformanceStatisticsV3SuburbPerformance
 */
export interface SuburbPerformanceStatisticsV3SuburbPerformance {
    /**
     * 
     * @type {SuburbPerformanceStatisticsV3SuburbSeriesHeader}
     * @memberof SuburbPerformanceStatisticsV3SuburbPerformance
     */
    'header'?: SuburbPerformanceStatisticsV3SuburbSeriesHeader;
    /**
     * 
     * @type {SuburbPerformanceStatisticsV3SuburbSeries}
     * @memberof SuburbPerformanceStatisticsV3SuburbPerformance
     */
    'series'?: SuburbPerformanceStatisticsV3SuburbSeries;
}
/**
 * APMAPIModelsSuburbV2SeriesModel
 * @export
 * @interface SuburbPerformanceStatisticsV3SuburbSeries
 */
export interface SuburbPerformanceStatisticsV3SuburbSeries {
    /**
     * Gets or Sets SeriesInfo
     * @type {Array<SuburbPerformanceStatisticsV3SuburbSeriesInfo>}
     * @memberof SuburbPerformanceStatisticsV3SuburbSeries
     */
    'seriesInfo'?: Array<SuburbPerformanceStatisticsV3SuburbSeriesInfo> | null;
}
/**
 * APMAPIModelsSuburbV2SeriesHeaderModel
 * @export
 * @interface SuburbPerformanceStatisticsV3SuburbSeriesHeader
 */
export interface SuburbPerformanceStatisticsV3SuburbSeriesHeader {
    /**
     * Gets or Sets Suburb
     * @type {string}
     * @memberof SuburbPerformanceStatisticsV3SuburbSeriesHeader
     */
    'suburb'?: string | null;
    /**
     * Gets or Sets State
     * @type {string}
     * @memberof SuburbPerformanceStatisticsV3SuburbSeriesHeader
     */
    'state'?: string | null;
    /**
     * Gets or Sets PropertyCategory
     * @type {string}
     * @memberof SuburbPerformanceStatisticsV3SuburbSeriesHeader
     */
    'propertyCategory'?: string | null;
}
/**
 * APMAPIModelsSuburbV2SeriesInfoModel
 * @export
 * @interface SuburbPerformanceStatisticsV3SuburbSeriesInfo
 */
export interface SuburbPerformanceStatisticsV3SuburbSeriesInfo {
    /**
     * Gets or Sets Year
     * @type {number}
     * @memberof SuburbPerformanceStatisticsV3SuburbSeriesInfo
     */
    'year'?: number | null;
    /**
     * Gets or Sets Month
     * @type {number}
     * @memberof SuburbPerformanceStatisticsV3SuburbSeriesInfo
     */
    'month'?: number | null;
    /**
     * Gets or Sets Values
     * @type {{ [key: string]: any; }}
     * @memberof SuburbPerformanceStatisticsV3SuburbSeriesInfo
     */
    'values'?: { [key: string]: any; } | null;
}
/**
 * AddSubscriptionRequest
 * @export
 * @interface WebhooksV1AddSubscriptionRequest
 */
export interface WebhooksV1AddSubscriptionRequest {
    /**
     * Gets or Sets ResourceType
     * @type {string}
     * @memberof WebhooksV1AddSubscriptionRequest
     */
    'resourceType': string;
    /**
     * Gets or Sets OwnerType
     * @type {string}
     * @memberof WebhooksV1AddSubscriptionRequest
     */
    'ownerType': string;
    /**
     * Gets or Sets OwnerId
     * @type {string}
     * @memberof WebhooksV1AddSubscriptionRequest
     */
    'ownerId': string;
}
/**
 * 
 * @export
 * @interface WebhooksV1WebhookSubscription
 */
export interface WebhooksV1WebhookSubscription {
    /**
     * 
     * @type {string}
     * @memberof WebhooksV1WebhookSubscription
     */
    'id'?: string | null;
    /**
     * Gets or Sets CreatedBy
     * @type {string}
     * @memberof WebhooksV1WebhookSubscription
     */
    'createdBy'?: string | null;
    /**
     * Gets or Sets Created
     * @type {string}
     * @memberof WebhooksV1WebhookSubscription
     */
    'created'?: string | null;
    /**
     * Gets or Sets UpdatedBy
     * @type {string}
     * @memberof WebhooksV1WebhookSubscription
     */
    'updatedBy'?: string | null;
    /**
     * Gets or Sets Updated
     * @type {string}
     * @memberof WebhooksV1WebhookSubscription
     */
    'updated'?: string | null;
    /**
     * Gets or Sets DeletedBy
     * @type {string}
     * @memberof WebhooksV1WebhookSubscription
     */
    'deletedBy'?: string | null;
    /**
     * Gets or Sets Deleted
     * @type {string}
     * @memberof WebhooksV1WebhookSubscription
     */
    'deleted'?: string | null;
    /**
     * Gets or Sets SubscriptionId
     * @type {string}
     * @memberof WebhooksV1WebhookSubscription
     */
    'subscriptionId'?: string | null;
    /**
     * Gets or Sets SubscriberId
     * @type {string}
     * @memberof WebhooksV1WebhookSubscription
     */
    'subscriberId'?: string | null;
    /**
     * Gets or Sets OwnerType
     * @type {string}
     * @memberof WebhooksV1WebhookSubscription
     */
    'ownerType'?: string | null;
    /**
     * Gets or Sets OwnerId
     * @type {string}
     * @memberof WebhooksV1WebhookSubscription
     */
    'ownerId'?: string | null;
    /**
     * Gets or Sets ResourceType
     * @type {string}
     * @memberof WebhooksV1WebhookSubscription
     */
    'resourceType'?: string | null;
}

/**
 * AVMApi - axios parameter creator
 * @export
 */
export const AVMApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a bank grade valuation and PDF report for a given property address or GnafPId.
         * @param {DomainAvmV1Request} [domainAvmV1Request] The request to get the valuation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        avmGetValuation: async (domainAvmV1Request?: DomainAvmV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/avm/getvaluation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_avm_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_avm_read"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domainAvmV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AVMApi - functional programming interface
 * @export
 */
export const AVMApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AVMApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a bank grade valuation and PDF report for a given property address or GnafPId.
         * @param {DomainAvmV1Request} [domainAvmV1Request] The request to get the valuation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async avmGetValuation(domainAvmV1Request?: DomainAvmV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainAvmV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.avmGetValuation(domainAvmV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AVMApi - factory interface
 * @export
 */
export const AVMApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AVMApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a bank grade valuation and PDF report for a given property address or GnafPId.
         * @param {DomainAvmV1Request} [domainAvmV1Request] The request to get the valuation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        avmGetValuation(domainAvmV1Request?: DomainAvmV1Request, options?: any): AxiosPromise<DomainAvmV1Response> {
            return localVarFp.avmGetValuation(domainAvmV1Request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AVMApi - object-oriented interface
 * @export
 * @class AVMApi
 * @extends {BaseAPI}
 */
export class AVMApi extends BaseAPI {
    /**
     * 
     * @summary Creates a bank grade valuation and PDF report for a given property address or GnafPId.
     * @param {DomainAvmV1Request} [domainAvmV1Request] The request to get the valuation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AVMApi
     */
    public avmGetValuation(domainAvmV1Request?: DomainAvmV1Request, options?: AxiosRequestConfig) {
        return AVMApiFp(this.configuration).avmGetValuation(domainAvmV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AddressLocatorsApi - axios parameter creator
 * @export
 */
export const AddressLocatorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this endpoint to retrieve IDs that may be used to query information from other endpoints.    For example use `id` of the `Suburb` level to query [`demographics`](/docs/v1/apis/pkg_properties_locations/references/demographics_get)
         * @summary Retrieves matching ids for use in other services.
         * @param {string} [searchLevel] Requested search level. Valid values are: &#x60;Address&#x60;, and &#x60;Suburb&#x60;
         * @param {string} [unitNumber] Unit number
         * @param {string} [streetNumber] Street number
         * @param {string} [streetName] Street name
         * @param {string} [streetType] Street type
         * @param {string} [suburb] Suburb
         * @param {string} [state] State
         * @param {string} [postcode] Postcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressLocatorsGet: async (searchLevel?: string, unitNumber?: string, streetNumber?: string, streetName?: string, streetType?: string, suburb?: string, state?: string, postcode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/addressLocators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_addresslocators_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_addresslocators_read"], configuration)

            if (searchLevel !== undefined) {
                localVarQueryParameter['searchLevel'] = searchLevel;
            }

            if (unitNumber !== undefined) {
                localVarQueryParameter['unitNumber'] = unitNumber;
            }

            if (streetNumber !== undefined) {
                localVarQueryParameter['streetNumber'] = streetNumber;
            }

            if (streetName !== undefined) {
                localVarQueryParameter['streetName'] = streetName;
            }

            if (streetType !== undefined) {
                localVarQueryParameter['streetType'] = streetType;
            }

            if (suburb !== undefined) {
                localVarQueryParameter['suburb'] = suburb;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (postcode !== undefined) {
                localVarQueryParameter['postcode'] = postcode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressLocatorsApi - functional programming interface
 * @export
 */
export const AddressLocatorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressLocatorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this endpoint to retrieve IDs that may be used to query information from other endpoints.    For example use `id` of the `Suburb` level to query [`demographics`](/docs/v1/apis/pkg_properties_locations/references/demographics_get)
         * @summary Retrieves matching ids for use in other services.
         * @param {string} [searchLevel] Requested search level. Valid values are: &#x60;Address&#x60;, and &#x60;Suburb&#x60;
         * @param {string} [unitNumber] Unit number
         * @param {string} [streetNumber] Street number
         * @param {string} [streetName] Street name
         * @param {string} [streetType] Street type
         * @param {string} [suburb] Suburb
         * @param {string} [state] State
         * @param {string} [postcode] Postcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressLocatorsGet(searchLevel?: string, unitNumber?: string, streetNumber?: string, streetName?: string, streetType?: string, suburb?: string, state?: string, postcode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddressLocatorsV1AddressDataModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressLocatorsGet(searchLevel, unitNumber, streetNumber, streetName, streetType, suburb, state, postcode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddressLocatorsApi - factory interface
 * @export
 */
export const AddressLocatorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressLocatorsApiFp(configuration)
    return {
        /**
         * Use this endpoint to retrieve IDs that may be used to query information from other endpoints.    For example use `id` of the `Suburb` level to query [`demographics`](/docs/v1/apis/pkg_properties_locations/references/demographics_get)
         * @summary Retrieves matching ids for use in other services.
         * @param {string} [searchLevel] Requested search level. Valid values are: &#x60;Address&#x60;, and &#x60;Suburb&#x60;
         * @param {string} [unitNumber] Unit number
         * @param {string} [streetNumber] Street number
         * @param {string} [streetName] Street name
         * @param {string} [streetType] Street type
         * @param {string} [suburb] Suburb
         * @param {string} [state] State
         * @param {string} [postcode] Postcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressLocatorsGet(searchLevel?: string, unitNumber?: string, streetNumber?: string, streetName?: string, streetType?: string, suburb?: string, state?: string, postcode?: string, options?: any): AxiosPromise<Array<AddressLocatorsV1AddressDataModel>> {
            return localVarFp.addressLocatorsGet(searchLevel, unitNumber, streetNumber, streetName, streetType, suburb, state, postcode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressLocatorsApi - object-oriented interface
 * @export
 * @class AddressLocatorsApi
 * @extends {BaseAPI}
 */
export class AddressLocatorsApi extends BaseAPI {
    /**
     * Use this endpoint to retrieve IDs that may be used to query information from other endpoints.    For example use `id` of the `Suburb` level to query [`demographics`](/docs/v1/apis/pkg_properties_locations/references/demographics_get)
     * @summary Retrieves matching ids for use in other services.
     * @param {string} [searchLevel] Requested search level. Valid values are: &#x60;Address&#x60;, and &#x60;Suburb&#x60;
     * @param {string} [unitNumber] Unit number
     * @param {string} [streetNumber] Street number
     * @param {string} [streetName] Street name
     * @param {string} [streetType] Street type
     * @param {string} [suburb] Suburb
     * @param {string} [state] State
     * @param {string} [postcode] Postcode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressLocatorsApi
     */
    public addressLocatorsGet(searchLevel?: string, unitNumber?: string, streetNumber?: string, streetName?: string, streetType?: string, suburb?: string, state?: string, postcode?: string, options?: AxiosRequestConfig) {
        return AddressLocatorsApiFp(this.configuration).addressLocatorsGet(searchLevel, unitNumber, streetNumber, streetName, streetType, suburb, state, postcode, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AgenciesApi - axios parameter creator
 * @export
 */
export const AgenciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Enables automatic creation of a test agency in our sandbox environment.
         * @summary Create a test agency for sandbox testing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesCreateTestAgency: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/agencies/_testAgency`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a specific agency details.
         * @param {number} id Agency identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agenciesGet', 'id', id)
            const localVarPath = `/v1/agencies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
         * @summary Retrieves listings across all channels for a specific agency matching specified criteria.
         * @param {number} id Agency identifier
         * @param {AgenciesGetListingsListingStatusFilterEnum} [listingStatusFilter] Filter for listing status
         * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGetListings: async (id: number, listingStatusFilter?: AgenciesGetListingsListingStatusFilterEnum, dateUpdatedSince?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agenciesGetListings', 'id', id)
            const localVarPath = `/v1/agencies/{id}/listings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            if (listingStatusFilter !== undefined) {
                localVarQueryParameter['listingStatusFilter'] = listingStatusFilter;
            }

            if (dateUpdatedSince !== undefined) {
                localVarQueryParameter['dateUpdatedSince'] = (dateUpdatedSince as any instanceof Date) ?
                    (dateUpdatedSince as any).toISOString() :
                    dateUpdatedSince;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves statistics for a specific agency.
         * @param {number} id Agency identifier
         * @param {AgenciesGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {AgenciesGetStatisticsStatusFilterEnum} [statusFilter] Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60;
         * @param {AgenciesGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
         * @param {number} [pageNumber] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGetStatistics: async (id: number, timePeriod?: AgenciesGetStatisticsTimePeriodEnum, statusFilter?: AgenciesGetStatisticsStatusFilterEnum, channel?: AgenciesGetStatisticsChannelEnum, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agenciesGetStatistics', 'id', id)
            const localVarPath = `/v1/agencies/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }

            if (statusFilter !== undefined) {
                localVarQueryParameter['statusFilter'] = statusFilter;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.    See `X-Total-Count` header for result count.
         * @summary Retrieves summary of agency search.
         * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesHead: async (q?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/agencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br>The ```q``` parameter supports:  <ul>    <li>name: search by name eg. ```name:\"Agency XYZ\"```</li>    <li>providerId: search by providerId. eg. ```providerId:\"ABC Software\"```</li>    <li>domainUrl: search by domainUrl. eg. ```domainUrl:\"agency-xyz\"```</li>    <li>dateUpdated: search by dateUpdated. eg. ```dateUpdated:\"2016-12-25\"```</li>    <li>suburbId: search by suburbId. Lists supported.  eg. ```suburbId:1``` eg. ```suburbId:(1 OR 2 OR 3)```.  Can include related suburbs by adding ```in:related```</li>    <li>accountType: search by account type. Lists supported.  eg. ```accountType:residential``` eg. ```accountType:(residential OR commercial)``` Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business</li>    <li>      ```in:all``` includes archived agencies (archived agencies excluded by default)</li>    <li>      ```-is:selfservice``` excludes selfservice</li>  </ul>
         * @summary Retrieves summary of agencies matching the specified criteria.
         * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesSearch: async (q?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/agencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgenciesApi - functional programming interface
 * @export
 */
export const AgenciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgenciesApiAxiosParamCreator(configuration)
    return {
        /**
         * Enables automatic creation of a test agency in our sandbox environment.
         * @summary Create a test agency for sandbox testing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agenciesCreateTestAgency(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenciesV2Agency>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agenciesCreateTestAgency(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a specific agency details.
         * @param {number} id Agency identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agenciesGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenciesV2Agency>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agenciesGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
         * @summary Retrieves listings across all channels for a specific agency matching specified criteria.
         * @param {number} id Agency identifier
         * @param {AgenciesGetListingsListingStatusFilterEnum} [listingStatusFilter] Filter for listing status
         * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agenciesGetListings(id: number, listingStatusFilter?: AgenciesGetListingsListingStatusFilterEnum, dateUpdatedSince?: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainPublicAdapterWebApiModelsV1ListingsListing>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agenciesGetListings(id, listingStatusFilter, dateUpdatedSince, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves statistics for a specific agency.
         * @param {number} id Agency identifier
         * @param {AgenciesGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {AgenciesGetStatisticsStatusFilterEnum} [statusFilter] Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60;
         * @param {AgenciesGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
         * @param {number} [pageNumber] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agenciesGetStatistics(id: number, timePeriod?: AgenciesGetStatisticsTimePeriodEnum, statusFilter?: AgenciesGetStatisticsStatusFilterEnum, channel?: AgenciesGetStatisticsChannelEnum, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListingPerformanceV1Statistics>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agenciesGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.    See `X-Total-Count` header for result count.
         * @summary Retrieves summary of agency search.
         * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agenciesHead(q?: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agenciesHead(q, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br>The ```q``` parameter supports:  <ul>    <li>name: search by name eg. ```name:\"Agency XYZ\"```</li>    <li>providerId: search by providerId. eg. ```providerId:\"ABC Software\"```</li>    <li>domainUrl: search by domainUrl. eg. ```domainUrl:\"agency-xyz\"```</li>    <li>dateUpdated: search by dateUpdated. eg. ```dateUpdated:\"2016-12-25\"```</li>    <li>suburbId: search by suburbId. Lists supported.  eg. ```suburbId:1``` eg. ```suburbId:(1 OR 2 OR 3)```.  Can include related suburbs by adding ```in:related```</li>    <li>accountType: search by account type. Lists supported.  eg. ```accountType:residential``` eg. ```accountType:(residential OR commercial)``` Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business</li>    <li>      ```in:all``` includes archived agencies (archived agencies excluded by default)</li>    <li>      ```-is:selfservice``` excludes selfservice</li>  </ul>
         * @summary Retrieves summary of agencies matching the specified criteria.
         * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agenciesSearch(q?: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AgenciesV2AgencySummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agenciesSearch(q, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AgenciesApi - factory interface
 * @export
 */
export const AgenciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgenciesApiFp(configuration)
    return {
        /**
         * Enables automatic creation of a test agency in our sandbox environment.
         * @summary Create a test agency for sandbox testing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesCreateTestAgency(options?: any): AxiosPromise<AgenciesV2Agency> {
            return localVarFp.agenciesCreateTestAgency(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a specific agency details.
         * @param {number} id Agency identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGet(id: number, options?: any): AxiosPromise<AgenciesV2Agency> {
            return localVarFp.agenciesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
         * @summary Retrieves listings across all channels for a specific agency matching specified criteria.
         * @param {number} id Agency identifier
         * @param {AgenciesGetListingsListingStatusFilterEnum} [listingStatusFilter] Filter for listing status
         * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGetListings(id: number, listingStatusFilter?: AgenciesGetListingsListingStatusFilterEnum, dateUpdatedSince?: string, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<Array<DomainPublicAdapterWebApiModelsV1ListingsListing>> {
            return localVarFp.agenciesGetListings(id, listingStatusFilter, dateUpdatedSince, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves statistics for a specific agency.
         * @param {number} id Agency identifier
         * @param {AgenciesGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {AgenciesGetStatisticsStatusFilterEnum} [statusFilter] Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60;
         * @param {AgenciesGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
         * @param {number} [pageNumber] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGetStatistics(id: number, timePeriod?: AgenciesGetStatisticsTimePeriodEnum, statusFilter?: AgenciesGetStatisticsStatusFilterEnum, channel?: AgenciesGetStatisticsChannelEnum, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<Array<ListingPerformanceV1Statistics>> {
            return localVarFp.agenciesGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.    See `X-Total-Count` header for result count.
         * @summary Retrieves summary of agency search.
         * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesHead(q?: string, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<void> {
            return localVarFp.agenciesHead(q, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * <br>The ```q``` parameter supports:  <ul>    <li>name: search by name eg. ```name:\"Agency XYZ\"```</li>    <li>providerId: search by providerId. eg. ```providerId:\"ABC Software\"```</li>    <li>domainUrl: search by domainUrl. eg. ```domainUrl:\"agency-xyz\"```</li>    <li>dateUpdated: search by dateUpdated. eg. ```dateUpdated:\"2016-12-25\"```</li>    <li>suburbId: search by suburbId. Lists supported.  eg. ```suburbId:1``` eg. ```suburbId:(1 OR 2 OR 3)```.  Can include related suburbs by adding ```in:related```</li>    <li>accountType: search by account type. Lists supported.  eg. ```accountType:residential``` eg. ```accountType:(residential OR commercial)``` Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business</li>    <li>      ```in:all``` includes archived agencies (archived agencies excluded by default)</li>    <li>      ```-is:selfservice``` excludes selfservice</li>  </ul>
         * @summary Retrieves summary of agencies matching the specified criteria.
         * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesSearch(q?: string, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<Array<AgenciesV2AgencySummary>> {
            return localVarFp.agenciesSearch(q, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AgenciesApi - object-oriented interface
 * @export
 * @class AgenciesApi
 * @extends {BaseAPI}
 */
export class AgenciesApi extends BaseAPI {
    /**
     * Enables automatic creation of a test agency in our sandbox environment.
     * @summary Create a test agency for sandbox testing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgenciesApi
     */
    public agenciesCreateTestAgency(options?: AxiosRequestConfig) {
        return AgenciesApiFp(this.configuration).agenciesCreateTestAgency(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a specific agency details.
     * @param {number} id Agency identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgenciesApi
     */
    public agenciesGet(id: number, options?: AxiosRequestConfig) {
        return AgenciesApiFp(this.configuration).agenciesGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
     * @summary Retrieves listings across all channels for a specific agency matching specified criteria.
     * @param {number} id Agency identifier
     * @param {AgenciesGetListingsListingStatusFilterEnum} [listingStatusFilter] Filter for listing status
     * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgenciesApi
     */
    public agenciesGetListings(id: number, listingStatusFilter?: AgenciesGetListingsListingStatusFilterEnum, dateUpdatedSince?: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AgenciesApiFp(this.configuration).agenciesGetListings(id, listingStatusFilter, dateUpdatedSince, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves statistics for a specific agency.
     * @param {number} id Agency identifier
     * @param {AgenciesGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
     * @param {AgenciesGetStatisticsStatusFilterEnum} [statusFilter] Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60;
     * @param {AgenciesGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
     * @param {number} [pageNumber] Page number
     * @param {number} [pageSize] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgenciesApi
     */
    public agenciesGetStatistics(id: number, timePeriod?: AgenciesGetStatisticsTimePeriodEnum, statusFilter?: AgenciesGetStatisticsStatusFilterEnum, channel?: AgenciesGetStatisticsChannelEnum, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AgenciesApiFp(this.configuration).agenciesGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.    See `X-Total-Count` header for result count.
     * @summary Retrieves summary of agency search.
     * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgenciesApi
     */
    public agenciesHead(q?: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AgenciesApiFp(this.configuration).agenciesHead(q, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br>The ```q``` parameter supports:  <ul>    <li>name: search by name eg. ```name:\"Agency XYZ\"```</li>    <li>providerId: search by providerId. eg. ```providerId:\"ABC Software\"```</li>    <li>domainUrl: search by domainUrl. eg. ```domainUrl:\"agency-xyz\"```</li>    <li>dateUpdated: search by dateUpdated. eg. ```dateUpdated:\"2016-12-25\"```</li>    <li>suburbId: search by suburbId. Lists supported.  eg. ```suburbId:1``` eg. ```suburbId:(1 OR 2 OR 3)```.  Can include related suburbs by adding ```in:related```</li>    <li>accountType: search by account type. Lists supported.  eg. ```accountType:residential``` eg. ```accountType:(residential OR commercial)``` Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business</li>    <li>      ```in:all``` includes archived agencies (archived agencies excluded by default)</li>    <li>      ```-is:selfservice``` excludes selfservice</li>  </ul>
     * @summary Retrieves summary of agencies matching the specified criteria.
     * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgenciesApi
     */
    public agenciesSearch(q?: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AgenciesApiFp(this.configuration).agenciesSearch(q, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AgenciesGetListingsListingStatusFilterEnum = {
    Live: 'live',
    LiveAndArchived: 'liveAndArchived'
} as const;
export type AgenciesGetListingsListingStatusFilterEnum = typeof AgenciesGetListingsListingStatusFilterEnum[keyof typeof AgenciesGetListingsListingStatusFilterEnum];
/**
 * @export
 */
export const AgenciesGetStatisticsTimePeriodEnum = {
    Last7Days: 'last7Days',
    Last90Days: 'last90Days',
    WholeCampaign: 'wholeCampaign'
} as const;
export type AgenciesGetStatisticsTimePeriodEnum = typeof AgenciesGetStatisticsTimePeriodEnum[keyof typeof AgenciesGetStatisticsTimePeriodEnum];
/**
 * @export
 */
export const AgenciesGetStatisticsStatusFilterEnum = {
    Live: 'live',
    LiveAndArchived: 'liveAndArchived'
} as const;
export type AgenciesGetStatisticsStatusFilterEnum = typeof AgenciesGetStatisticsStatusFilterEnum[keyof typeof AgenciesGetStatisticsStatusFilterEnum];
/**
 * @export
 */
export const AgenciesGetStatisticsChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
} as const;
export type AgenciesGetStatisticsChannelEnum = typeof AgenciesGetStatisticsChannelEnum[keyof typeof AgenciesGetStatisticsChannelEnum];


/**
 * AgentsApi - axios parameter creator
 * @export
 */
export const AgentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a specific agent details, including contact information.
         * @param {number} id Agent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentsGet', 'id', id)
            const localVarPath = `/v1/agents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets listing using the contact id
         * @param {number} id Agent identifier
         * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
         * @param {boolean} [includedArchivedListings] Filter to remove listings that have been archived
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGetListings: async (id: number, dateUpdatedSince?: string, includedArchivedListings?: boolean, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentsGetListings', 'id', id)
            const localVarPath = `/v1/agents/{id}/listings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            if (dateUpdatedSince !== undefined) {
                localVarQueryParameter['dateUpdatedSince'] = (dateUpdatedSince as any instanceof Date) ?
                    (dateUpdatedSince as any).toISOString() :
                    dateUpdatedSince;
            }

            if (includedArchivedListings !== undefined) {
                localVarQueryParameter['includedArchivedListings'] = includedArchivedListings;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves stats for the listings of a given agent
         * @param {number} id Agent identifier
         * @param {AgentsGetStatisticsTimePeriodEnum} [timePeriod] The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;
         * @param {AgentsGetStatisticsStatusFilterEnum} [statusFilter] Listing filter
         * @param {AgentsGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGetStatistics: async (id: number, timePeriod?: AgentsGetStatisticsTimePeriodEnum, statusFilter?: AgentsGetStatisticsStatusFilterEnum, channel?: AgentsGetStatisticsChannelEnum, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentsGetStatistics', 'id', id)
            const localVarPath = `/v1/agents/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }

            if (statusFilter !== undefined) {
                localVarQueryParameter['statusFilter'] = statusFilter;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The returned Agent ID can be used to get an agent details by ID. See `GET /agents/{id}/`
         * @summary Search for agents by name.
         * @param {string} query The name, or portion of name, to search for.
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results (maximum 20)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsSearch: async (query: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('agentsSearch', 'query', query)
            const localVarPath = `/v1/agents/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgentsApi - functional programming interface
 * @export
 */
export const AgentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves a specific agent details, including contact information.
         * @param {number} id Agent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentsGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenciesV1Agent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets listing using the contact id
         * @param {number} id Agent identifier
         * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
         * @param {boolean} [includedArchivedListings] Filter to remove listings that have been archived
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentsGetListings(id: number, dateUpdatedSince?: string, includedArchivedListings?: boolean, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainPublicAdapterWebApiModelsV1ListingsListing>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentsGetListings(id, dateUpdatedSince, includedArchivedListings, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves stats for the listings of a given agent
         * @param {number} id Agent identifier
         * @param {AgentsGetStatisticsTimePeriodEnum} [timePeriod] The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;
         * @param {AgentsGetStatisticsStatusFilterEnum} [statusFilter] Listing filter
         * @param {AgentsGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentsGetStatistics(id: number, timePeriod?: AgentsGetStatisticsTimePeriodEnum, statusFilter?: AgentsGetStatisticsStatusFilterEnum, channel?: AgentsGetStatisticsChannelEnum, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListingPerformanceV1Statistics>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentsGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The returned Agent ID can be used to get an agent details by ID. See `GET /agents/{id}/`
         * @summary Search for agents by name.
         * @param {string} query The name, or portion of name, to search for.
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results (maximum 20)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentsSearch(query: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainAgentSearchV1ModelAutoSuggestAgentResultDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentsSearch(query, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AgentsApi - factory interface
 * @export
 */
export const AgentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves a specific agent details, including contact information.
         * @param {number} id Agent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGet(id: number, options?: any): AxiosPromise<AgenciesV1Agent> {
            return localVarFp.agentsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets listing using the contact id
         * @param {number} id Agent identifier
         * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
         * @param {boolean} [includedArchivedListings] Filter to remove listings that have been archived
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGetListings(id: number, dateUpdatedSince?: string, includedArchivedListings?: boolean, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<Array<DomainPublicAdapterWebApiModelsV1ListingsListing>> {
            return localVarFp.agentsGetListings(id, dateUpdatedSince, includedArchivedListings, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves stats for the listings of a given agent
         * @param {number} id Agent identifier
         * @param {AgentsGetStatisticsTimePeriodEnum} [timePeriod] The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;
         * @param {AgentsGetStatisticsStatusFilterEnum} [statusFilter] Listing filter
         * @param {AgentsGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGetStatistics(id: number, timePeriod?: AgentsGetStatisticsTimePeriodEnum, statusFilter?: AgentsGetStatisticsStatusFilterEnum, channel?: AgentsGetStatisticsChannelEnum, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<Array<ListingPerformanceV1Statistics>> {
            return localVarFp.agentsGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * The returned Agent ID can be used to get an agent details by ID. See `GET /agents/{id}/`
         * @summary Search for agents by name.
         * @param {string} query The name, or portion of name, to search for.
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results (maximum 20)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsSearch(query: string, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<Array<DomainAgentSearchV1ModelAutoSuggestAgentResultDto>> {
            return localVarFp.agentsSearch(query, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AgentsApi - object-oriented interface
 * @export
 * @class AgentsApi
 * @extends {BaseAPI}
 */
export class AgentsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves a specific agent details, including contact information.
     * @param {number} id Agent identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public agentsGet(id: number, options?: AxiosRequestConfig) {
        return AgentsApiFp(this.configuration).agentsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets listing using the contact id
     * @param {number} id Agent identifier
     * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
     * @param {boolean} [includedArchivedListings] Filter to remove listings that have been archived
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public agentsGetListings(id: number, dateUpdatedSince?: string, includedArchivedListings?: boolean, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AgentsApiFp(this.configuration).agentsGetListings(id, dateUpdatedSince, includedArchivedListings, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves stats for the listings of a given agent
     * @param {number} id Agent identifier
     * @param {AgentsGetStatisticsTimePeriodEnum} [timePeriod] The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;
     * @param {AgentsGetStatisticsStatusFilterEnum} [statusFilter] Listing filter
     * @param {AgentsGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public agentsGetStatistics(id: number, timePeriod?: AgentsGetStatisticsTimePeriodEnum, statusFilter?: AgentsGetStatisticsStatusFilterEnum, channel?: AgentsGetStatisticsChannelEnum, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AgentsApiFp(this.configuration).agentsGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The returned Agent ID can be used to get an agent details by ID. See `GET /agents/{id}/`
     * @summary Search for agents by name.
     * @param {string} query The name, or portion of name, to search for.
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results (maximum 20)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public agentsSearch(query: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AgentsApiFp(this.configuration).agentsSearch(query, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AgentsGetStatisticsTimePeriodEnum = {
    Last7Days: 'last7Days',
    Last90Days: 'last90Days',
    WholeCampaign: 'wholeCampaign'
} as const;
export type AgentsGetStatisticsTimePeriodEnum = typeof AgentsGetStatisticsTimePeriodEnum[keyof typeof AgentsGetStatisticsTimePeriodEnum];
/**
 * @export
 */
export const AgentsGetStatisticsStatusFilterEnum = {
    Live: 'live',
    LiveAndArchived: 'liveAndArchived'
} as const;
export type AgentsGetStatisticsStatusFilterEnum = typeof AgentsGetStatisticsStatusFilterEnum[keyof typeof AgentsGetStatisticsStatusFilterEnum];
/**
 * @export
 */
export const AgentsGetStatisticsChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
} as const;
export type AgentsGetStatisticsChannelEnum = typeof AgentsGetStatisticsChannelEnum[keyof typeof AgentsGetStatisticsChannelEnum];


/**
 * AuthoritiesApi - axios parameter creator
 * @export
 */
export const AuthoritiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new authority into the system.
         * @summary Creates a new authority into the system.
         * @param {AuthoritiesV1AuthorityRequest} authoritiesV1AuthorityRequest Authority information to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesCreate: async (authoritiesV1AuthorityRequest: AuthoritiesV1AuthorityRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authoritiesV1AuthorityRequest' is not null or undefined
            assertParamExists('authoritiesCreate', 'authoritiesV1AuthorityRequest', authoritiesV1AuthorityRequest)
            const localVarPath = `/v1/authorities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.realtimeagent.authorities.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authoritiesV1AuthorityRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Download a compressed file(`.zip`) that contains all files attached to an authority based on the given authority `id`.
         * @summary Download a compressed file that contains all files attached to an authority.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesDownloadAttachments: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('authoritiesDownloadAttachments', 'id', id)
            const localVarPath = `/v1/authorities/{id}/attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve authority details based on the given ID.
         * @summary Retrieve a single authority
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesGetById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('authoritiesGetById', 'id', id)
            const localVarPath = `/v1/authorities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Subscribe to an agency to get notified on changes made to the authorities in that agencies scope.
         * @summary Subscribe to an agency for all its authorities
         * @param {AuthoritiesV1SubscriptionRequest} [authoritiesV1SubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesSubscribe: async (authoritiesV1SubscriptionRequest?: AuthoritiesV1SubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/authorities/webhooks/subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authoritiesV1SubscriptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a subscription using subscriptionId.
         * @summary Delete a subscription using subscriptionId
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUnsubscribe: async (subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('authoritiesUnsubscribe', 'subscriptionId', subscriptionId)
            const localVarPath = `/v1/authorities/webhooks/subscription/{subscriptionId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Executes a full update on an existing authority.
         * @summary full update an existing authority.
         * @param {string} id 
         * @param {AuthoritiesV1AuthorityResponse} authoritiesV1AuthorityResponse Authority information to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUpdateById: async (id: string, authoritiesV1AuthorityResponse: AuthoritiesV1AuthorityResponse, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('authoritiesUpdateById', 'id', id)
            // verify required parameter 'authoritiesV1AuthorityResponse' is not null or undefined
            assertParamExists('authoritiesUpdateById', 'authoritiesV1AuthorityResponse', authoritiesV1AuthorityResponse)
            const localVarPath = `/v1/authorities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.realtimeagent.authorities.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authoritiesV1AuthorityResponse, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload multiple files to be attached to an authority based on the given `id`.
         * @summary Upload multiple files to an authority.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUploadAttachment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('authoritiesUploadAttachment', 'id', id)
            const localVarPath = `/v1/authorities/{id}/attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload multiple files to be attached to a specific vendor in an authority.
         * @summary Upload multiple files to be attached to a specific vendor in an authority.
         * @param {string} id 
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUploadVendorAttachment: async (id: string, vendorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('authoritiesUploadVendorAttachment', 'id', id)
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('authoritiesUploadVendorAttachment', 'vendorId', vendorId)
            const localVarPath = `/v1/authorities/{id}/vendors/{vendorId}/attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"vendorId"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthoritiesApi - functional programming interface
 * @export
 */
export const AuthoritiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthoritiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new authority into the system.
         * @summary Creates a new authority into the system.
         * @param {AuthoritiesV1AuthorityRequest} authoritiesV1AuthorityRequest Authority information to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authoritiesCreate(authoritiesV1AuthorityRequest: AuthoritiesV1AuthorityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthoritiesV1AuthorityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authoritiesCreate(authoritiesV1AuthorityRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Download a compressed file(`.zip`) that contains all files attached to an authority based on the given authority `id`.
         * @summary Download a compressed file that contains all files attached to an authority.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authoritiesDownloadAttachments(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authoritiesDownloadAttachments(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve authority details based on the given ID.
         * @summary Retrieve a single authority
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authoritiesGetById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthoritiesV1AuthorityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authoritiesGetById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Subscribe to an agency to get notified on changes made to the authorities in that agencies scope.
         * @summary Subscribe to an agency for all its authorities
         * @param {AuthoritiesV1SubscriptionRequest} [authoritiesV1SubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authoritiesSubscribe(authoritiesV1SubscriptionRequest?: AuthoritiesV1SubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthoritiesV1SubscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authoritiesSubscribe(authoritiesV1SubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a subscription using subscriptionId.
         * @summary Delete a subscription using subscriptionId
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authoritiesUnsubscribe(subscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authoritiesUnsubscribe(subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Executes a full update on an existing authority.
         * @summary full update an existing authority.
         * @param {string} id 
         * @param {AuthoritiesV1AuthorityResponse} authoritiesV1AuthorityResponse Authority information to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authoritiesUpdateById(id: string, authoritiesV1AuthorityResponse: AuthoritiesV1AuthorityResponse, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthoritiesV1AuthorityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authoritiesUpdateById(id, authoritiesV1AuthorityResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload multiple files to be attached to an authority based on the given `id`.
         * @summary Upload multiple files to an authority.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authoritiesUploadAttachment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthoritiesV1Attachments>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authoritiesUploadAttachment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload multiple files to be attached to a specific vendor in an authority.
         * @summary Upload multiple files to be attached to a specific vendor in an authority.
         * @param {string} id 
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authoritiesUploadVendorAttachment(id: string, vendorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthoritiesV1VendorAttachments>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authoritiesUploadVendorAttachment(id, vendorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthoritiesApi - factory interface
 * @export
 */
export const AuthoritiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthoritiesApiFp(configuration)
    return {
        /**
         * Creates a new authority into the system.
         * @summary Creates a new authority into the system.
         * @param {AuthoritiesV1AuthorityRequest} authoritiesV1AuthorityRequest Authority information to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesCreate(authoritiesV1AuthorityRequest: AuthoritiesV1AuthorityRequest, options?: any): AxiosPromise<AuthoritiesV1AuthorityResponse> {
            return localVarFp.authoritiesCreate(authoritiesV1AuthorityRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Download a compressed file(`.zip`) that contains all files attached to an authority based on the given authority `id`.
         * @summary Download a compressed file that contains all files attached to an authority.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesDownloadAttachments(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.authoritiesDownloadAttachments(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve authority details based on the given ID.
         * @summary Retrieve a single authority
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesGetById(id: string, options?: any): AxiosPromise<AuthoritiesV1AuthorityResponse> {
            return localVarFp.authoritiesGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Subscribe to an agency to get notified on changes made to the authorities in that agencies scope.
         * @summary Subscribe to an agency for all its authorities
         * @param {AuthoritiesV1SubscriptionRequest} [authoritiesV1SubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesSubscribe(authoritiesV1SubscriptionRequest?: AuthoritiesV1SubscriptionRequest, options?: any): AxiosPromise<AuthoritiesV1SubscriptionResponse> {
            return localVarFp.authoritiesSubscribe(authoritiesV1SubscriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a subscription using subscriptionId.
         * @summary Delete a subscription using subscriptionId
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUnsubscribe(subscriptionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.authoritiesUnsubscribe(subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Executes a full update on an existing authority.
         * @summary full update an existing authority.
         * @param {string} id 
         * @param {AuthoritiesV1AuthorityResponse} authoritiesV1AuthorityResponse Authority information to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUpdateById(id: string, authoritiesV1AuthorityResponse: AuthoritiesV1AuthorityResponse, options?: any): AxiosPromise<AuthoritiesV1AuthorityResponse> {
            return localVarFp.authoritiesUpdateById(id, authoritiesV1AuthorityResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload multiple files to be attached to an authority based on the given `id`.
         * @summary Upload multiple files to an authority.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUploadAttachment(id: string, options?: any): AxiosPromise<Array<AuthoritiesV1Attachments>> {
            return localVarFp.authoritiesUploadAttachment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload multiple files to be attached to a specific vendor in an authority.
         * @summary Upload multiple files to be attached to a specific vendor in an authority.
         * @param {string} id 
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUploadVendorAttachment(id: string, vendorId: string, options?: any): AxiosPromise<Array<AuthoritiesV1VendorAttachments>> {
            return localVarFp.authoritiesUploadVendorAttachment(id, vendorId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthoritiesApi - object-oriented interface
 * @export
 * @class AuthoritiesApi
 * @extends {BaseAPI}
 */
export class AuthoritiesApi extends BaseAPI {
    /**
     * Creates a new authority into the system.
     * @summary Creates a new authority into the system.
     * @param {AuthoritiesV1AuthorityRequest} authoritiesV1AuthorityRequest Authority information to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public authoritiesCreate(authoritiesV1AuthorityRequest: AuthoritiesV1AuthorityRequest, options?: AxiosRequestConfig) {
        return AuthoritiesApiFp(this.configuration).authoritiesCreate(authoritiesV1AuthorityRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Download a compressed file(`.zip`) that contains all files attached to an authority based on the given authority `id`.
     * @summary Download a compressed file that contains all files attached to an authority.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public authoritiesDownloadAttachments(id: string, options?: AxiosRequestConfig) {
        return AuthoritiesApiFp(this.configuration).authoritiesDownloadAttachments(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve authority details based on the given ID.
     * @summary Retrieve a single authority
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public authoritiesGetById(id: string, options?: AxiosRequestConfig) {
        return AuthoritiesApiFp(this.configuration).authoritiesGetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Subscribe to an agency to get notified on changes made to the authorities in that agencies scope.
     * @summary Subscribe to an agency for all its authorities
     * @param {AuthoritiesV1SubscriptionRequest} [authoritiesV1SubscriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public authoritiesSubscribe(authoritiesV1SubscriptionRequest?: AuthoritiesV1SubscriptionRequest, options?: AxiosRequestConfig) {
        return AuthoritiesApiFp(this.configuration).authoritiesSubscribe(authoritiesV1SubscriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a subscription using subscriptionId.
     * @summary Delete a subscription using subscriptionId
     * @param {string} subscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public authoritiesUnsubscribe(subscriptionId: string, options?: AxiosRequestConfig) {
        return AuthoritiesApiFp(this.configuration).authoritiesUnsubscribe(subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Executes a full update on an existing authority.
     * @summary full update an existing authority.
     * @param {string} id 
     * @param {AuthoritiesV1AuthorityResponse} authoritiesV1AuthorityResponse Authority information to be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public authoritiesUpdateById(id: string, authoritiesV1AuthorityResponse: AuthoritiesV1AuthorityResponse, options?: AxiosRequestConfig) {
        return AuthoritiesApiFp(this.configuration).authoritiesUpdateById(id, authoritiesV1AuthorityResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload multiple files to be attached to an authority based on the given `id`.
     * @summary Upload multiple files to an authority.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public authoritiesUploadAttachment(id: string, options?: AxiosRequestConfig) {
        return AuthoritiesApiFp(this.configuration).authoritiesUploadAttachment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload multiple files to be attached to a specific vendor in an authority.
     * @summary Upload multiple files to be attached to a specific vendor in an authority.
     * @param {string} id 
     * @param {string} vendorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public authoritiesUploadVendorAttachment(id: string, vendorId: string, options?: AxiosRequestConfig) {
        return AuthoritiesApiFp(this.configuration).authoritiesUploadVendorAttachment(id, vendorId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DemographicsApi - axios parameter creator
 * @export
 */
export const DemographicsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
         * @summary Search for demographics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
         * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
         * @param {number} [year] Census Year of data to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demographicsGetByNamedSuburb: async (state: string, suburb: string, postcode: string, types?: string, year?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('demographicsGetByNamedSuburb', 'state', state)
            // verify required parameter 'suburb' is not null or undefined
            assertParamExists('demographicsGetByNamedSuburb', 'suburb', suburb)
            // verify required parameter 'postcode' is not null or undefined
            assertParamExists('demographicsGetByNamedSuburb', 'postcode', postcode)
            const localVarPath = `/v2/demographics/{state}/{suburb}/{postcode}`
                .replace(`{${"state"}}`, encodeURIComponent(String(state)))
                .replace(`{${"suburb"}}`, encodeURIComponent(String(suburb)))
                .replace(`{${"postcode"}}`, encodeURIComponent(String(postcode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_demographics_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_demographics_read"], configuration)

            if (types !== undefined) {
                localVarQueryParameter['types'] = types;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
         * @summary Search for demographics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
         * @param {number} [year] Census Year of data to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demographicsGetByNamedSuburbWithoutPostcode: async (state: string, suburb: string, types?: string, year?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('demographicsGetByNamedSuburbWithoutPostcode', 'state', state)
            // verify required parameter 'suburb' is not null or undefined
            assertParamExists('demographicsGetByNamedSuburbWithoutPostcode', 'suburb', suburb)
            const localVarPath = `/v2/demographics/{state}/{suburb}`
                .replace(`{${"state"}}`, encodeURIComponent(String(state)))
                .replace(`{${"suburb"}}`, encodeURIComponent(String(suburb)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_demographics_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_demographics_read"], configuration)

            if (types !== undefined) {
                localVarQueryParameter['types'] = types;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DemographicsApi - functional programming interface
 * @export
 */
export const DemographicsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DemographicsApiAxiosParamCreator(configuration)
    return {
        /**
         * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
         * @summary Search for demographics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
         * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
         * @param {number} [year] Census Year of data to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async demographicsGetByNamedSuburb(state: string, suburb: string, postcode: string, types?: string, year?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DemographicsV2DemographicsResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.demographicsGetByNamedSuburb(state, suburb, postcode, types, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
         * @summary Search for demographics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
         * @param {number} [year] Census Year of data to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async demographicsGetByNamedSuburbWithoutPostcode(state: string, suburb: string, types?: string, year?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DemographicsV2DemographicsResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.demographicsGetByNamedSuburbWithoutPostcode(state, suburb, types, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DemographicsApi - factory interface
 * @export
 */
export const DemographicsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DemographicsApiFp(configuration)
    return {
        /**
         * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
         * @summary Search for demographics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
         * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
         * @param {number} [year] Census Year of data to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demographicsGetByNamedSuburb(state: string, suburb: string, postcode: string, types?: string, year?: number, options?: any): AxiosPromise<DemographicsV2DemographicsResults> {
            return localVarFp.demographicsGetByNamedSuburb(state, suburb, postcode, types, year, options).then((request) => request(axios, basePath));
        },
        /**
         * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
         * @summary Search for demographics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
         * @param {number} [year] Census Year of data to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demographicsGetByNamedSuburbWithoutPostcode(state: string, suburb: string, types?: string, year?: number, options?: any): AxiosPromise<DemographicsV2DemographicsResults> {
            return localVarFp.demographicsGetByNamedSuburbWithoutPostcode(state, suburb, types, year, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DemographicsApi - object-oriented interface
 * @export
 * @class DemographicsApi
 * @extends {BaseAPI}
 */
export class DemographicsApi extends BaseAPI {
    /**
     * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
     * @summary Search for demographics in a given geographic level.
     * @param {string} state The Australian state abbreviation
     * @param {string} suburb Suburb name to retrieve data for
     * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
     * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
     * @param {number} [year] Census Year of data to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemographicsApi
     */
    public demographicsGetByNamedSuburb(state: string, suburb: string, postcode: string, types?: string, year?: number, options?: AxiosRequestConfig) {
        return DemographicsApiFp(this.configuration).demographicsGetByNamedSuburb(state, suburb, postcode, types, year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
     * @summary Search for demographics in a given geographic level.
     * @param {string} state The Australian state abbreviation
     * @param {string} suburb Suburb name to retrieve data for
     * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
     * @param {number} [year] Census Year of data to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemographicsApi
     */
    public demographicsGetByNamedSuburbWithoutPostcode(state: string, suburb: string, types?: string, year?: number, options?: AxiosRequestConfig) {
        return DemographicsApiFp(this.configuration).demographicsGetByNamedSuburbWithoutPostcode(state, suburb, types, year, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DisclaimersApi - axios parameter creator
 * @export
 */
export const DisclaimersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves disclaimers for given ids
         * @param {string} [ids] Comma separated list of ids. Eg. \&quot;1,2,3\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disclaimersGet: async (ids?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/disclaimers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves disclaimers for given product
         * @param {string} product Possible product values: &#x60;PropertyData&#x60;, &#x60;AURIN&#x60;, &#x60;HomePriceGuide&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disclaimersGetByProduct: async (product: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            assertParamExists('disclaimersGetByProduct', 'product', product)
            const localVarPath = `/v1/disclaimers/product/{product}`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DisclaimersApi - functional programming interface
 * @export
 */
export const DisclaimersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DisclaimersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves disclaimers for given ids
         * @param {string} [ids] Comma separated list of ids. Eg. \&quot;1,2,3\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disclaimersGet(ids?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DisclaimersV1DisclaimerModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disclaimersGet(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves disclaimers for given product
         * @param {string} product Possible product values: &#x60;PropertyData&#x60;, &#x60;AURIN&#x60;, &#x60;HomePriceGuide&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disclaimersGetByProduct(product: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DisclaimersV1DisclaimerModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disclaimersGetByProduct(product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DisclaimersApi - factory interface
 * @export
 */
export const DisclaimersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DisclaimersApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves disclaimers for given ids
         * @param {string} [ids] Comma separated list of ids. Eg. \&quot;1,2,3\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disclaimersGet(ids?: string, options?: any): AxiosPromise<Array<DisclaimersV1DisclaimerModel>> {
            return localVarFp.disclaimersGet(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves disclaimers for given product
         * @param {string} product Possible product values: &#x60;PropertyData&#x60;, &#x60;AURIN&#x60;, &#x60;HomePriceGuide&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disclaimersGetByProduct(product: string, options?: any): AxiosPromise<Array<DisclaimersV1DisclaimerModel>> {
            return localVarFp.disclaimersGetByProduct(product, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DisclaimersApi - object-oriented interface
 * @export
 * @class DisclaimersApi
 * @extends {BaseAPI}
 */
export class DisclaimersApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves disclaimers for given ids
     * @param {string} [ids] Comma separated list of ids. Eg. \&quot;1,2,3\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisclaimersApi
     */
    public disclaimersGet(ids?: string, options?: AxiosRequestConfig) {
        return DisclaimersApiFp(this.configuration).disclaimersGet(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves disclaimers for given product
     * @param {string} product Possible product values: &#x60;PropertyData&#x60;, &#x60;AURIN&#x60;, &#x60;HomePriceGuide&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisclaimersApi
     */
    public disclaimersGetByProduct(product: string, options?: AxiosRequestConfig) {
        return DisclaimersApiFp(this.configuration).disclaimersGetByProduct(product, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EnquiriesApi - axios parameter creator
 * @export
 */
export const EnquiriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the details of a specific enquiry
         * @param {string} id Id of the enquiry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('enquiriesGet', 'id', id)
            const localVarPath = `/v1/enquiries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
         * @param {DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry} domainPublicAdapterWebApiModelsV1EnquiriesEnquiry The enquiry object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesPost: async (domainPublicAdapterWebApiModelsV1EnquiriesEnquiry: DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainPublicAdapterWebApiModelsV1EnquiriesEnquiry' is not null or undefined
            assertParamExists('enquiriesPost', 'domainPublicAdapterWebApiModelsV1EnquiriesEnquiry', domainPublicAdapterWebApiModelsV1EnquiriesEnquiry)
            const localVarPath = `/v1/enquiries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_enquiries_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_enquiries_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Searches enquiries based on agents or agencies.
         * @param {number} [agencyId] Agency identifier
         * @param {number} [agentId] Agent identifier
         * @param {string} [from] Enquiries received from
         * @param {string} [to] Enquiries received up to
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesSearch: async (agencyId?: number, agentId?: number, from?: string, to?: string, pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/enquiries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration)

            if (agencyId !== undefined) {
                localVarQueryParameter['agencyId'] = agencyId;
            }

            if (agentId !== undefined) {
                localVarQueryParameter['agentId'] = agentId;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnquiriesApi - functional programming interface
 * @export
 */
export const EnquiriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnquiriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the details of a specific enquiry
         * @param {string} id Id of the enquiry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enquiriesGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnquiriesV1EnquiryReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enquiriesGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
         * @param {DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry} domainPublicAdapterWebApiModelsV1EnquiriesEnquiry The enquiry object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enquiriesPost(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry: DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enquiriesPost(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Searches enquiries based on agents or agencies.
         * @param {number} [agencyId] Agency identifier
         * @param {number} [agentId] Agent identifier
         * @param {string} [from] Enquiries received from
         * @param {string} [to] Enquiries received up to
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enquiriesSearch(agencyId?: number, agentId?: number, from?: string, to?: string, pageNumber?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnquiriesV1EnquiryReport>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enquiriesSearch(agencyId, agentId, from, to, pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnquiriesApi - factory interface
 * @export
 */
export const EnquiriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnquiriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the details of a specific enquiry
         * @param {string} id Id of the enquiry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesGet(id: string, options?: any): AxiosPromise<EnquiriesV1EnquiryReport> {
            return localVarFp.enquiriesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
         * @param {DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry} domainPublicAdapterWebApiModelsV1EnquiriesEnquiry The enquiry object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesPost(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry: DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options?: any): AxiosPromise<DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse> {
            return localVarFp.enquiriesPost(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Searches enquiries based on agents or agencies.
         * @param {number} [agencyId] Agency identifier
         * @param {number} [agentId] Agent identifier
         * @param {string} [from] Enquiries received from
         * @param {string} [to] Enquiries received up to
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesSearch(agencyId?: number, agentId?: number, from?: string, to?: string, pageNumber?: number, options?: any): AxiosPromise<Array<EnquiriesV1EnquiryReport>> {
            return localVarFp.enquiriesSearch(agencyId, agentId, from, to, pageNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnquiriesApi - object-oriented interface
 * @export
 * @class EnquiriesApi
 * @extends {BaseAPI}
 */
export class EnquiriesApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the details of a specific enquiry
     * @param {string} id Id of the enquiry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnquiriesApi
     */
    public enquiriesGet(id: string, options?: AxiosRequestConfig) {
        return EnquiriesApiFp(this.configuration).enquiriesGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
     * @param {DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry} domainPublicAdapterWebApiModelsV1EnquiriesEnquiry The enquiry object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnquiriesApi
     */
    public enquiriesPost(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry: DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options?: AxiosRequestConfig) {
        return EnquiriesApiFp(this.configuration).enquiriesPost(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Searches enquiries based on agents or agencies.
     * @param {number} [agencyId] Agency identifier
     * @param {number} [agentId] Agent identifier
     * @param {string} [from] Enquiries received from
     * @param {string} [to] Enquiries received up to
     * @param {number} [pageNumber] Page number for paginated results (25 per page)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnquiriesApi
     */
    public enquiriesSearch(agencyId?: number, agentId?: number, from?: string, to?: string, pageNumber?: number, options?: AxiosRequestConfig) {
        return EnquiriesApiFp(this.configuration).enquiriesSearch(agencyId, agentId, from, to, pageNumber, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LeadscopeApi - axios parameter creator
 * @export
 */
export const LeadscopeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary URL to download a list of agency predictions
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadScopeGetById: async (participantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('leadScopeGetById', 'participantId', participantId)
            const localVarPath = `/v1/leadscope/predictions/{participantId}`
                .replace(`{${"participantId"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeadscopeApi - functional programming interface
 * @export
 */
export const LeadscopeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeadscopeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary URL to download a list of agency predictions
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leadScopeGetById(participantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeadScopeGetById200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leadScopeGetById(participantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeadscopeApi - factory interface
 * @export
 */
export const LeadscopeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeadscopeApiFp(configuration)
    return {
        /**
         * 
         * @summary URL to download a list of agency predictions
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadScopeGetById(participantId: string, options?: any): AxiosPromise<LeadScopeGetById200Response> {
            return localVarFp.leadScopeGetById(participantId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeadscopeApi - object-oriented interface
 * @export
 * @class LeadscopeApi
 * @extends {BaseAPI}
 */
export class LeadscopeApi extends BaseAPI {
    /**
     * 
     * @summary URL to download a list of agency predictions
     * @param {string} participantId Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadscopeApi
     */
    public leadScopeGetById(participantId: string, options?: AxiosRequestConfig) {
        return LeadscopeApiFp(this.configuration).leadScopeGetById(participantId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListingsApi - axios parameter creator
 * @export
 */
export const ListingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The resulting suggested location can be of type \"suburb\" / \"area\" / \"region\".    The `name` property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [`v1/listings/residential/_search`](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
         * @summary Suggests listing locations
         * @param {string} [terms] Suburb / area / region prefix, or postcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingLocationsSearch: async (terms?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/listings/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration)

            if (terms !== undefined) {
                localVarQueryParameter['terms'] = terms;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves business listings matching the specified criteria.
         * @param {DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest} domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedBusinessSearch: async (domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest: DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest' is not null or undefined
            assertParamExists('listingsDetailedBusinessSearch', 'domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest', domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest)
            const localVarPath = `/v1/listings/business/_search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves commercial listings matching the specified criteria.
         * @param {DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest} domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedCommercialSearch: async (domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest: DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest' is not null or undefined
            assertParamExists('listingsDetailedCommercialSearch', 'domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest', domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest)
            const localVarPath = `/v1/listings/commercial/_search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
         * @summary Retrieves residential listings matching the specified criteria.
         * @param {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters} domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedResidentialSearch: async (domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters' is not null or undefined
            assertParamExists('listingsDetailedResidentialSearch', 'domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters', domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters)
            const localVarPath = `/v1/listings/residential/_search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve details of listing using the listing id
         * @param {number} id Id of the listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listingsGet', 'id', id)
            const localVarPath = `/v1/listings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve details of all enquiries received for a specific listing
         * @param {number} id Listing Id
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetEnquiries: async (id: number, pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listingsGetEnquiries', 'id', id)
            const localVarPath = `/v1/listings/{id}/enquiries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the processing report
         * @param {string} id Report id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingReport: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listingsGetListingReport', 'id', id)
            const localVarPath = `/v1/listings/processingReports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Searches processing reports
         * @param {number} agencyId Domain agency Id
         * @param {string} providerAdId External provider advertisement identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingReportByReference: async (agencyId: number, providerAdId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agencyId' is not null or undefined
            assertParamExists('listingsGetListingReportByReference', 'agencyId', agencyId)
            // verify required parameter 'providerAdId' is not null or undefined
            assertParamExists('listingsGetListingReportByReference', 'providerAdId', providerAdId)
            const localVarPath = `/v1/listings/processingReports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            if (agencyId !== undefined) {
                localVarQueryParameter['agencyId'] = agencyId;
            }

            if (providerAdId !== undefined) {
                localVarQueryParameter['providerAdId'] = providerAdId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve details of listing using the listing id
         * @param {number} id Id of the listing
         * @param {ListingsGetListingStatisticsTimePeriodEnum} [timePeriod] The period of time to see the listing performance for (not including today). Defaults to Last7Days
         * @param {ListingsGetListingStatisticsChannelEnum} [channel] Filter statistics for the given channel. Defaults to listing Channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingStatistics: async (id: number, timePeriod?: ListingsGetListingStatisticsTimePeriodEnum, channel?: ListingsGetListingStatisticsChannelEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listingsGetListingStatistics', 'id', id)
            const localVarPath = `/v1/listings/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates or updates a business listing
         * @param {DomainListingAdminServiceV1ModelBusinessListing} domainListingAdminServiceV1ModelBusinessListing The business listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertBusinessListing: async (domainListingAdminServiceV1ModelBusinessListing: DomainListingAdminServiceV1ModelBusinessListing, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainListingAdminServiceV1ModelBusinessListing' is not null or undefined
            assertParamExists('listingsUpsertBusinessListing', 'domainListingAdminServiceV1ModelBusinessListing', domainListingAdminServiceV1ModelBusinessListing)
            const localVarPath = `/v1/listings/business`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domainListingAdminServiceV1ModelBusinessListing, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates or updates a residential listing
         * @param {DomainListingAdminServiceV1ModelResidentialListing} domainListingAdminServiceV1ModelResidentialListing The residential listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertResidentialListing: async (domainListingAdminServiceV1ModelResidentialListing: DomainListingAdminServiceV1ModelResidentialListing, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainListingAdminServiceV1ModelResidentialListing' is not null or undefined
            assertParamExists('listingsUpsertResidentialListing', 'domainListingAdminServiceV1ModelResidentialListing', domainListingAdminServiceV1ModelResidentialListing)
            const localVarPath = `/v1/listings/residential`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domainListingAdminServiceV1ModelResidentialListing, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an externally sold business listing; or takes an existing business listing off the market.
         * @param {ListingAdminV2BusinessOffMarketListing} listingAdminV2BusinessOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertbusinessoffmarket: async (listingAdminV2BusinessOffMarketListing: ListingAdminV2BusinessOffMarketListing, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listingAdminV2BusinessOffMarketListing' is not null or undefined
            assertParamExists('listingsUpsertbusinessoffmarket', 'listingAdminV2BusinessOffMarketListing', listingAdminV2BusinessOffMarketListing)
            const localVarPath = `/v2/listings/business/offmarket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listingAdminV2BusinessOffMarketListing, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a commercial listing.
         * @param {ListingAdminV2CommercialListingV2} listingAdminV2CommercialListingV2 Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertcommerciallisting: async (listingAdminV2CommercialListingV2: ListingAdminV2CommercialListingV2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listingAdminV2CommercialListingV2' is not null or undefined
            assertParamExists('listingsUpsertcommerciallisting', 'listingAdminV2CommercialListingV2', listingAdminV2CommercialListingV2)
            const localVarPath = `/v2/listings/commercial`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listingAdminV2CommercialListingV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
         * @param {ListingAdminV2CommercialOffMarketListing} listingAdminV2CommercialOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertcommercialoffmarket: async (listingAdminV2CommercialOffMarketListing: ListingAdminV2CommercialOffMarketListing, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listingAdminV2CommercialOffMarketListing' is not null or undefined
            assertParamExists('listingsUpsertcommercialoffmarket', 'listingAdminV2CommercialOffMarketListing', listingAdminV2CommercialOffMarketListing)
            const localVarPath = `/v2/listings/commercial/offmarket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listingAdminV2CommercialOffMarketListing, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
         * @param {ListingAdminV2ResidentialOffMarketListing} listingAdminV2ResidentialOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertresidentialoffmarket: async (listingAdminV2ResidentialOffMarketListing: ListingAdminV2ResidentialOffMarketListing, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listingAdminV2ResidentialOffMarketListing' is not null or undefined
            assertParamExists('listingsUpsertresidentialoffmarket', 'listingAdminV2ResidentialOffMarketListing', listingAdminV2ResidentialOffMarketListing)
            const localVarPath = `/v2/listings/residential/offmarket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listingAdminV2ResidentialOffMarketListing, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListingsApi - functional programming interface
 * @export
 */
export const ListingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListingsApiAxiosParamCreator(configuration)
    return {
        /**
         * The resulting suggested location can be of type \"suburb\" / \"area\" / \"region\".    The `name` property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [`v1/listings/residential/_search`](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
         * @summary Suggests listing locations
         * @param {string} [terms] Suburb / area / region prefix, or postcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingLocationsSearch(terms?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainPublicAdapterWebApiModelsV1ListingsListingLocation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingLocationsSearch(terms, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves business listings matching the specified criteria.
         * @param {DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest} domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsDetailedBusinessSearch(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest: DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsDetailedBusinessSearch(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves commercial listings matching the specified criteria.
         * @param {DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest} domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsDetailedCommercialSearch(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest: DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsDetailedCommercialSearch(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
         * @summary Retrieves residential listings matching the specified criteria.
         * @param {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters} domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsDetailedResidentialSearch(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsDetailedResidentialSearch(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve details of listing using the listing id
         * @param {number} id Id of the listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingsV1Listing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve details of all enquiries received for a specific listing
         * @param {number} id Listing Id
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsGetEnquiries(id: number, pageNumber?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnquiriesV1EnquiryReport>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsGetEnquiries(id, pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the processing report
         * @param {string} id Report id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsGetListingReport(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainListingAdminServiceV1ModelListingReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsGetListingReport(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Searches processing reports
         * @param {number} agencyId Domain agency Id
         * @param {string} providerAdId External provider advertisement identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsGetListingReportByReference(agencyId: number, providerAdId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainListingAdminServiceV1ModelListingReport>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsGetListingReportByReference(agencyId, providerAdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve details of listing using the listing id
         * @param {number} id Id of the listing
         * @param {ListingsGetListingStatisticsTimePeriodEnum} [timePeriod] The period of time to see the listing performance for (not including today). Defaults to Last7Days
         * @param {ListingsGetListingStatisticsChannelEnum} [channel] Filter statistics for the given channel. Defaults to listing Channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsGetListingStatistics(id: number, timePeriod?: ListingsGetListingStatisticsTimePeriodEnum, channel?: ListingsGetListingStatisticsChannelEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingPerformanceV1StatisticReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsGetListingStatistics(id, timePeriod, channel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates or updates a business listing
         * @param {DomainListingAdminServiceV1ModelBusinessListing} domainListingAdminServiceV1ModelBusinessListing The business listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsUpsertBusinessListing(domainListingAdminServiceV1ModelBusinessListing: DomainListingAdminServiceV1ModelBusinessListing, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainListingAdminServiceV1ModelListingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsUpsertBusinessListing(domainListingAdminServiceV1ModelBusinessListing, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates or updates a residential listing
         * @param {DomainListingAdminServiceV1ModelResidentialListing} domainListingAdminServiceV1ModelResidentialListing The residential listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsUpsertResidentialListing(domainListingAdminServiceV1ModelResidentialListing: DomainListingAdminServiceV1ModelResidentialListing, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainListingAdminServiceV1ModelListingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsUpsertResidentialListing(domainListingAdminServiceV1ModelResidentialListing, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates an externally sold business listing; or takes an existing business listing off the market.
         * @param {ListingAdminV2BusinessOffMarketListing} listingAdminV2BusinessOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing: ListingAdminV2BusinessOffMarketListing, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingAdminV2ListingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a commercial listing.
         * @param {ListingAdminV2CommercialListingV2} listingAdminV2CommercialListingV2 Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsUpsertcommerciallisting(listingAdminV2CommercialListingV2: ListingAdminV2CommercialListingV2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingAdminV2ListingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsUpsertcommerciallisting(listingAdminV2CommercialListingV2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
         * @param {ListingAdminV2CommercialOffMarketListing} listingAdminV2CommercialOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing: ListingAdminV2CommercialOffMarketListing, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingAdminV2ListingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
         * @param {ListingAdminV2ResidentialOffMarketListing} listingAdminV2ResidentialOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing: ListingAdminV2ResidentialOffMarketListing, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingAdminV2ListingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListingsApi - factory interface
 * @export
 */
export const ListingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListingsApiFp(configuration)
    return {
        /**
         * The resulting suggested location can be of type \"suburb\" / \"area\" / \"region\".    The `name` property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [`v1/listings/residential/_search`](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
         * @summary Suggests listing locations
         * @param {string} [terms] Suburb / area / region prefix, or postcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingLocationsSearch(terms?: string, options?: any): AxiosPromise<Array<DomainPublicAdapterWebApiModelsV1ListingsListingLocation>> {
            return localVarFp.listingLocationsSearch(terms, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves business listings matching the specified criteria.
         * @param {DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest} domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedBusinessSearch(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest: DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options?: any): AxiosPromise<Array<DomainPublicAdapterWebApiModelsV1ListingsBusinessListing>> {
            return localVarFp.listingsDetailedBusinessSearch(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves commercial listings matching the specified criteria.
         * @param {DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest} domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedCommercialSearch(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest: DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options?: any): AxiosPromise<Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialListing>> {
            return localVarFp.listingsDetailedCommercialSearch(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
         * @summary Retrieves residential listings matching the specified criteria.
         * @param {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters} domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedResidentialSearch(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options?: any): AxiosPromise<Array<DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult>> {
            return localVarFp.listingsDetailedResidentialSearch(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve details of listing using the listing id
         * @param {number} id Id of the listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGet(id: number, options?: any): AxiosPromise<ListingsV1Listing> {
            return localVarFp.listingsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve details of all enquiries received for a specific listing
         * @param {number} id Listing Id
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetEnquiries(id: number, pageNumber?: number, options?: any): AxiosPromise<Array<EnquiriesV1EnquiryReport>> {
            return localVarFp.listingsGetEnquiries(id, pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the processing report
         * @param {string} id Report id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingReport(id: string, options?: any): AxiosPromise<DomainListingAdminServiceV1ModelListingReport> {
            return localVarFp.listingsGetListingReport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Searches processing reports
         * @param {number} agencyId Domain agency Id
         * @param {string} providerAdId External provider advertisement identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingReportByReference(agencyId: number, providerAdId: string, options?: any): AxiosPromise<Array<DomainListingAdminServiceV1ModelListingReport>> {
            return localVarFp.listingsGetListingReportByReference(agencyId, providerAdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve details of listing using the listing id
         * @param {number} id Id of the listing
         * @param {ListingsGetListingStatisticsTimePeriodEnum} [timePeriod] The period of time to see the listing performance for (not including today). Defaults to Last7Days
         * @param {ListingsGetListingStatisticsChannelEnum} [channel] Filter statistics for the given channel. Defaults to listing Channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingStatistics(id: number, timePeriod?: ListingsGetListingStatisticsTimePeriodEnum, channel?: ListingsGetListingStatisticsChannelEnum, options?: any): AxiosPromise<ListingPerformanceV1StatisticReport> {
            return localVarFp.listingsGetListingStatistics(id, timePeriod, channel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates or updates a business listing
         * @param {DomainListingAdminServiceV1ModelBusinessListing} domainListingAdminServiceV1ModelBusinessListing The business listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertBusinessListing(domainListingAdminServiceV1ModelBusinessListing: DomainListingAdminServiceV1ModelBusinessListing, options?: any): AxiosPromise<DomainListingAdminServiceV1ModelListingResponse> {
            return localVarFp.listingsUpsertBusinessListing(domainListingAdminServiceV1ModelBusinessListing, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates or updates a residential listing
         * @param {DomainListingAdminServiceV1ModelResidentialListing} domainListingAdminServiceV1ModelResidentialListing The residential listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertResidentialListing(domainListingAdminServiceV1ModelResidentialListing: DomainListingAdminServiceV1ModelResidentialListing, options?: any): AxiosPromise<DomainListingAdminServiceV1ModelListingResponse> {
            return localVarFp.listingsUpsertResidentialListing(domainListingAdminServiceV1ModelResidentialListing, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an externally sold business listing; or takes an existing business listing off the market.
         * @param {ListingAdminV2BusinessOffMarketListing} listingAdminV2BusinessOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing: ListingAdminV2BusinessOffMarketListing, options?: any): AxiosPromise<ListingAdminV2ListingResponse> {
            return localVarFp.listingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a commercial listing.
         * @param {ListingAdminV2CommercialListingV2} listingAdminV2CommercialListingV2 Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertcommerciallisting(listingAdminV2CommercialListingV2: ListingAdminV2CommercialListingV2, options?: any): AxiosPromise<ListingAdminV2ListingResponse> {
            return localVarFp.listingsUpsertcommerciallisting(listingAdminV2CommercialListingV2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
         * @param {ListingAdminV2CommercialOffMarketListing} listingAdminV2CommercialOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing: ListingAdminV2CommercialOffMarketListing, options?: any): AxiosPromise<ListingAdminV2ListingResponse> {
            return localVarFp.listingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
         * @param {ListingAdminV2ResidentialOffMarketListing} listingAdminV2ResidentialOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing: ListingAdminV2ResidentialOffMarketListing, options?: any): AxiosPromise<ListingAdminV2ListingResponse> {
            return localVarFp.listingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListingsApi - object-oriented interface
 * @export
 * @class ListingsApi
 * @extends {BaseAPI}
 */
export class ListingsApi extends BaseAPI {
    /**
     * The resulting suggested location can be of type \"suburb\" / \"area\" / \"region\".    The `name` property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [`v1/listings/residential/_search`](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
     * @summary Suggests listing locations
     * @param {string} [terms] Suburb / area / region prefix, or postcode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingLocationsSearch(terms?: string, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingLocationsSearch(terms, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves business listings matching the specified criteria.
     * @param {DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest} domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest Search parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsDetailedBusinessSearch(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest: DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsDetailedBusinessSearch(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves commercial listings matching the specified criteria.
     * @param {DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest} domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest Search parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsDetailedCommercialSearch(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest: DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsDetailedCommercialSearch(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
     * @summary Retrieves residential listings matching the specified criteria.
     * @param {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters} domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters Search parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsDetailedResidentialSearch(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsDetailedResidentialSearch(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve details of listing using the listing id
     * @param {number} id Id of the listing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsGet(id: number, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve details of all enquiries received for a specific listing
     * @param {number} id Listing Id
     * @param {number} [pageNumber] Page number for paginated results (25 per page)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsGetEnquiries(id: number, pageNumber?: number, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsGetEnquiries(id, pageNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the processing report
     * @param {string} id Report id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsGetListingReport(id: string, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsGetListingReport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Searches processing reports
     * @param {number} agencyId Domain agency Id
     * @param {string} providerAdId External provider advertisement identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsGetListingReportByReference(agencyId: number, providerAdId: string, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsGetListingReportByReference(agencyId, providerAdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve details of listing using the listing id
     * @param {number} id Id of the listing
     * @param {ListingsGetListingStatisticsTimePeriodEnum} [timePeriod] The period of time to see the listing performance for (not including today). Defaults to Last7Days
     * @param {ListingsGetListingStatisticsChannelEnum} [channel] Filter statistics for the given channel. Defaults to listing Channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsGetListingStatistics(id: number, timePeriod?: ListingsGetListingStatisticsTimePeriodEnum, channel?: ListingsGetListingStatisticsChannelEnum, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsGetListingStatistics(id, timePeriod, channel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates or updates a business listing
     * @param {DomainListingAdminServiceV1ModelBusinessListing} domainListingAdminServiceV1ModelBusinessListing The business listing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsUpsertBusinessListing(domainListingAdminServiceV1ModelBusinessListing: DomainListingAdminServiceV1ModelBusinessListing, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsUpsertBusinessListing(domainListingAdminServiceV1ModelBusinessListing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates or updates a residential listing
     * @param {DomainListingAdminServiceV1ModelResidentialListing} domainListingAdminServiceV1ModelResidentialListing The residential listing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsUpsertResidentialListing(domainListingAdminServiceV1ModelResidentialListing: DomainListingAdminServiceV1ModelResidentialListing, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsUpsertResidentialListing(domainListingAdminServiceV1ModelResidentialListing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an externally sold business listing; or takes an existing business listing off the market.
     * @param {ListingAdminV2BusinessOffMarketListing} listingAdminV2BusinessOffMarketListing Listing data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing: ListingAdminV2BusinessOffMarketListing, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a commercial listing.
     * @param {ListingAdminV2CommercialListingV2} listingAdminV2CommercialListingV2 Listing data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsUpsertcommerciallisting(listingAdminV2CommercialListingV2: ListingAdminV2CommercialListingV2, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsUpsertcommerciallisting(listingAdminV2CommercialListingV2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
     * @param {ListingAdminV2CommercialOffMarketListing} listingAdminV2CommercialOffMarketListing Listing data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing: ListingAdminV2CommercialOffMarketListing, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
     * @param {ListingAdminV2ResidentialOffMarketListing} listingAdminV2ResidentialOffMarketListing Listing data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public listingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing: ListingAdminV2ResidentialOffMarketListing, options?: AxiosRequestConfig) {
        return ListingsApiFp(this.configuration).listingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListingsGetListingStatisticsTimePeriodEnum = {
    Last7Days: 'last7Days',
    Last90Days: 'last90Days',
    WholeCampaign: 'wholeCampaign'
} as const;
export type ListingsGetListingStatisticsTimePeriodEnum = typeof ListingsGetListingStatisticsTimePeriodEnum[keyof typeof ListingsGetListingStatisticsTimePeriodEnum];
/**
 * @export
 */
export const ListingsGetListingStatisticsChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
} as const;
export type ListingsGetListingStatisticsChannelEnum = typeof ListingsGetListingStatisticsChannelEnum[keyof typeof ListingsGetListingStatisticsChannelEnum];


/**
 * LocationsApi - axios parameter creator
 * @export
 */
export const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get location data based on the given domainLocationId
         * @param {string} domainLocationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationProfilesGet: async (domainLocationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainLocationId' is not null or undefined
            assertParamExists('locationProfilesGet', 'domainLocationId', domainLocationId)
            const localVarPath = `/v1/locations/profiles/{domainLocationId}`
                .replace(`{${"domainLocationId"}}`, encodeURIComponent(String(domainLocationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_locations_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_locations_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsApi - functional programming interface
 * @export
 */
export const LocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get location data based on the given domainLocationId
         * @param {string} domainLocationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationProfilesGet(domainLocationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainLocationProfilesServiceV1ModelLocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationProfilesGet(domainLocationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationsApi - factory interface
 * @export
 */
export const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get location data based on the given domainLocationId
         * @param {string} domainLocationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationProfilesGet(domainLocationId: string, options?: any): AxiosPromise<DomainLocationProfilesServiceV1ModelLocation> {
            return localVarFp.locationProfilesGet(domainLocationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export class LocationsApi extends BaseAPI {
    /**
     * 
     * @summary Get location data based on the given domainLocationId
     * @param {string} domainLocationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationProfilesGet(domainLocationId: string, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).locationProfilesGet(domainLocationId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MeApi - axios parameter creator
 * @export
 */
export const MeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve list of agencies with which the current client is associated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetMyAgencies: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/me/agencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve list of provider Ids with which the current client is associated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetMyProviders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/me/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve information about the currently authorised request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeApi - functional programming interface
 * @export
 */
export const MeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve list of agencies with which the current client is associated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meGetMyAgencies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MeV1AgencySummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meGetMyAgencies(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve list of provider Ids with which the current client is associated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meGetMyProviders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MeV1ProviderSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meGetMyProviders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve information about the currently authorised request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeV1MyDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeApi - factory interface
 * @export
 */
export const MeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve list of agencies with which the current client is associated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetMyAgencies(options?: any): AxiosPromise<Array<MeV1AgencySummary>> {
            return localVarFp.meGetMyAgencies(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve list of provider Ids with which the current client is associated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetMyProviders(options?: any): AxiosPromise<Array<MeV1ProviderSummary>> {
            return localVarFp.meGetMyProviders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve information about the currently authorised request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meProfile(options?: any): AxiosPromise<MeV1MyDetails> {
            return localVarFp.meProfile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeApi - object-oriented interface
 * @export
 * @class MeApi
 * @extends {BaseAPI}
 */
export class MeApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve list of agencies with which the current client is associated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public meGetMyAgencies(options?: AxiosRequestConfig) {
        return MeApiFp(this.configuration).meGetMyAgencies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve list of provider Ids with which the current client is associated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public meGetMyProviders(options?: AxiosRequestConfig) {
        return MeApiFp(this.configuration).meGetMyProviders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve information about the currently authorised request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public meProfile(options?: AxiosRequestConfig) {
        return MeApiFp(this.configuration).meProfile(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PreMarketApi - axios parameter creator
 * @export
 */
export const PreMarketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a pre-portal listing.
         * @param {string} id Pre-portal listing ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('preMarketGet', 'id', id)
            const localVarPath = `/v2/premarket/listings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patches a pre-portal listing.
         * @param {string} id Pre-portal listing ID.
         * @param {PreMarketV1ListingRequestJsonPatchDocument} [preMarketV1ListingRequestJsonPatchDocument] &#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketPatch: async (id: string, preMarketV1ListingRequestJsonPatchDocument?: PreMarketV1ListingRequestJsonPatchDocument, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('preMarketPatch', 'id', id)
            const localVarPath = `/v2/premarket/listings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(preMarketV1ListingRequestJsonPatchDocument, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates or updates a pre-portal listing.
         * @param {PreMarketV1ListingRequest} [preMarketV1ListingRequest] Pre-portal listing request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketPost: async (preMarketV1ListingRequest?: PreMarketV1ListingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/premarket/listings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(preMarketV1ListingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PreMarketApi - functional programming interface
 * @export
 */
export const PreMarketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PreMarketApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves a pre-portal listing.
         * @param {string} id Pre-portal listing ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preMarketGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreMarketV1ListingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preMarketGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Patches a pre-portal listing.
         * @param {string} id Pre-portal listing ID.
         * @param {PreMarketV1ListingRequestJsonPatchDocument} [preMarketV1ListingRequestJsonPatchDocument] &#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preMarketPatch(id: string, preMarketV1ListingRequestJsonPatchDocument?: PreMarketV1ListingRequestJsonPatchDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreMarketV1ListingRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preMarketPatch(id, preMarketV1ListingRequestJsonPatchDocument, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates or updates a pre-portal listing.
         * @param {PreMarketV1ListingRequest} [preMarketV1ListingRequest] Pre-portal listing request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preMarketPost(preMarketV1ListingRequest?: PreMarketV1ListingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreMarketV1CreateOrUpdateListingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preMarketPost(preMarketV1ListingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PreMarketApi - factory interface
 * @export
 */
export const PreMarketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PreMarketApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves a pre-portal listing.
         * @param {string} id Pre-portal listing ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketGet(id: string, options?: any): AxiosPromise<PreMarketV1ListingResponse> {
            return localVarFp.preMarketGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patches a pre-portal listing.
         * @param {string} id Pre-portal listing ID.
         * @param {PreMarketV1ListingRequestJsonPatchDocument} [preMarketV1ListingRequestJsonPatchDocument] &#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketPatch(id: string, preMarketV1ListingRequestJsonPatchDocument?: PreMarketV1ListingRequestJsonPatchDocument, options?: any): AxiosPromise<PreMarketV1ListingRequest> {
            return localVarFp.preMarketPatch(id, preMarketV1ListingRequestJsonPatchDocument, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates or updates a pre-portal listing.
         * @param {PreMarketV1ListingRequest} [preMarketV1ListingRequest] Pre-portal listing request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketPost(preMarketV1ListingRequest?: PreMarketV1ListingRequest, options?: any): AxiosPromise<PreMarketV1CreateOrUpdateListingResponse> {
            return localVarFp.preMarketPost(preMarketV1ListingRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PreMarketApi - object-oriented interface
 * @export
 * @class PreMarketApi
 * @extends {BaseAPI}
 */
export class PreMarketApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves a pre-portal listing.
     * @param {string} id Pre-portal listing ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreMarketApi
     */
    public preMarketGet(id: string, options?: AxiosRequestConfig) {
        return PreMarketApiFp(this.configuration).preMarketGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patches a pre-portal listing.
     * @param {string} id Pre-portal listing ID.
     * @param {PreMarketV1ListingRequestJsonPatchDocument} [preMarketV1ListingRequestJsonPatchDocument] &#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreMarketApi
     */
    public preMarketPatch(id: string, preMarketV1ListingRequestJsonPatchDocument?: PreMarketV1ListingRequestJsonPatchDocument, options?: AxiosRequestConfig) {
        return PreMarketApiFp(this.configuration).preMarketPatch(id, preMarketV1ListingRequestJsonPatchDocument, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates or updates a pre-portal listing.
     * @param {PreMarketV1ListingRequest} [preMarketV1ListingRequest] Pre-portal listing request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreMarketApi
     */
    public preMarketPost(preMarketV1ListingRequest?: PreMarketV1ListingRequest, options?: AxiosRequestConfig) {
        return PreMarketApiFp(this.configuration).preMarketPost(preMarketV1ListingRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get updated pricing information for a hypothetical listing
         * @param {BookingsV2RateForNewListingRequest} [bookingsV2RateForNewListingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsRateForNewListing: async (bookingsV2RateForNewListingRequest?: BookingsV2RateForNewListingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/products/ratefornewlisting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookingsV2RateForNewListingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get updated pricing information for a hypothetical listing
         * @param {SocialBoostV1RateForNewSocialBoostRequestModel} [socialBoostV1RateForNewSocialBoostRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialBoostRateForNewSocialBoost: async (socialBoostV1RateForNewSocialBoostRequestModel?: SocialBoostV1RateForNewSocialBoostRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/products/ratefornewsocialboost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(socialBoostV1RateForNewSocialBoostRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get updated pricing information for a hypothetical listing
         * @param {BookingsV2RateForNewListingRequest} [bookingsV2RateForNewListingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsRateForNewListing(bookingsV2RateForNewListingRequest?: BookingsV2RateForNewListingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingsV2RateForNewListing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsRateForNewListing(bookingsV2RateForNewListingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get updated pricing information for a hypothetical listing
         * @param {SocialBoostV1RateForNewSocialBoostRequestModel} [socialBoostV1RateForNewSocialBoostRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async socialBoostRateForNewSocialBoost(socialBoostV1RateForNewSocialBoostRequestModel?: SocialBoostV1RateForNewSocialBoostRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SocialBoostV1RateForNewSocialBoost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.socialBoostRateForNewSocialBoost(socialBoostV1RateForNewSocialBoostRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get updated pricing information for a hypothetical listing
         * @param {BookingsV2RateForNewListingRequest} [bookingsV2RateForNewListingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsRateForNewListing(bookingsV2RateForNewListingRequest?: BookingsV2RateForNewListingRequest, options?: any): AxiosPromise<BookingsV2RateForNewListing> {
            return localVarFp.productsRateForNewListing(bookingsV2RateForNewListingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get updated pricing information for a hypothetical listing
         * @param {SocialBoostV1RateForNewSocialBoostRequestModel} [socialBoostV1RateForNewSocialBoostRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialBoostRateForNewSocialBoost(socialBoostV1RateForNewSocialBoostRequestModel?: SocialBoostV1RateForNewSocialBoostRequestModel, options?: any): AxiosPromise<SocialBoostV1RateForNewSocialBoost> {
            return localVarFp.socialBoostRateForNewSocialBoost(socialBoostV1RateForNewSocialBoostRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * 
     * @summary Get updated pricing information for a hypothetical listing
     * @param {BookingsV2RateForNewListingRequest} [bookingsV2RateForNewListingRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsRateForNewListing(bookingsV2RateForNewListingRequest?: BookingsV2RateForNewListingRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsRateForNewListing(bookingsV2RateForNewListingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get updated pricing information for a hypothetical listing
     * @param {SocialBoostV1RateForNewSocialBoostRequestModel} [socialBoostV1RateForNewSocialBoostRequestModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public socialBoostRateForNewSocialBoost(socialBoostV1RateForNewSocialBoostRequestModel?: SocialBoostV1RateForNewSocialBoostRequestModel, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).socialBoostRateForNewSocialBoost(socialBoostV1RateForNewSocialBoostRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Details of project
         * @param {number} id Id of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsGet', 'id', id)
            const localVarPath = `/v1/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Project listings
         * @param {number} id Id of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetChildListings: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsGetChildListings', 'id', id)
            const localVarPath = `/v1/projects/{id}/listings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves statistics for a specific project with a breakdown for listings.
         * @param {number} id project identifier
         * @param {ProjectsGetChildListingsStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetChildListingsStatistics: async (id: number, timePeriod?: ProjectsGetChildListingsStatisticsTimePeriodEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsGetChildListingsStatistics', 'id', id)
            const localVarPath = `/v1/projects/{id}/listings/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve details of all enquiries received for a specific new development project
         * @param {number} id New Development Project Id
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetEnquiries: async (id: number, pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsGetEnquiries', 'id', id)
            const localVarPath = `/v1/projects/{id}/enquiries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves statistics for a specific project.
         * @param {number} id project identifier
         * @param {ProjectsGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetStatistics: async (id: number, timePeriod?: ProjectsGetStatisticsTimePeriodEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsGetStatistics', 'id', id)
            const localVarPath = `/v1/projects/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
         * @summary Searches projects
         * @param {number} [agencyId] Restricts to the provided agency
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {ProjectsSearchProjectStatusEnum} [projectStatus] The set of projects to return, defaults to &#x60;live&#x60; only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSearch: async (agencyId?: number, pageNumber?: number, pageSize?: number, projectStatus?: ProjectsSearchProjectStatusEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            if (agencyId !== undefined) {
                localVarQueryParameter['agencyId'] = agencyId;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (projectStatus !== undefined) {
                localVarQueryParameter['projectStatus'] = projectStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Details of project
         * @param {number} id Id of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingsV2Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Project listings
         * @param {number} id Id of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsGetChildListings(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListingsV2Listing>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsGetChildListings(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves statistics for a specific project with a breakdown for listings.
         * @param {number} id project identifier
         * @param {ProjectsGetChildListingsStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsGetChildListingsStatistics(id: number, timePeriod?: ProjectsGetChildListingsStatisticsTimePeriodEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingPerformanceV1ProjectListingStatisticsReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsGetChildListingsStatistics(id, timePeriod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve details of all enquiries received for a specific new development project
         * @param {number} id New Development Project Id
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsGetEnquiries(id: number, pageNumber?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnquiriesV1EnquiryReport>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsGetEnquiries(id, pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves statistics for a specific project.
         * @param {number} id project identifier
         * @param {ProjectsGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsGetStatistics(id: number, timePeriod?: ProjectsGetStatisticsTimePeriodEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingPerformanceV1ProjectStatisticsReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsGetStatistics(id, timePeriod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
         * @summary Searches projects
         * @param {number} [agencyId] Restricts to the provided agency
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {ProjectsSearchProjectStatusEnum} [projectStatus] The set of projects to return, defaults to &#x60;live&#x60; only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsSearch(agencyId?: number, pageNumber?: number, pageSize?: number, projectStatus?: ProjectsSearchProjectStatusEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListingsV2Project>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsSearch(agencyId, pageNumber, pageSize, projectStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * 
         * @summary Details of project
         * @param {number} id Id of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet(id: number, options?: any): AxiosPromise<ListingsV2Project> {
            return localVarFp.projectsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Project listings
         * @param {number} id Id of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetChildListings(id: number, options?: any): AxiosPromise<Array<ListingsV2Listing>> {
            return localVarFp.projectsGetChildListings(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves statistics for a specific project with a breakdown for listings.
         * @param {number} id project identifier
         * @param {ProjectsGetChildListingsStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetChildListingsStatistics(id: number, timePeriod?: ProjectsGetChildListingsStatisticsTimePeriodEnum, options?: any): AxiosPromise<ListingPerformanceV1ProjectListingStatisticsReport> {
            return localVarFp.projectsGetChildListingsStatistics(id, timePeriod, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve details of all enquiries received for a specific new development project
         * @param {number} id New Development Project Id
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetEnquiries(id: number, pageNumber?: number, options?: any): AxiosPromise<Array<EnquiriesV1EnquiryReport>> {
            return localVarFp.projectsGetEnquiries(id, pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves statistics for a specific project.
         * @param {number} id project identifier
         * @param {ProjectsGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetStatistics(id: number, timePeriod?: ProjectsGetStatisticsTimePeriodEnum, options?: any): AxiosPromise<ListingPerformanceV1ProjectStatisticsReport> {
            return localVarFp.projectsGetStatistics(id, timePeriod, options).then((request) => request(axios, basePath));
        },
        /**
         * Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
         * @summary Searches projects
         * @param {number} [agencyId] Restricts to the provided agency
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {ProjectsSearchProjectStatusEnum} [projectStatus] The set of projects to return, defaults to &#x60;live&#x60; only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSearch(agencyId?: number, pageNumber?: number, pageSize?: number, projectStatus?: ProjectsSearchProjectStatusEnum, options?: any): AxiosPromise<Array<ListingsV2Project>> {
            return localVarFp.projectsSearch(agencyId, pageNumber, pageSize, projectStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * 
     * @summary Details of project
     * @param {number} id Id of the project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsGet(id: number, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Project listings
     * @param {number} id Id of the project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsGetChildListings(id: number, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsGetChildListings(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves statistics for a specific project with a breakdown for listings.
     * @param {number} id project identifier
     * @param {ProjectsGetChildListingsStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsGetChildListingsStatistics(id: number, timePeriod?: ProjectsGetChildListingsStatisticsTimePeriodEnum, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsGetChildListingsStatistics(id, timePeriod, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve details of all enquiries received for a specific new development project
     * @param {number} id New Development Project Id
     * @param {number} [pageNumber] Page number for paginated results (25 per page)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsGetEnquiries(id: number, pageNumber?: number, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsGetEnquiries(id, pageNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves statistics for a specific project.
     * @param {number} id project identifier
     * @param {ProjectsGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsGetStatistics(id: number, timePeriod?: ProjectsGetStatisticsTimePeriodEnum, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsGetStatistics(id, timePeriod, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
     * @summary Searches projects
     * @param {number} [agencyId] Restricts to the provided agency
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results
     * @param {ProjectsSearchProjectStatusEnum} [projectStatus] The set of projects to return, defaults to &#x60;live&#x60; only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsSearch(agencyId?: number, pageNumber?: number, pageSize?: number, projectStatus?: ProjectsSearchProjectStatusEnum, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsSearch(agencyId, pageNumber, pageSize, projectStatus, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ProjectsGetChildListingsStatisticsTimePeriodEnum = {
    Last7Days: 'last7Days',
    Last90Days: 'last90Days',
    WholeCampaign: 'wholeCampaign'
} as const;
export type ProjectsGetChildListingsStatisticsTimePeriodEnum = typeof ProjectsGetChildListingsStatisticsTimePeriodEnum[keyof typeof ProjectsGetChildListingsStatisticsTimePeriodEnum];
/**
 * @export
 */
export const ProjectsGetStatisticsTimePeriodEnum = {
    Last7Days: 'last7Days',
    Last90Days: 'last90Days',
    WholeCampaign: 'wholeCampaign'
} as const;
export type ProjectsGetStatisticsTimePeriodEnum = typeof ProjectsGetStatisticsTimePeriodEnum[keyof typeof ProjectsGetStatisticsTimePeriodEnum];
/**
 * @export
 */
export const ProjectsSearchProjectStatusEnum = {
    Live: 'live',
    InActive: 'inActive'
} as const;
export type ProjectsSearchProjectStatusEnum = typeof ProjectsSearchProjectStatusEnum[keyof typeof ProjectsSearchProjectStatusEnum];


/**
 * PropertiesApi - axios parameter creator
 * @export
 */
export const PropertiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve list of listings for the given property id
         * @param {string} propertyId 
         * @param {string} [updatedSince] 
         * @param {string} [listedSince] 
         * @param {ListingsBypropertyidSaleModeEnum} [saleMode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsBypropertyid: async (propertyId: string, updatedSince?: string, listedSince?: string, saleMode?: ListingsBypropertyidSaleModeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('listingsBypropertyid', 'propertyId', propertyId)
            const localVarPath = `/v2/properties/{propertyId}/listings`
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration)

            if (updatedSince !== undefined) {
                localVarQueryParameter['updatedSince'] = (updatedSince as any instanceof Date) ?
                    (updatedSince as any).toISOString() :
                    updatedSince;
            }

            if (listedSince !== undefined) {
                localVarQueryParameter['listedSince'] = (listedSince as any instanceof Date) ?
                    (listedSince as any).toISOString() :
                    listedSince;
            }

            if (saleMode !== undefined) {
                localVarQueryParameter['saleMode'] = saleMode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution and appropriate state government attribution.
         * @summary Retrieves a specific property.
         * @param {string} id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('propertiesGet', 'id', id)
            const localVarPath = `/v1/properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Price estimates based on propertyId
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGetPriceEstimate: async (propertyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('propertiesGetPriceEstimate', 'propertyId', propertyId)
            const localVarPath = `/v1/properties/{propertyId}/priceEstimate`
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rental estimates based on propertyId
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGetRentalEstimate: async (propertyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('propertiesGetRentalEstimate', 'propertyId', propertyId)
            const localVarPath = `/v1/properties/{propertyId}/rentalEstimate`
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution.
         * @summary Search for suggested addresses for the given terms
         * @param {string} terms The address to search
         * @param {number} [pageSize] Number of suggestions (maximum 20)
         * @param {PropertiesSuggestChannelEnum} [channel] Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesSuggest: async (terms: string, pageSize?: number, channel?: PropertiesSuggestChannelEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'terms' is not null or undefined
            assertParamExists('propertiesSuggest', 'terms', terms)
            const localVarPath = `/v1/properties/_suggest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)

            if (terms !== undefined) {
                localVarQueryParameter['terms'] = terms;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a property report based on query parameters
         * @param {string} propertyType Type of property &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {string} streetNumber Street number
         * @param {string} streetName Street name
         * @param {string} suburb Suburb e.g. &#x60;Pyrmont&#x60;
         * @param {string} state State e.g. &#x60;NSW&#x60;
         * @param {string} [unitNumber] Unit number
         * @param {string} [streetType] Street type e.g. &#x60;Pl&#x60;
         * @param {string} [postcode] Postcode e.g. &#x60;2009&#x60;
         * @param {number} [areaSize] Area size
         * @param {number} [bedrooms] Number of bedrooms
         * @param {number} [bathrooms] Number of bathrooms
         * @param {number} [parking] Number of parking spots
         * @param {string} [preparedFor] \&quot;Prepared for\&quot; information
         * @param {string} [productCode] Report product code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyReportsGet: async (propertyType: string, streetNumber: string, streetName: string, suburb: string, state: string, unitNumber?: string, streetType?: string, postcode?: string, areaSize?: number, bedrooms?: number, bathrooms?: number, parking?: number, preparedFor?: string, productCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'propertyType' is not null or undefined
            assertParamExists('propertyReportsGet', 'propertyType', propertyType)
            // verify required parameter 'streetNumber' is not null or undefined
            assertParamExists('propertyReportsGet', 'streetNumber', streetNumber)
            // verify required parameter 'streetName' is not null or undefined
            assertParamExists('propertyReportsGet', 'streetName', streetName)
            // verify required parameter 'suburb' is not null or undefined
            assertParamExists('propertyReportsGet', 'suburb', suburb)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('propertyReportsGet', 'state', state)
            const localVarPath = `/v1/propertyReports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyreports_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyreports_read"], configuration)

            if (propertyType !== undefined) {
                localVarQueryParameter['propertyType'] = propertyType;
            }

            if (streetNumber !== undefined) {
                localVarQueryParameter['streetNumber'] = streetNumber;
            }

            if (streetName !== undefined) {
                localVarQueryParameter['streetName'] = streetName;
            }

            if (suburb !== undefined) {
                localVarQueryParameter['suburb'] = suburb;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (unitNumber !== undefined) {
                localVarQueryParameter['unitNumber'] = unitNumber;
            }

            if (streetType !== undefined) {
                localVarQueryParameter['streetType'] = streetType;
            }

            if (postcode !== undefined) {
                localVarQueryParameter['postcode'] = postcode;
            }

            if (areaSize !== undefined) {
                localVarQueryParameter['areaSize'] = areaSize;
            }

            if (bedrooms !== undefined) {
                localVarQueryParameter['bedrooms'] = bedrooms;
            }

            if (bathrooms !== undefined) {
                localVarQueryParameter['bathrooms'] = bathrooms;
            }

            if (parking !== undefined) {
                localVarQueryParameter['parking'] = parking;
            }

            if (preparedFor !== undefined) {
                localVarQueryParameter['preparedFor'] = preparedFor;
            }

            if (productCode !== undefined) {
                localVarQueryParameter['productCode'] = productCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for a specific property and provide property information and latest sale/rental activity if found. Supply either propertyId, gnafId, or all address fields (with flatNumber optional)
         * @summary API that supplies property level data and activities across two packages for a specific property
         * @param {string} [propertyId] 
         * @param {string} [gnafId] 
         * @param {string} [flatNumber] 
         * @param {string} [streetNumber] 
         * @param {string} [streetName] 
         * @param {string} [streetType] 
         * @param {string} [postcode] 
         * @param {string} [suburbName] 
         * @param {PropertyenrichmentGetStateEnum} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyenrichmentGet: async (propertyId?: string, gnafId?: string, flatNumber?: string, streetNumber?: string, streetName?: string, streetType?: string, postcode?: string, suburbName?: string, state?: PropertyenrichmentGetStateEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/propertyenrichment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration)

            if (propertyId !== undefined) {
                localVarQueryParameter['propertyId'] = propertyId;
            }

            if (gnafId !== undefined) {
                localVarQueryParameter['gnafId'] = gnafId;
            }

            if (flatNumber !== undefined) {
                localVarQueryParameter['flatNumber'] = flatNumber;
            }

            if (streetNumber !== undefined) {
                localVarQueryParameter['streetNumber'] = streetNumber;
            }

            if (streetName !== undefined) {
                localVarQueryParameter['streetName'] = streetName;
            }

            if (streetType !== undefined) {
                localVarQueryParameter['streetType'] = streetType;
            }

            if (postcode !== undefined) {
                localVarQueryParameter['postcode'] = postcode;
            }

            if (suburbName !== undefined) {
                localVarQueryParameter['suburbName'] = suburbName;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PropertiesApi - functional programming interface
 * @export
 */
export const PropertiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PropertiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve list of listings for the given property id
         * @param {string} propertyId 
         * @param {string} [updatedSince] 
         * @param {string} [listedSince] 
         * @param {ListingsBypropertyidSaleModeEnum} [saleMode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listingsBypropertyid(propertyId: string, updatedSince?: string, listedSince?: string, saleMode?: ListingsBypropertyidSaleModeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListingsV2Listing>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listingsBypropertyid(propertyId, updatedSince, listedSince, saleMode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution and appropriate state government attribution.
         * @summary Retrieves a specific property.
         * @param {string} id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertiesV1Property>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Price estimates based on propertyId
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesGetPriceEstimate(propertyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainAvmPIV1PropertyPriceEstimate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesGetPriceEstimate(propertyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rental estimates based on propertyId
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesGetRentalEstimate(propertyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainAvmPIV1RentalEstimate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesGetRentalEstimate(propertyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution.
         * @summary Search for suggested addresses for the given terms
         * @param {string} terms The address to search
         * @param {number} [pageSize] Number of suggestions (maximum 20)
         * @param {PropertiesSuggestChannelEnum} [channel] Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesSuggest(terms: string, pageSize?: number, channel?: PropertiesSuggestChannelEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LocationTypeaheadV1PropertySuggestion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesSuggest(terms, pageSize, channel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a property report based on query parameters
         * @param {string} propertyType Type of property &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {string} streetNumber Street number
         * @param {string} streetName Street name
         * @param {string} suburb Suburb e.g. &#x60;Pyrmont&#x60;
         * @param {string} state State e.g. &#x60;NSW&#x60;
         * @param {string} [unitNumber] Unit number
         * @param {string} [streetType] Street type e.g. &#x60;Pl&#x60;
         * @param {string} [postcode] Postcode e.g. &#x60;2009&#x60;
         * @param {number} [areaSize] Area size
         * @param {number} [bedrooms] Number of bedrooms
         * @param {number} [bathrooms] Number of bathrooms
         * @param {number} [parking] Number of parking spots
         * @param {string} [preparedFor] \&quot;Prepared for\&quot; information
         * @param {string} [productCode] Report product code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertyReportsGet(propertyType: string, streetNumber: string, streetName: string, suburb: string, state: string, unitNumber?: string, streetType?: string, postcode?: string, areaSize?: number, bedrooms?: number, bathrooms?: number, parking?: number, preparedFor?: string, productCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainPropertyReportServiceV1ModelPropertyReportGenerationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertyReportsGet(propertyType, streetNumber, streetName, suburb, state, unitNumber, streetType, postcode, areaSize, bedrooms, bathrooms, parking, preparedFor, productCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for a specific property and provide property information and latest sale/rental activity if found. Supply either propertyId, gnafId, or all address fields (with flatNumber optional)
         * @summary API that supplies property level data and activities across two packages for a specific property
         * @param {string} [propertyId] 
         * @param {string} [gnafId] 
         * @param {string} [flatNumber] 
         * @param {string} [streetNumber] 
         * @param {string} [streetName] 
         * @param {string} [streetType] 
         * @param {string} [postcode] 
         * @param {string} [suburbName] 
         * @param {PropertyenrichmentGetStateEnum} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertyenrichmentGet(propertyId?: string, gnafId?: string, flatNumber?: string, streetNumber?: string, streetName?: string, streetType?: string, postcode?: string, suburbName?: string, state?: PropertyenrichmentGetStateEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyEnrichmentV1PropertyResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertyenrichmentGet(propertyId, gnafId, flatNumber, streetNumber, streetName, streetType, postcode, suburbName, state, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PropertiesApi - factory interface
 * @export
 */
export const PropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PropertiesApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve list of listings for the given property id
         * @param {string} propertyId 
         * @param {string} [updatedSince] 
         * @param {string} [listedSince] 
         * @param {ListingsBypropertyidSaleModeEnum} [saleMode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsBypropertyid(propertyId: string, updatedSince?: string, listedSince?: string, saleMode?: ListingsBypropertyidSaleModeEnum, options?: any): AxiosPromise<Array<ListingsV2Listing>> {
            return localVarFp.listingsBypropertyid(propertyId, updatedSince, listedSince, saleMode, options).then((request) => request(axios, basePath));
        },
        /**
         * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution and appropriate state government attribution.
         * @summary Retrieves a specific property.
         * @param {string} id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGet(id: string, options?: any): AxiosPromise<PropertiesV1Property> {
            return localVarFp.propertiesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Price estimates based on propertyId
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGetPriceEstimate(propertyId: string, options?: any): AxiosPromise<DomainAvmPIV1PropertyPriceEstimate> {
            return localVarFp.propertiesGetPriceEstimate(propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rental estimates based on propertyId
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGetRentalEstimate(propertyId: string, options?: any): AxiosPromise<DomainAvmPIV1RentalEstimate> {
            return localVarFp.propertiesGetRentalEstimate(propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution.
         * @summary Search for suggested addresses for the given terms
         * @param {string} terms The address to search
         * @param {number} [pageSize] Number of suggestions (maximum 20)
         * @param {PropertiesSuggestChannelEnum} [channel] Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesSuggest(terms: string, pageSize?: number, channel?: PropertiesSuggestChannelEnum, options?: any): AxiosPromise<Array<LocationTypeaheadV1PropertySuggestion>> {
            return localVarFp.propertiesSuggest(terms, pageSize, channel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a property report based on query parameters
         * @param {string} propertyType Type of property &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {string} streetNumber Street number
         * @param {string} streetName Street name
         * @param {string} suburb Suburb e.g. &#x60;Pyrmont&#x60;
         * @param {string} state State e.g. &#x60;NSW&#x60;
         * @param {string} [unitNumber] Unit number
         * @param {string} [streetType] Street type e.g. &#x60;Pl&#x60;
         * @param {string} [postcode] Postcode e.g. &#x60;2009&#x60;
         * @param {number} [areaSize] Area size
         * @param {number} [bedrooms] Number of bedrooms
         * @param {number} [bathrooms] Number of bathrooms
         * @param {number} [parking] Number of parking spots
         * @param {string} [preparedFor] \&quot;Prepared for\&quot; information
         * @param {string} [productCode] Report product code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyReportsGet(propertyType: string, streetNumber: string, streetName: string, suburb: string, state: string, unitNumber?: string, streetType?: string, postcode?: string, areaSize?: number, bedrooms?: number, bathrooms?: number, parking?: number, preparedFor?: string, productCode?: string, options?: any): AxiosPromise<DomainPropertyReportServiceV1ModelPropertyReportGenerationResult> {
            return localVarFp.propertyReportsGet(propertyType, streetNumber, streetName, suburb, state, unitNumber, streetType, postcode, areaSize, bedrooms, bathrooms, parking, preparedFor, productCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for a specific property and provide property information and latest sale/rental activity if found. Supply either propertyId, gnafId, or all address fields (with flatNumber optional)
         * @summary API that supplies property level data and activities across two packages for a specific property
         * @param {string} [propertyId] 
         * @param {string} [gnafId] 
         * @param {string} [flatNumber] 
         * @param {string} [streetNumber] 
         * @param {string} [streetName] 
         * @param {string} [streetType] 
         * @param {string} [postcode] 
         * @param {string} [suburbName] 
         * @param {PropertyenrichmentGetStateEnum} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyenrichmentGet(propertyId?: string, gnafId?: string, flatNumber?: string, streetNumber?: string, streetName?: string, streetType?: string, postcode?: string, suburbName?: string, state?: PropertyenrichmentGetStateEnum, options?: any): AxiosPromise<PropertyEnrichmentV1PropertyResults> {
            return localVarFp.propertyenrichmentGet(propertyId, gnafId, flatNumber, streetNumber, streetName, streetType, postcode, suburbName, state, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PropertiesApi - object-oriented interface
 * @export
 * @class PropertiesApi
 * @extends {BaseAPI}
 */
export class PropertiesApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve list of listings for the given property id
     * @param {string} propertyId 
     * @param {string} [updatedSince] 
     * @param {string} [listedSince] 
     * @param {ListingsBypropertyidSaleModeEnum} [saleMode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public listingsBypropertyid(propertyId: string, updatedSince?: string, listedSince?: string, saleMode?: ListingsBypropertyidSaleModeEnum, options?: AxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).listingsBypropertyid(propertyId, updatedSince, listedSince, saleMode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution and appropriate state government attribution.
     * @summary Retrieves a specific property.
     * @param {string} id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public propertiesGet(id: string, options?: AxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).propertiesGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Price estimates based on propertyId
     * @param {string} propertyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public propertiesGetPriceEstimate(propertyId: string, options?: AxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).propertiesGetPriceEstimate(propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rental estimates based on propertyId
     * @param {string} propertyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public propertiesGetRentalEstimate(propertyId: string, options?: AxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).propertiesGetRentalEstimate(propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution.
     * @summary Search for suggested addresses for the given terms
     * @param {string} terms The address to search
     * @param {number} [pageSize] Number of suggestions (maximum 20)
     * @param {PropertiesSuggestChannelEnum} [channel] Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public propertiesSuggest(terms: string, pageSize?: number, channel?: PropertiesSuggestChannelEnum, options?: AxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).propertiesSuggest(terms, pageSize, channel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a property report based on query parameters
     * @param {string} propertyType Type of property &#x60;House&#x60;, &#x60;Unit&#x60;
     * @param {string} streetNumber Street number
     * @param {string} streetName Street name
     * @param {string} suburb Suburb e.g. &#x60;Pyrmont&#x60;
     * @param {string} state State e.g. &#x60;NSW&#x60;
     * @param {string} [unitNumber] Unit number
     * @param {string} [streetType] Street type e.g. &#x60;Pl&#x60;
     * @param {string} [postcode] Postcode e.g. &#x60;2009&#x60;
     * @param {number} [areaSize] Area size
     * @param {number} [bedrooms] Number of bedrooms
     * @param {number} [bathrooms] Number of bathrooms
     * @param {number} [parking] Number of parking spots
     * @param {string} [preparedFor] \&quot;Prepared for\&quot; information
     * @param {string} [productCode] Report product code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public propertyReportsGet(propertyType: string, streetNumber: string, streetName: string, suburb: string, state: string, unitNumber?: string, streetType?: string, postcode?: string, areaSize?: number, bedrooms?: number, bathrooms?: number, parking?: number, preparedFor?: string, productCode?: string, options?: AxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).propertyReportsGet(propertyType, streetNumber, streetName, suburb, state, unitNumber, streetType, postcode, areaSize, bedrooms, bathrooms, parking, preparedFor, productCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for a specific property and provide property information and latest sale/rental activity if found. Supply either propertyId, gnafId, or all address fields (with flatNumber optional)
     * @summary API that supplies property level data and activities across two packages for a specific property
     * @param {string} [propertyId] 
     * @param {string} [gnafId] 
     * @param {string} [flatNumber] 
     * @param {string} [streetNumber] 
     * @param {string} [streetName] 
     * @param {string} [streetType] 
     * @param {string} [postcode] 
     * @param {string} [suburbName] 
     * @param {PropertyenrichmentGetStateEnum} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public propertyenrichmentGet(propertyId?: string, gnafId?: string, flatNumber?: string, streetNumber?: string, streetName?: string, streetType?: string, postcode?: string, suburbName?: string, state?: PropertyenrichmentGetStateEnum, options?: AxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).propertyenrichmentGet(propertyId, gnafId, flatNumber, streetNumber, streetName, streetType, postcode, suburbName, state, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListingsBypropertyidSaleModeEnum = {
    Sale: 'sale',
    Rent: 'rent',
    Both: 'both'
} as const;
export type ListingsBypropertyidSaleModeEnum = typeof ListingsBypropertyidSaleModeEnum[keyof typeof ListingsBypropertyidSaleModeEnum];
/**
 * @export
 */
export const PropertiesSuggestChannelEnum = {
    All: 'All',
    Residential: 'Residential',
    Commercial: 'Commercial'
} as const;
export type PropertiesSuggestChannelEnum = typeof PropertiesSuggestChannelEnum[keyof typeof PropertiesSuggestChannelEnum];
/**
 * @export
 */
export const PropertyenrichmentGetStateEnum = {
    Act: 'act',
    Nsw: 'nsw',
    Nt: 'nt',
    Qld: 'qld',
    Sa: 'sa',
    Vic: 'vic',
    Wa: 'wa'
} as const;
export type PropertyenrichmentGetStateEnum = typeof PropertyenrichmentGetStateEnum[keyof typeof PropertyenrichmentGetStateEnum];


/**
 * PropertyActivityApi - axios parameter creator
 * @export
 */
export const PropertyActivityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds properties to a portfolio by property id\'s and/or gnaf id\'s
         * @summary Add Properties to Portfolio
         * @param {string} portfolioId 
         * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityAddToPortfolio: async (portfolioId: string, propertyActivityAPIV1PortfolioDetails: PropertyActivityAPIV1PortfolioDetails | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('propertyActivityAddToPortfolio', 'portfolioId', portfolioId)
            // verify required parameter 'propertyActivityAPIV1PortfolioDetails' is not null or undefined
            assertParamExists('propertyActivityAddToPortfolio', 'propertyActivityAPIV1PortfolioDetails', propertyActivityAPIV1PortfolioDetails)
            const localVarPath = `/v1/property/activity/portfolio/{PortfolioId}`
                .replace(`{${"PortfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(propertyActivityAPIV1PortfolioDetails, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a portfolio and returns portfolio id
         * @summary Create Portfolio
         * @param {PropertyActivityCreatePortfolioRequest} propertyActivityCreatePortfolioRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityCreatePortfolio: async (propertyActivityCreatePortfolioRequest: PropertyActivityCreatePortfolioRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'propertyActivityCreatePortfolioRequest' is not null or undefined
            assertParamExists('propertyActivityCreatePortfolio', 'propertyActivityCreatePortfolioRequest', propertyActivityCreatePortfolioRequest)
            const localVarPath = `/v1/property/activity/portfolio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(propertyActivityCreatePortfolioRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a portfolio and all associated properties
         * @summary Delete Portfolio
         * @param {string} portfolioId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityDeletePortfolio: async (portfolioId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('propertyActivityDeletePortfolio', 'portfolioId', portfolioId)
            const localVarPath = `/v1/property/activity/portfolio/{PortfolioId}`
                .replace(`{${"PortfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all portfolios for the customer with a count of associated property and gnaf id\'s
         * @summary List Portfolios
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityListPortfolios: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/property/activity/portfoliosummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes properties from a portfolio by property id\'s and/or gnaf id\'s, returning any id\'s that did not exist within the portfolio
         * @summary Remove Properties from Portfolio
         * @param {string} portfolioId 
         * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityRemoveFromPortfolio: async (portfolioId: string, propertyActivityAPIV1PortfolioDetails: PropertyActivityAPIV1PortfolioDetails | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('propertyActivityRemoveFromPortfolio', 'portfolioId', portfolioId)
            // verify required parameter 'propertyActivityAPIV1PortfolioDetails' is not null or undefined
            assertParamExists('propertyActivityRemoveFromPortfolio', 'propertyActivityAPIV1PortfolioDetails', propertyActivityAPIV1PortfolioDetails)
            const localVarPath = `/v1/property/activity/portfolio/{PortfolioId}/property/delete`
                .replace(`{${"PortfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(propertyActivityAPIV1PortfolioDetails, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List property and gnaf id\'s for an existing portfolio
         * @summary View Properties in Portfolio
         * @param {string} portfolioId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityViewPortfolio: async (portfolioId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('propertyActivityViewPortfolio', 'portfolioId', portfolioId)
            const localVarPath = `/v1/property/activity/portfolio/{PortfolioId}`
                .replace(`{${"PortfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PropertyActivityApi - functional programming interface
 * @export
 */
export const PropertyActivityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PropertyActivityApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds properties to a portfolio by property id\'s and/or gnaf id\'s
         * @summary Add Properties to Portfolio
         * @param {string} portfolioId 
         * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertyActivityAddToPortfolio(portfolioId: string, propertyActivityAPIV1PortfolioDetails: PropertyActivityAPIV1PortfolioDetails | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertyActivityAddToPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a portfolio and returns portfolio id
         * @summary Create Portfolio
         * @param {PropertyActivityCreatePortfolioRequest} propertyActivityCreatePortfolioRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertyActivityCreatePortfolio(propertyActivityCreatePortfolioRequest: PropertyActivityCreatePortfolioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyActivityAPIV1PortfolioCreated>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertyActivityCreatePortfolio(propertyActivityCreatePortfolioRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a portfolio and all associated properties
         * @summary Delete Portfolio
         * @param {string} portfolioId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertyActivityDeletePortfolio(portfolioId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertyActivityDeletePortfolio(portfolioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all portfolios for the customer with a count of associated property and gnaf id\'s
         * @summary List Portfolios
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertyActivityListPortfolios(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyActivityAPIV1PortfolioList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertyActivityListPortfolios(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes properties from a portfolio by property id\'s and/or gnaf id\'s, returning any id\'s that did not exist within the portfolio
         * @summary Remove Properties from Portfolio
         * @param {string} portfolioId 
         * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertyActivityRemoveFromPortfolio(portfolioId: string, propertyActivityAPIV1PortfolioDetails: PropertyActivityAPIV1PortfolioDetails | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyActivityRemoveFromPortfolio200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertyActivityRemoveFromPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List property and gnaf id\'s for an existing portfolio
         * @summary View Properties in Portfolio
         * @param {string} portfolioId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertyActivityViewPortfolio(portfolioId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyActivityViewPortfolio200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertyActivityViewPortfolio(portfolioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PropertyActivityApi - factory interface
 * @export
 */
export const PropertyActivityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PropertyActivityApiFp(configuration)
    return {
        /**
         * Adds properties to a portfolio by property id\'s and/or gnaf id\'s
         * @summary Add Properties to Portfolio
         * @param {string} portfolioId 
         * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityAddToPortfolio(portfolioId: string, propertyActivityAPIV1PortfolioDetails: PropertyActivityAPIV1PortfolioDetails | null, options?: any): AxiosPromise<void> {
            return localVarFp.propertyActivityAddToPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a portfolio and returns portfolio id
         * @summary Create Portfolio
         * @param {PropertyActivityCreatePortfolioRequest} propertyActivityCreatePortfolioRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityCreatePortfolio(propertyActivityCreatePortfolioRequest: PropertyActivityCreatePortfolioRequest, options?: any): AxiosPromise<PropertyActivityAPIV1PortfolioCreated> {
            return localVarFp.propertyActivityCreatePortfolio(propertyActivityCreatePortfolioRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a portfolio and all associated properties
         * @summary Delete Portfolio
         * @param {string} portfolioId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityDeletePortfolio(portfolioId: string, options?: any): AxiosPromise<void> {
            return localVarFp.propertyActivityDeletePortfolio(portfolioId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all portfolios for the customer with a count of associated property and gnaf id\'s
         * @summary List Portfolios
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityListPortfolios(options?: any): AxiosPromise<PropertyActivityAPIV1PortfolioList> {
            return localVarFp.propertyActivityListPortfolios(options).then((request) => request(axios, basePath));
        },
        /**
         * Removes properties from a portfolio by property id\'s and/or gnaf id\'s, returning any id\'s that did not exist within the portfolio
         * @summary Remove Properties from Portfolio
         * @param {string} portfolioId 
         * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityRemoveFromPortfolio(portfolioId: string, propertyActivityAPIV1PortfolioDetails: PropertyActivityAPIV1PortfolioDetails | null, options?: any): AxiosPromise<PropertyActivityRemoveFromPortfolio200Response> {
            return localVarFp.propertyActivityRemoveFromPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * List property and gnaf id\'s for an existing portfolio
         * @summary View Properties in Portfolio
         * @param {string} portfolioId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityViewPortfolio(portfolioId: string, options?: any): AxiosPromise<PropertyActivityViewPortfolio200Response> {
            return localVarFp.propertyActivityViewPortfolio(portfolioId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PropertyActivityApi - object-oriented interface
 * @export
 * @class PropertyActivityApi
 * @extends {BaseAPI}
 */
export class PropertyActivityApi extends BaseAPI {
    /**
     * Adds properties to a portfolio by property id\'s and/or gnaf id\'s
     * @summary Add Properties to Portfolio
     * @param {string} portfolioId 
     * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyActivityApi
     */
    public propertyActivityAddToPortfolio(portfolioId: string, propertyActivityAPIV1PortfolioDetails: PropertyActivityAPIV1PortfolioDetails | null, options?: AxiosRequestConfig) {
        return PropertyActivityApiFp(this.configuration).propertyActivityAddToPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a portfolio and returns portfolio id
     * @summary Create Portfolio
     * @param {PropertyActivityCreatePortfolioRequest} propertyActivityCreatePortfolioRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyActivityApi
     */
    public propertyActivityCreatePortfolio(propertyActivityCreatePortfolioRequest: PropertyActivityCreatePortfolioRequest, options?: AxiosRequestConfig) {
        return PropertyActivityApiFp(this.configuration).propertyActivityCreatePortfolio(propertyActivityCreatePortfolioRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a portfolio and all associated properties
     * @summary Delete Portfolio
     * @param {string} portfolioId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyActivityApi
     */
    public propertyActivityDeletePortfolio(portfolioId: string, options?: AxiosRequestConfig) {
        return PropertyActivityApiFp(this.configuration).propertyActivityDeletePortfolio(portfolioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all portfolios for the customer with a count of associated property and gnaf id\'s
     * @summary List Portfolios
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyActivityApi
     */
    public propertyActivityListPortfolios(options?: AxiosRequestConfig) {
        return PropertyActivityApiFp(this.configuration).propertyActivityListPortfolios(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes properties from a portfolio by property id\'s and/or gnaf id\'s, returning any id\'s that did not exist within the portfolio
     * @summary Remove Properties from Portfolio
     * @param {string} portfolioId 
     * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyActivityApi
     */
    public propertyActivityRemoveFromPortfolio(portfolioId: string, propertyActivityAPIV1PortfolioDetails: PropertyActivityAPIV1PortfolioDetails | null, options?: AxiosRequestConfig) {
        return PropertyActivityApiFp(this.configuration).propertyActivityRemoveFromPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List property and gnaf id\'s for an existing portfolio
     * @summary View Properties in Portfolio
     * @param {string} portfolioId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyActivityApi
     */
    public propertyActivityViewPortfolio(portfolioId: string, options?: AxiosRequestConfig) {
        return PropertyActivityApiFp(this.configuration).propertyActivityViewPortfolio(portfolioId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SalesResultsApi - axios parameter creator
 * @export
 */
export const SalesResultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves sales results for a given city
         * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsGet: async (city: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'city' is not null or undefined
            assertParamExists('salesResultsGet', 'city', city)
            const localVarPath = `/v1/salesResults/{city}`
                .replace(`{${"city"}}`, encodeURIComponent(String(city)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_salesresults_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_salesresults_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves metadata regarding sales result data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsHead: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/salesResults/_head`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_salesresults_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_salesresults_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves listing summaries corresponding to the sales results
         * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsListings: async (city: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'city' is not null or undefined
            assertParamExists('salesResultsListings', 'city', city)
            const localVarPath = `/v1/salesResults/{city}/listings`
                .replace(`{${"city"}}`, encodeURIComponent(String(city)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_salesresults_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_salesresults_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesResultsApi - functional programming interface
 * @export
 */
export const SalesResultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesResultsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves sales results for a given city
         * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesResultsGet(city: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesResultsV1CityResultsSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesResultsGet(city, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves metadata regarding sales result data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesResultsHead(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesResultsV1CityResultsDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesResultsHead(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves listing summaries corresponding to the sales results
         * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesResultsListings(city: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SalesResultsV1SaleListing>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesResultsListings(city, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SalesResultsApi - factory interface
 * @export
 */
export const SalesResultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesResultsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves sales results for a given city
         * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsGet(city: string, options?: any): AxiosPromise<SalesResultsV1CityResultsSummary> {
            return localVarFp.salesResultsGet(city, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves metadata regarding sales result data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsHead(options?: any): AxiosPromise<SalesResultsV1CityResultsDate> {
            return localVarFp.salesResultsHead(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves listing summaries corresponding to the sales results
         * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsListings(city: string, options?: any): AxiosPromise<Array<SalesResultsV1SaleListing>> {
            return localVarFp.salesResultsListings(city, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalesResultsApi - object-oriented interface
 * @export
 * @class SalesResultsApi
 * @extends {BaseAPI}
 */
export class SalesResultsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves sales results for a given city
     * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesResultsApi
     */
    public salesResultsGet(city: string, options?: AxiosRequestConfig) {
        return SalesResultsApiFp(this.configuration).salesResultsGet(city, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves metadata regarding sales result data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesResultsApi
     */
    public salesResultsHead(options?: AxiosRequestConfig) {
        return SalesResultsApiFp(this.configuration).salesResultsHead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves listing summaries corresponding to the sales results
     * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesResultsApi
     */
    public salesResultsListings(city: string, options?: AxiosRequestConfig) {
        return SalesResultsApiFp(this.configuration).salesResultsListings(city, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SchoolsApi - axios parameter creator
 * @export
 */
export const SchoolsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Domain School Ids can be obtained from the search by location endpoint.
         * @summary Retrieve the details of a school by Id
         * @param {number} id School id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolsGetById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('schoolsGetById', 'id', id)
            const localVarPath = `/v2/schools/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_locations_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_locations_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search for a school in a location
         * @param {number} latitude Latitude to search
         * @param {number} longitude Longitude to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolsSearchByLocation: async (latitude: number, longitude: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('schoolsSearchByLocation', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('schoolsSearchByLocation', 'longitude', longitude)
            const localVarPath = `/v2/schools/{latitude}/{longitude}`
                .replace(`{${"latitude"}}`, encodeURIComponent(String(latitude)))
                .replace(`{${"longitude"}}`, encodeURIComponent(String(longitude)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_locations_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_locations_read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolsApi - functional programming interface
 * @export
 */
export const SchoolsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchoolsApiAxiosParamCreator(configuration)
    return {
        /**
         * Domain School Ids can be obtained from the search by location endpoint.
         * @summary Retrieve the details of a school by Id
         * @param {number} id School id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolsGetById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolsV2School>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolsGetById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search for a school in a location
         * @param {number} latitude Latitude to search
         * @param {number} longitude Longitude to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolsSearchByLocation(latitude: number, longitude: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SchoolsV2SchoolWithDistance>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolsSearchByLocation(latitude, longitude, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchoolsApi - factory interface
 * @export
 */
export const SchoolsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchoolsApiFp(configuration)
    return {
        /**
         * Domain School Ids can be obtained from the search by location endpoint.
         * @summary Retrieve the details of a school by Id
         * @param {number} id School id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolsGetById(id: number, options?: any): AxiosPromise<SchoolsV2School> {
            return localVarFp.schoolsGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search for a school in a location
         * @param {number} latitude Latitude to search
         * @param {number} longitude Longitude to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolsSearchByLocation(latitude: number, longitude: number, options?: any): AxiosPromise<Array<SchoolsV2SchoolWithDistance>> {
            return localVarFp.schoolsSearchByLocation(latitude, longitude, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchoolsApi - object-oriented interface
 * @export
 * @class SchoolsApi
 * @extends {BaseAPI}
 */
export class SchoolsApi extends BaseAPI {
    /**
     * Domain School Ids can be obtained from the search by location endpoint.
     * @summary Retrieve the details of a school by Id
     * @param {number} id School id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApi
     */
    public schoolsGetById(id: number, options?: AxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).schoolsGetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search for a school in a location
     * @param {number} latitude Latitude to search
     * @param {number} longitude Longitude to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApi
     */
    public schoolsSearchByLocation(latitude: number, longitude: number, options?: AxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).schoolsSearchByLocation(latitude, longitude, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StatisticsApi - axios parameter creator
 * @export
 */
export const StatisticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Record a statistic event along with its associated metadata (if applicable)
         * @param {StatisticsPostEventEnum} event The event type
         * @param {object} body A JSON object dictionary of the metadata associated with the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsPost: async (event: StatisticsPostEventEnum, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'event' is not null or undefined
            assertParamExists('statisticsPost', 'event', event)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('statisticsPost', 'body', body)
            const localVarPath = `/v1/statistics/{event}`
                .replace(`{${"event"}}`, encodeURIComponent(String(event)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_statistics_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_statistics_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
         * @summary Search for sales statistics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
         * @param {SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {number} [bedrooms] Number of bedrooms to use in the sales search
         * @param {SuburbPerformanceGetByNamedSuburbPeriodSizeEnum} [periodSize] Unit of the measurement period to use
         * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
         * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suburbPerformanceGetByNamedSuburb: async (state: string, suburb: string, postcode: string, propertyCategory?: SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum, bedrooms?: number, periodSize?: SuburbPerformanceGetByNamedSuburbPeriodSizeEnum, startingPeriodRelativeToCurrent?: number, totalPeriods?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('suburbPerformanceGetByNamedSuburb', 'state', state)
            // verify required parameter 'suburb' is not null or undefined
            assertParamExists('suburbPerformanceGetByNamedSuburb', 'suburb', suburb)
            // verify required parameter 'postcode' is not null or undefined
            assertParamExists('suburbPerformanceGetByNamedSuburb', 'postcode', postcode)
            const localVarPath = `/v2/suburbPerformanceStatistics/{state}/{suburb}/{postcode}`
                .replace(`{${"state"}}`, encodeURIComponent(String(state)))
                .replace(`{${"suburb"}}`, encodeURIComponent(String(suburb)))
                .replace(`{${"postcode"}}`, encodeURIComponent(String(postcode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_suburbperformance_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_suburbperformance_read"], configuration)

            if (propertyCategory !== undefined) {
                localVarQueryParameter['propertyCategory'] = propertyCategory;
            }

            if (bedrooms !== undefined) {
                localVarQueryParameter['bedrooms'] = bedrooms;
            }

            if (periodSize !== undefined) {
                localVarQueryParameter['periodSize'] = periodSize;
            }

            if (startingPeriodRelativeToCurrent !== undefined) {
                localVarQueryParameter['startingPeriodRelativeToCurrent'] = startingPeriodRelativeToCurrent;
            }

            if (totalPeriods !== undefined) {
                localVarQueryParameter['totalPeriods'] = totalPeriods;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
         * @summary Search for sales statistics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {number} [bedrooms] Number of bedrooms to use in the sales search
         * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum} [periodSize] Unit of the measurement period to use
         * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
         * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suburbPerformanceGetByNamedSuburbWithoutPostcode: async (state: string, suburb: string, propertyCategory?: SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum, bedrooms?: number, periodSize?: SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum, startingPeriodRelativeToCurrent?: number, totalPeriods?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('suburbPerformanceGetByNamedSuburbWithoutPostcode', 'state', state)
            // verify required parameter 'suburb' is not null or undefined
            assertParamExists('suburbPerformanceGetByNamedSuburbWithoutPostcode', 'suburb', suburb)
            const localVarPath = `/v2/suburbPerformanceStatistics/{state}/{suburb}`
                .replace(`{${"state"}}`, encodeURIComponent(String(state)))
                .replace(`{${"suburb"}}`, encodeURIComponent(String(suburb)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_suburbperformance_read"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_suburbperformance_read"], configuration)

            if (propertyCategory !== undefined) {
                localVarQueryParameter['propertyCategory'] = propertyCategory;
            }

            if (bedrooms !== undefined) {
                localVarQueryParameter['bedrooms'] = bedrooms;
            }

            if (periodSize !== undefined) {
                localVarQueryParameter['periodSize'] = periodSize;
            }

            if (startingPeriodRelativeToCurrent !== undefined) {
                localVarQueryParameter['startingPeriodRelativeToCurrent'] = startingPeriodRelativeToCurrent;
            }

            if (totalPeriods !== undefined) {
                localVarQueryParameter['totalPeriods'] = totalPeriods;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatisticsApi - functional programming interface
 * @export
 */
export const StatisticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatisticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Record a statistic event along with its associated metadata (if applicable)
         * @param {StatisticsPostEventEnum} event The event type
         * @param {object} body A JSON object dictionary of the metadata associated with the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsPost(event: StatisticsPostEventEnum, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsPost(event, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
         * @summary Search for sales statistics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
         * @param {SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {number} [bedrooms] Number of bedrooms to use in the sales search
         * @param {SuburbPerformanceGetByNamedSuburbPeriodSizeEnum} [periodSize] Unit of the measurement period to use
         * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
         * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suburbPerformanceGetByNamedSuburb(state: string, suburb: string, postcode: string, propertyCategory?: SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum, bedrooms?: number, periodSize?: SuburbPerformanceGetByNamedSuburbPeriodSizeEnum, startingPeriodRelativeToCurrent?: number, totalPeriods?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuburbPerformanceStatisticsV3SuburbPerformance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suburbPerformanceGetByNamedSuburb(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
         * @summary Search for sales statistics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {number} [bedrooms] Number of bedrooms to use in the sales search
         * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum} [periodSize] Unit of the measurement period to use
         * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
         * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suburbPerformanceGetByNamedSuburbWithoutPostcode(state: string, suburb: string, propertyCategory?: SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum, bedrooms?: number, periodSize?: SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum, startingPeriodRelativeToCurrent?: number, totalPeriods?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuburbPerformanceStatisticsV3SuburbPerformance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suburbPerformanceGetByNamedSuburbWithoutPostcode(state, suburb, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatisticsApi - factory interface
 * @export
 */
export const StatisticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatisticsApiFp(configuration)
    return {
        /**
         * 
         * @summary Record a statistic event along with its associated metadata (if applicable)
         * @param {StatisticsPostEventEnum} event The event type
         * @param {object} body A JSON object dictionary of the metadata associated with the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsPost(event: StatisticsPostEventEnum, body: object, options?: any): AxiosPromise<void> {
            return localVarFp.statisticsPost(event, body, options).then((request) => request(axios, basePath));
        },
        /**
         * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
         * @summary Search for sales statistics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
         * @param {SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {number} [bedrooms] Number of bedrooms to use in the sales search
         * @param {SuburbPerformanceGetByNamedSuburbPeriodSizeEnum} [periodSize] Unit of the measurement period to use
         * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
         * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suburbPerformanceGetByNamedSuburb(state: string, suburb: string, postcode: string, propertyCategory?: SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum, bedrooms?: number, periodSize?: SuburbPerformanceGetByNamedSuburbPeriodSizeEnum, startingPeriodRelativeToCurrent?: number, totalPeriods?: number, options?: any): AxiosPromise<SuburbPerformanceStatisticsV3SuburbPerformance> {
            return localVarFp.suburbPerformanceGetByNamedSuburb(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options).then((request) => request(axios, basePath));
        },
        /**
         * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
         * @summary Search for sales statistics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {number} [bedrooms] Number of bedrooms to use in the sales search
         * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum} [periodSize] Unit of the measurement period to use
         * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
         * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suburbPerformanceGetByNamedSuburbWithoutPostcode(state: string, suburb: string, propertyCategory?: SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum, bedrooms?: number, periodSize?: SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum, startingPeriodRelativeToCurrent?: number, totalPeriods?: number, options?: any): AxiosPromise<SuburbPerformanceStatisticsV3SuburbPerformance> {
            return localVarFp.suburbPerformanceGetByNamedSuburbWithoutPostcode(state, suburb, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatisticsApi - object-oriented interface
 * @export
 * @class StatisticsApi
 * @extends {BaseAPI}
 */
export class StatisticsApi extends BaseAPI {
    /**
     * 
     * @summary Record a statistic event along with its associated metadata (if applicable)
     * @param {StatisticsPostEventEnum} event The event type
     * @param {object} body A JSON object dictionary of the metadata associated with the event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsPost(event: StatisticsPostEventEnum, body: object, options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsPost(event, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
     * @summary Search for sales statistics in a given geographic level.
     * @param {string} state The Australian state abbreviation
     * @param {string} suburb Suburb name to retrieve data for
     * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
     * @param {SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
     * @param {number} [bedrooms] Number of bedrooms to use in the sales search
     * @param {SuburbPerformanceGetByNamedSuburbPeriodSizeEnum} [periodSize] Unit of the measurement period to use
     * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
     * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public suburbPerformanceGetByNamedSuburb(state: string, suburb: string, postcode: string, propertyCategory?: SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum, bedrooms?: number, periodSize?: SuburbPerformanceGetByNamedSuburbPeriodSizeEnum, startingPeriodRelativeToCurrent?: number, totalPeriods?: number, options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).suburbPerformanceGetByNamedSuburb(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
     * @summary Search for sales statistics in a given geographic level.
     * @param {string} state The Australian state abbreviation
     * @param {string} suburb Suburb name to retrieve data for
     * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
     * @param {number} [bedrooms] Number of bedrooms to use in the sales search
     * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum} [periodSize] Unit of the measurement period to use
     * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
     * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public suburbPerformanceGetByNamedSuburbWithoutPostcode(state: string, suburb: string, propertyCategory?: SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum, bedrooms?: number, periodSize?: SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum, startingPeriodRelativeToCurrent?: number, totalPeriods?: number, options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).suburbPerformanceGetByNamedSuburbWithoutPostcode(state, suburb, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const StatisticsPostEventEnum = {
    ListingViewed: 'listingViewed',
    ListingImageGalleryViewed: 'listingImageGalleryViewed',
    ListingImageViewed: 'listingImageViewed',
    ListingMapViewed: 'listingMapViewed',
    ListingVideoViewed: 'listingVideoViewed',
    ListingFloorPlanViewed: 'listingFloorPlanViewed',
    ListingAddedToShortlist: 'listingAddedToShortlist',
    ListingAgentCalled: 'listingAgentCalled',
    ListingAgentPhoneRevealed: 'listingAgentPhoneRevealed',
    ListingNotesAdded: 'listingNotesAdded',
    ListingEmailedToAFriend: 'listingEmailedToAFriend',
    ListingEnquirySent: 'listingEnquirySent',
    LoanEventRaised: 'loanEventRaised'
} as const;
export type StatisticsPostEventEnum = typeof StatisticsPostEventEnum[keyof typeof StatisticsPostEventEnum];
/**
 * @export
 */
export const SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum = {
    House: 'house',
    Unit: 'unit'
} as const;
export type SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum = typeof SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum[keyof typeof SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum];
/**
 * @export
 */
export const SuburbPerformanceGetByNamedSuburbPeriodSizeEnum = {
    Quarters: 'quarters',
    HalfYears: 'halfYears',
    Years: 'years'
} as const;
export type SuburbPerformanceGetByNamedSuburbPeriodSizeEnum = typeof SuburbPerformanceGetByNamedSuburbPeriodSizeEnum[keyof typeof SuburbPerformanceGetByNamedSuburbPeriodSizeEnum];
/**
 * @export
 */
export const SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum = {
    House: 'house',
    Unit: 'unit'
} as const;
export type SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum = typeof SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum[keyof typeof SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum];
/**
 * @export
 */
export const SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum = {
    Quarters: 'quarters',
    HalfYears: 'halfYears',
    Years: 'years'
} as const;
export type SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum = typeof SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum[keyof typeof SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum];


/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a subscription to notifications
         * @param {string} id Subscriber (Webhook) Id
         * @param {WebhooksV1AddSubscriptionRequest} [webhooksV1AddSubscriptionRequest] New Subscription Details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksCreateSubscription: async (id: string, webhooksV1AddSubscriptionRequest?: WebhooksV1AddSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksCreateSubscription', 'id', id)
            const localVarPath = `/v1/webhooks/{id}/subscriptions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksV1AddSubscriptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a single subscription
         * @param {string} id Subscription identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksDeleteSubscription: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksDeleteSubscription', 'id', id)
            const localVarPath = `/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the details of a single subscription
         * @param {string} id Subscription identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksGetSubscription: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksGetSubscription', 'id', id)
            const localVarPath = `/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all subscriptions to the specified webhook
         * @param {string} id Subscriber (Webhook) ID
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksListSubscriptions: async (id: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksListSubscriptions', 'id', id)
            const localVarPath = `/v1/webhooks/{id}/subscriptions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a subscription to notifications
         * @param {string} id Subscriber (Webhook) Id
         * @param {WebhooksV1AddSubscriptionRequest} [webhooksV1AddSubscriptionRequest] New Subscription Details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksCreateSubscription(id: string, webhooksV1AddSubscriptionRequest?: WebhooksV1AddSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksV1WebhookSubscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksCreateSubscription(id, webhooksV1AddSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a single subscription
         * @param {string} id Subscription identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksDeleteSubscription(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksDeleteSubscription(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve the details of a single subscription
         * @param {string} id Subscription identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksGetSubscription(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksV1WebhookSubscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksGetSubscription(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all subscriptions to the specified webhook
         * @param {string} id Subscriber (Webhook) ID
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksListSubscriptions(id: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WebhooksV1WebhookSubscription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksListSubscriptions(id, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a subscription to notifications
         * @param {string} id Subscriber (Webhook) Id
         * @param {WebhooksV1AddSubscriptionRequest} [webhooksV1AddSubscriptionRequest] New Subscription Details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksCreateSubscription(id: string, webhooksV1AddSubscriptionRequest?: WebhooksV1AddSubscriptionRequest, options?: any): AxiosPromise<WebhooksV1WebhookSubscription> {
            return localVarFp.webhooksCreateSubscription(id, webhooksV1AddSubscriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a single subscription
         * @param {string} id Subscription identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksDeleteSubscription(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.webhooksDeleteSubscription(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the details of a single subscription
         * @param {string} id Subscription identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksGetSubscription(id: string, options?: any): AxiosPromise<WebhooksV1WebhookSubscription> {
            return localVarFp.webhooksGetSubscription(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all subscriptions to the specified webhook
         * @param {string} id Subscriber (Webhook) ID
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksListSubscriptions(id: string, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<Array<WebhooksV1WebhookSubscription>> {
            return localVarFp.webhooksListSubscriptions(id, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * 
     * @summary Create a subscription to notifications
     * @param {string} id Subscriber (Webhook) Id
     * @param {WebhooksV1AddSubscriptionRequest} [webhooksV1AddSubscriptionRequest] New Subscription Details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksCreateSubscription(id: string, webhooksV1AddSubscriptionRequest?: WebhooksV1AddSubscriptionRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksCreateSubscription(id, webhooksV1AddSubscriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a single subscription
     * @param {string} id Subscription identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksDeleteSubscription(id: string, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksDeleteSubscription(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the details of a single subscription
     * @param {string} id Subscription identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksGetSubscription(id: string, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksGetSubscription(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all subscriptions to the specified webhook
     * @param {string} id Subscriber (Webhook) ID
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksListSubscriptions(id: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksListSubscriptions(id, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



