"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Domain Public API
 * See https://developer.domain.com.au for more information
 *
 * The version of the OpenAPI document: latest
 * Contact: api@domain.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryEnquiryTypeEnum = exports.DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryDeliveryMethodEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSourceEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSoldActionEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetailsSaleMethodEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsSourceEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsRentalMethodEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceUnitEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceTypeEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsGstOptionEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsHiddenReasonsEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceDataPriceTypeEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaTypeEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaCategoryEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspectionRecurrenceEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiersAdvertiserTypeEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsDisplayTypeEnum = exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsStateAbbreviationEnum = exports.DomainListingAdminServiceV1ModelSupplementaryMetadataMeasurementUnitEnum = exports.DomainListingAdminServiceV1ModelResidentialPropertyPropertyTypeEnum = exports.DomainListingAdminServiceV1ModelResidentialListingContactPreferenceEnum = exports.DomainListingAdminServiceV1ModelResidentialListingListingActionEnum = exports.DomainListingAdminServiceV1ModelResidentialListingLifeStyleTypeEnum = exports.DomainListingAdminServiceV1ModelPropertyPdfTypeEnum = exports.DomainListingAdminServiceV1ModelPropertyMediaResourceTypeEnum = exports.DomainListingAdminServiceV1ModelPastSaleAddressStateEnum = exports.DomainListingAdminServiceV1ModelParkingDetailsParkingTypeEnum = exports.DomainListingAdminServiceV1ModelParkingParkingTypeEnum = exports.DomainListingAdminServiceV1ModelModelEventIssueTypeEnum = exports.DomainListingAdminServiceV1ModelModelEventSeverityEnum = exports.DomainListingAdminServiceV1ModelMedianPriceDataPriceTypeEnum = exports.DomainListingAdminServiceV1ModelListingResponseProcessStatusEnum = exports.DomainListingAdminServiceV1ModelListingReportProcessStatusEnum = exports.DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdPriceUnitEnum = exports.DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdRentPeriodEnum = exports.DomainListingAdminServiceV1ModelLandAreaUnitEnum = exports.DomainListingAdminServiceV1ModelBusinessPropertyPropertyTypeEnum = exports.DomainListingAdminServiceV1ModelBusinessListingContactPreferenceEnum = exports.DomainListingAdminServiceV1ModelBusinessListingListingActionEnum = exports.DomainListingAdminServiceV1ModelAreaUnitEnum = exports.DomainListingAdminServiceV1ModelAddressStateEnum = exports.DomainListingAdminServiceV1ModelAddressDisplayOptionEnum = exports.DomainAvmPIV1ConfidenceEnum = exports.BookingsV2RateForNewListingRequestChannelEnum = exports.BookingsV2RateForNewListingRequestListingTypeEnum = exports.BookingsV2RateForNewListingRequestPropertyTypeEnum = exports.AgenciesV2AgencyAccountTypeEnum = exports.AddressLocatorsV1ApmIdModelLevelEnum = exports.AddressLocatorsV1AddressDataModelTypesEnum = exports.AddressLocatorsV1AddressComponentsComponentEnum = void 0;
exports.ListingAdminV2BusinessOffMarketListingListingActionEnum = exports.ListingAdminV2AreaUnitEnum = exports.ListingAdminV2AddressStateEnum = exports.ListingAdminV2AddressDisplayOptionEnum = exports.EnquiriesV1RecipientDeliveryStatusDeliveryStatusEnum = exports.EnquiriesV1RecipientRecipientTypeEnum = exports.EnquiriesV1EnquiryReportEnquiryTypeEnum = exports.EnquiriesV1EnquiryReportDeliveryMethodEnum = exports.DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortByDirectionEnum = exports.DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBySortKeyEnum = exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQueryCriteriaEnum = exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyEstablishedTypeEnum = exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingAttributesEnum = exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyFeaturesEnum = exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyTypesEnum = exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingTypeEnum = exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocationStateEnum = exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementDirectionEnum = exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementFieldEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSaleMethodEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSourceEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2SearchResultTypeEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingListingTypeEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingPromoLevelEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsAllPropertyTypesEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsPropertyTypeEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsFeaturesEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsStateEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2ProjectStateEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2ProjectPromoLevelEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2MediaCategoryEnum = exports.DomainSearchServiceV2ModelDomainSearchContractsV2AdvertiserTypeEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsListingChannelEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsListingSaleModeEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsListingStatusEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsListingPropertyTypesEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsListingObjectiveEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestExclusionTypesEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTitleEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSaleTypeEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSortEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSearchModeEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTypesEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearchTypeEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearchTypeEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearchStateEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSearchModeEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSortEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestPropertyTypesEnum = exports.DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearchStateEnum = void 0;
exports.ListingsV2InspectionRecurrenceEnum = exports.ListingsV2AdvertiserIdentifiersAdvertiserTypeEnum = exports.ListingsV2AddressPartsDisplayTypeEnum = exports.ListingsV2AddressPartsStateAbbreviationEnum = exports.ListingsV1SoldDetailsSourceEnum = exports.ListingsV1SoldDetailsSoldActionEnum = exports.ListingsV1SaleDetailsSaleMethodEnum = exports.ListingsV1RentalDetailsSourceEnum = exports.ListingsV1RentalDetailsRentalMethodEnum = exports.ListingsV1PriceDetailsHiddenReasonsEnum = exports.ListingsV1PriceDetailsPriceUnitEnum = exports.ListingsV1PriceDetailsPriceTypeEnum = exports.ListingsV1PriceDetailsGstOptionEnum = exports.ListingsV1MedianPriceDataPriceTypeEnum = exports.ListingsV1ListingMediaTypeEnum = exports.ListingsV1ListingMediaCategoryEnum = exports.ListingsV1ListingPropertyTypesEnum = exports.ListingsV1ListingChannelEnum = exports.ListingsV1ListingSaleModeEnum = exports.ListingsV1ListingStatusEnum = exports.ListingsV1ListingObjectiveEnum = exports.ListingsV1InspectionRecurrenceEnum = exports.ListingsV1AdvertiserIdentifiersAdvertiserTypeEnum = exports.ListingsV1AddressPartsDisplayTypeEnum = exports.ListingsV1AddressPartsStateAbbreviationEnum = exports.ListingAdminV2SupplementaryMetadataMeasurementUnitEnum = exports.ListingAdminV2SpecificUnitDetailPriceUnitEnum = exports.ListingAdminV2SpecificUnitDetailOccupancyEnum = exports.ListingAdminV2SoldDetailsSoldTypeEnum = exports.ListingAdminV2ResidentialOffMarketPropertyPropertyTypeEnum = exports.ListingAdminV2ResidentialOffMarketListingListingActionEnum = exports.ListingAdminV2PropertyPdfTypeEnum = exports.ListingAdminV2PropertyMediaResourceTypeEnum = exports.ListingAdminV2ParkingDetailsParkingTypeEnum = exports.ListingAdminV2ParkingParkingTypeEnum = exports.ListingAdminV2OffMarketDetailsBaseOffMarketActionEnum = exports.ListingAdminV2ListingResponseProcessStatusEnum = exports.ListingAdminV2LandAreaUnitEnum = exports.ListingAdminV2CommercialPropertyBuildingTypeEnum = exports.ListingAdminV2CommercialPropertyPropertyTypeEnum = exports.ListingAdminV2CommercialPriceGstOptionTypeEnum = exports.ListingAdminV2CommercialPricePriceTypeEnum = exports.ListingAdminV2CommercialPricePriceUnitTypeEnum = exports.ListingAdminV2CommercialOffMarketPropertyBuildingTypeEnum = exports.ListingAdminV2CommercialOffMarketPropertyPropertyTypeEnum = exports.ListingAdminV2CommercialOffMarketListingListingActionEnum = exports.ListingAdminV2CommercialListingV2ContactPreferenceEnum = exports.ListingAdminV2CommercialListingV2ListingActionEnum = exports.ListingAdminV2CommercialListingV2OccupancyTypeEnum = exports.ListingAdminV2BusinessOffMarketPropertyPropertyTypeEnum = void 0;
exports.AVMApiAxiosParamCreator = exports.SocialBoostV1RateForNewSocialBoostRequestModelChannelEnum = exports.SocialBoostV1RateForNewSocialBoostRequestModelListingTypeEnum = exports.SocialBoostV1RateForNewSocialBoostRequestModelPropertyTypeEnum = exports.SocialBoostV1RateForNewSocialBoostReasonEnum = exports.SocialBoostV1ListingRateInfoProductListingRuleEnum = exports.SocialBoostV1ListingRateInfoProductListingLevelEnum = exports.SchoolsV2SchoolCatchmentTypeEnum = exports.SchoolsV2SchoolGenderEnum = exports.SchoolsV2SchoolSchoolTypeEnum = exports.SchoolsV2SchoolSchoolSectorEnum = exports.PropertyEnrichmentV1PropertyActivitySummaryOwnerRenterEnum = exports.PropertiesV1PropertyStatusEnum = exports.PropertiesV1PropertyOnMarketTypesEnum = exports.PropertiesV1PropertyCadastreTypeEnum = exports.PropertiesV1PhotoImageTypeEnum = exports.PropertiesV1ClaimDataClaimantEnum = exports.PropertiesV1AdvertOnMarketTypesEnum = exports.PreMarketV1State = exports.PreMarketV1ResourceType = exports.PreMarketV1PropertyType = exports.PreMarketV1PrePortalListingStatus = exports.PreMarketV1OperationType = exports.PreMarketV1AuthorityType = exports.ListingsV2SoldDetailsSourceEnum = exports.ListingsV2SoldDetailsSoldActionEnum = exports.ListingsV2SaleDetailsSaleMethodEnum = exports.ListingsV2RentalDetailsSourceEnum = exports.ListingsV2RentalDetailsRentalMethodEnum = exports.ListingsV2ProjectMediaTypeEnum = exports.ListingsV2ProjectMediaCategoryEnum = exports.ListingsV2ProjectAddressPartsDisplayTypeEnum = exports.ListingsV2ProjectAddressPartsStateAbbreviationEnum = exports.ListingsV2ProjectPropertyTypesEnum = exports.ListingsV2ProjectCategoryEnum = exports.ListingsV2ProjectEstimatedCompletionTertileEnum = exports.ListingsV2ProjectProjectProfileTypeEnum = exports.ListingsV2PriceDetailsHiddenReasonsEnum = exports.ListingsV2PriceDetailsPriceUnitEnum = exports.ListingsV2PriceDetailsPriceTypeEnum = exports.ListingsV2PriceDetailsGstOptionEnum = exports.ListingsV2PdfUploadTypeEnum = exports.ListingsV2MedianPriceDataPriceTypeEnum = exports.ListingsV2ListingMediaTypeEnum = exports.ListingsV2ListingMediaCategoryEnum = exports.ListingsV2ListingPropertyTypesEnum = exports.ListingsV2ListingChannelEnum = exports.ListingsV2ListingSaleModeEnum = exports.ListingsV2ListingStatusEnum = exports.ListingsV2ListingObjectiveEnum = void 0;
exports.LocationsApiFp = exports.LocationsApiAxiosParamCreator = exports.ListingsGetListingStatisticsChannelEnum = exports.ListingsGetListingStatisticsTimePeriodEnum = exports.ListingsApi = exports.ListingsApiFactory = exports.ListingsApiFp = exports.ListingsApiAxiosParamCreator = exports.LeadscopeApi = exports.LeadscopeApiFactory = exports.LeadscopeApiFp = exports.LeadscopeApiAxiosParamCreator = exports.EnquiriesApi = exports.EnquiriesApiFactory = exports.EnquiriesApiFp = exports.EnquiriesApiAxiosParamCreator = exports.DisclaimersApi = exports.DisclaimersApiFactory = exports.DisclaimersApiFp = exports.DisclaimersApiAxiosParamCreator = exports.DemographicsApi = exports.DemographicsApiFactory = exports.DemographicsApiFp = exports.DemographicsApiAxiosParamCreator = exports.AuthoritiesApi = exports.AuthoritiesApiFactory = exports.AuthoritiesApiFp = exports.AuthoritiesApiAxiosParamCreator = exports.AgentsGetStatisticsChannelEnum = exports.AgentsGetStatisticsStatusFilterEnum = exports.AgentsGetStatisticsTimePeriodEnum = exports.AgentsApi = exports.AgentsApiFactory = exports.AgentsApiFp = exports.AgentsApiAxiosParamCreator = exports.AgenciesGetStatisticsChannelEnum = exports.AgenciesGetStatisticsStatusFilterEnum = exports.AgenciesGetStatisticsTimePeriodEnum = exports.AgenciesGetListingsListingStatusFilterEnum = exports.AgenciesApi = exports.AgenciesApiFactory = exports.AgenciesApiFp = exports.AgenciesApiAxiosParamCreator = exports.AddressLocatorsApi = exports.AddressLocatorsApiFactory = exports.AddressLocatorsApiFp = exports.AddressLocatorsApiAxiosParamCreator = exports.AVMApi = exports.AVMApiFactory = exports.AVMApiFp = void 0;
exports.WebhooksApiAxiosParamCreator = exports.SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum = exports.SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum = exports.SuburbPerformanceGetByNamedSuburbPeriodSizeEnum = exports.SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum = exports.StatisticsPostEventEnum = exports.StatisticsApi = exports.StatisticsApiFactory = exports.StatisticsApiFp = exports.StatisticsApiAxiosParamCreator = exports.SchoolsApi = exports.SchoolsApiFactory = exports.SchoolsApiFp = exports.SchoolsApiAxiosParamCreator = exports.SalesResultsApi = exports.SalesResultsApiFactory = exports.SalesResultsApiFp = exports.SalesResultsApiAxiosParamCreator = exports.PropertyActivityApi = exports.PropertyActivityApiFactory = exports.PropertyActivityApiFp = exports.PropertyActivityApiAxiosParamCreator = exports.PropertyenrichmentGetStateEnum = exports.PropertiesSuggestChannelEnum = exports.ListingsBypropertyidSaleModeEnum = exports.PropertiesApi = exports.PropertiesApiFactory = exports.PropertiesApiFp = exports.PropertiesApiAxiosParamCreator = exports.ProjectsSearchProjectStatusEnum = exports.ProjectsGetStatisticsTimePeriodEnum = exports.ProjectsGetChildListingsStatisticsTimePeriodEnum = exports.ProjectsApi = exports.ProjectsApiFactory = exports.ProjectsApiFp = exports.ProjectsApiAxiosParamCreator = exports.ProductsApi = exports.ProductsApiFactory = exports.ProductsApiFp = exports.ProductsApiAxiosParamCreator = exports.PreMarketApi = exports.PreMarketApiFactory = exports.PreMarketApiFp = exports.PreMarketApiAxiosParamCreator = exports.MeApi = exports.MeApiFactory = exports.MeApiFp = exports.MeApiAxiosParamCreator = exports.LocationsApi = exports.LocationsApiFactory = void 0;
exports.WebhooksApi = exports.WebhooksApiFactory = exports.WebhooksApiFp = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.AddressLocatorsV1AddressComponentsComponentEnum = {
    UnitNumber: 'UnitNumber',
    StreetNumber: 'StreetNumber',
    StreetName: 'StreetName',
    StreetType: 'StreetType',
    Suburb: 'Suburb',
    Postcode: 'Postcode',
    State: 'State'
};
exports.AddressLocatorsV1AddressDataModelTypesEnum = {
    Address: 'Address',
    Street: 'Street',
    Suburb: 'Suburb',
    Postcode: 'Postcode',
    State: 'State'
};
exports.AddressLocatorsV1ApmIdModelLevelEnum = {
    Address: 'Address',
    Street: 'Street',
    Suburb: 'Suburb',
    Postcode: 'Postcode',
    State: 'State'
};
exports.AgenciesV2AgencyAccountTypeEnum = {
    None: 'none',
    Residential: 'residential',
    CommercialLight: 'commercialLight',
    CommercialFull: 'commercialFull',
    Developer: 'developer',
    Holiday: 'holiday',
    Business: 'business'
};
exports.BookingsV2RateForNewListingRequestPropertyTypeEnum = {
    Unknown: 'unknown',
    AcreageSemiRural: 'acreageSemiRural',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    BlockOfUnits: 'blockOfUnits',
    Carspace: 'carspace',
    DairyFarming: 'dairyFarming',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Duplex: 'duplex',
    Farm: 'farm',
    FishingForestry: 'fishingForestry',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HotelLeisure: 'hotelLeisure',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    IndustrialWarehouse: 'industrialWarehouse',
    IrrigationServices: 'irrigationServices',
    NewLand: 'newLand',
    Livestock: 'livestock',
    International: 'international',
    MedicalConsulting: 'medicalConsulting',
    NewApartments: 'newApartments',
    Offices: 'offices',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    Retail: 'retail',
    Retirement: 'retirement',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    SemiDetached: 'semiDetached',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    Studio: 'studio',
    Terrace: 'terrace',
    Townhouse: 'townhouse',
    VacantLand: 'vacantLand',
    Villa: 'villa',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
};
exports.BookingsV2RateForNewListingRequestListingTypeEnum = {
    Sale: 'sale',
    Rent: 'rent'
};
exports.BookingsV2RateForNewListingRequestChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.DomainAvmPIV1ConfidenceEnum = {
    High: 'high',
    Medium: 'medium',
    Low: 'low'
};
exports.DomainListingAdminServiceV1ModelAddressDisplayOptionEnum = {
    Unspecified: 'unspecified',
    FullAddress: 'fullAddress',
    StreetAndSuburb: 'streetAndSuburb',
    SuburbOnly: 'suburbOnly',
    RegionOnly: 'regionOnly',
    AreaOnly: 'areaOnly',
    StateOnly: 'stateOnly'
};
exports.DomainListingAdminServiceV1ModelAddressStateEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Act: 'act',
    Sa: 'sa',
    Wa: 'wa',
    Tas: 'tas',
    Qld: 'qld',
    Nt: 'nt'
};
exports.DomainListingAdminServiceV1ModelAreaUnitEnum = {
    SquareMetres: 'squareMetres',
    Acres: 'acres',
    Hectares: 'hectares',
    SquareFeet: 'squareFeet',
    SquareYards: 'squareYards',
    Squares: 'squares'
};
exports.DomainListingAdminServiceV1ModelBusinessListingListingActionEnum = {
    Sale: 'sale',
    Rent: 'rent',
    SaleAndLease: 'saleAndLease'
};
exports.DomainListingAdminServiceV1ModelBusinessListingContactPreferenceEnum = {
    ByPhone: 'byPhone'
};
exports.DomainListingAdminServiceV1ModelBusinessPropertyPropertyTypeEnum = {
    AccessoriesParts: 'accessoriesParts',
    AccommodationTourism: 'accommodationTourism',
    Accounting: 'accounting',
    Adult: 'adult',
    AdvertisingMarketing: 'advertisingMarketing',
    Aerial: 'aerial',
    Aeronautical: 'aeronautical',
    AgedCare: 'agedCare',
    Agricultural: 'agricultural',
    Air: 'air',
    Aircraft: 'aircraft',
    Alarms: 'alarms',
    AlcoholLiquor: 'alcoholLiquor',
    Amusements: 'amusements',
    AnimalRelated: 'animalRelated',
    Aquaculture: 'aquaculture',
    AquaticMarineMarinaBerth: 'aquaticMarineMarinaBerth',
    ArtsCrafts: 'artsCrafts',
    AutoElectrical: 'autoElectrical',
    Automotive: 'automotive',
    BackpackerHostel: 'backpackerHostel',
    Bakery: 'bakery',
    BarsNightclubs: 'barsNightclubs',
    BeautyHealth: 'beautyHealth',
    BeautyProducts: 'beautyProducts',
    BeautySalon: 'beautySalon',
    BikeAndMotorcycle: 'bikeAndMotorcycle',
    BoardingKennels: 'boardingKennels',
    BoatsMarineMarinaBerth: 'boatsMarineMarinaBerth',
    Bookkeeping: 'bookkeeping',
    Brokerage: 'brokerage',
    Builder: 'builder',
    BuildingAndConstruction: 'buildingAndConstruction',
    Bus: 'bus',
    Butcher: 'butcher',
    CafeCoffeeShop: 'cafeCoffeeShop',
    Car: 'car',
    CarBusTruck: 'carBusTruck',
    CarDealership: 'carDealership',
    CarRental: 'carRental',
    CarWash: 'carWash',
    CaravanPark: 'caravanPark',
    Carpenter: 'carpenter',
    Catering: 'catering',
    ChildCare: 'childCare',
    Civil: 'civil',
    Cleaning: 'cleaning',
    CleaningAndMaintenance: 'cleaningAndMaintenance',
    ClinicalPractice: 'clinicalPractice',
    ClothingAccessories: 'clothingAccessories',
    ClothingFootwear: 'clothingFootwear',
    Communication: 'communication',
    Communications: 'communications',
    ComputerIt: 'computerIT',
    ComputerAndInternet: 'computerAndInternet',
    Construction: 'construction',
    ConvenienceStore: 'convenienceStore',
    CopyLaminate: 'copyLaminate',
    Courier: 'courier',
    CropHarvesting: 'cropHarvesting',
    Customs: 'customs',
    DairyFarming: 'dairyFarming',
    Deli: 'deli',
    Dental: 'dental',
    Detailing: 'detailing',
    Distributors: 'distributors',
    DrivingSchools: 'drivingSchools',
    EducationTraining: 'educationTraining',
    Educational: 'educational',
    Electrical: 'electrical',
    EmploymentRecruitment: 'employmentRecruitment',
    Entertainment: 'entertainment',
    EntertainmentTechnology: 'entertainmentTechnology',
    Export: 'export',
    Farming: 'farming',
    Fertiliser: 'fertiliser',
    Finance: 'finance',
    FinancialServices: 'financialServices',
    FishingForestry: 'fishingForestry',
    FloristNursery: 'floristNursery',
    FoodBeverage: 'foodBeverage',
    FoodBeverageHospitality: 'foodBeverageHospitality',
    FranchiseBusinessOpportunities: 'franchiseBusinessOpportunities',
    Freight: 'freight',
    FruitVegFreshProduce: 'fruitVegFreshProduce',
    FruitPicking: 'fruitPicking',
    FunctionCentre: 'functionCentre',
    FurnitureTimber: 'furnitureTimber',
    Gambling: 'gambling',
    GardenHousehold: 'gardenHousehold',
    GardenNurseries: 'gardenNurseries',
    Gardening: 'gardening',
    GlassCeramic: 'glassCeramic',
    GuestHouseBb: 'guestHouseBB',
    Hairdresser: 'hairdresser',
    HealthBeauty: 'healthBeauty',
    HealthSpa: 'healthSpa',
    Hire: 'hire',
    HomeGarden: 'homeGarden',
    HomeBased: 'homeBased',
    HomewareHardware: 'homewareHardware',
    Hospital: 'hospital',
    Hotel: 'hotel',
    HuntingTrap: 'huntingTrap',
    Import: 'import',
    ImportExportWholesale: 'importExportWholesale',
    IndustrialManufacturing: 'industrialManufacturing',
    Insemination: 'insemination',
    Insurance: 'insurance',
    Internet: 'internet',
    IrrigationServices: 'irrigationServices',
    JuiceBar: 'juiceBar',
    LandClearing: 'landClearing',
    Landscaping: 'landscaping',
    LaundryDryCleaning: 'laundryDryCleaning',
    Legal: 'legal',
    LeisureEntertainment: 'leisureEntertainment',
    LimousineTaxi: 'limousineTaxi',
    Livestock: 'livestock',
    Machinery: 'machinery',
    MachineryMetal: 'machineryMetal',
    ManagementRights: 'managementRights',
    Manufacturers: 'manufacturers',
    ManufacturingEngineering: 'manufacturingEngineering',
    Marine: 'marine',
    Massage: 'massage',
    MechanicalRepair: 'mechanicalRepair',
    Media: 'media',
    Medical: 'medical',
    MedicalPractice: 'medicalPractice',
    MiningEarthMoving: 'miningEarthMoving',
    MobileServices: 'mobileServices',
    Motel: 'motel',
    Motorcycle: 'motorcycle',
    MusicRelated: 'musicRelated',
    Mustering: 'mustering',
    Nails: 'nails',
    NaturalTherapies: 'naturalTherapies',
    Newsagency: 'newsagency',
    Nursery: 'nursery',
    NursingHome: 'nursingHome',
    OfficeSupplies: 'officeSupplies',
    OilGas: 'oilGas',
    PanelBeating: 'panelBeating',
    PaperPrinting: 'paperPrinting',
    ParkingCarSpace: 'parkingCarSpace',
    PestRelated: 'pestRelated',
    Pharmacies: 'pharmacies',
    Plastic: 'plastic',
    Plumbing: 'plumbing',
    PoolWater: 'poolWater',
    PostOffices: 'postOffices',
    PrintPhoto: 'printPhoto',
    Professional: 'professional',
    PropertyRealEstate: 'propertyRealEstate',
    Rail: 'rail',
    RecreationSport: 'recreationSport',
    Recruitment: 'recruitment',
    Repair: 'repair',
    Resort: 'resort',
    Restaurant: 'restaurant',
    Retail: 'retail',
    Retailer: 'retailer',
    Retirement: 'retirement',
    RetirementVillage: 'retirementVillage',
    Road: 'road',
    Rural: 'rural',
    Scientific: 'scientific',
    Sea: 'sea',
    Security: 'security',
    ServiceStation: 'serviceStation',
    Services: 'services',
    Shearing: 'shearing',
    SportsComplexGym: 'sportsComplexGym',
    Supermarket: 'supermarket',
    TakeawayFood: 'takeawayFood',
    Taxi: 'taxi',
    ThemePark: 'themePark',
    Tours: 'tours',
    Training: 'training',
    TransportDistribution: 'transportDistribution',
    Travel: 'travel',
    Truck: 'truck',
    Vending: 'vending',
    Water: 'water',
    Welding: 'welding',
    Wholesale: 'wholesale',
    Wholesalers: 'wholesalers',
    WoolClassing: 'woolClassing',
    Wreckers: 'wreckers',
    AlcoholGrocery: 'alcoholGrocery',
    CafeRestaurants: 'cafeRestaurants',
    DiscountStore: 'discountStore',
    EcoFriendly: 'ecoFriendly',
    Green: 'green',
    Grocery: 'grocery',
    SpecialityRetail: 'specialityRetail',
    Storage: 'storage',
    TravelAgency: 'travelAgency',
    VarietyStore: 'varietyStore',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
};
exports.DomainListingAdminServiceV1ModelLandAreaUnitEnum = {
    SquareMetres: 'squareMetres',
    Acres: 'acres',
    Hectares: 'hectares',
    SquareFeet: 'squareFeet',
    SquareYards: 'squareYards',
    Squares: 'squares'
};
exports.DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdRentPeriodEnum = {
    PerMonth: 'perMonth',
    PerAnnum: 'perAnnum'
};
exports.DomainListingAdminServiceV1ModelLeaseHoldDetailLeaseholdPriceUnitEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
};
exports.DomainListingAdminServiceV1ModelListingReportProcessStatusEnum = {
    Queued: 'queued',
    Processing: 'processing',
    Processed: 'processed',
    Searchable: 'searchable',
    Failed: 'failed',
    Error: 'error'
};
exports.DomainListingAdminServiceV1ModelListingResponseProcessStatusEnum = {
    Queued: 'queued',
    Processing: 'processing',
    Processed: 'processed',
    Searchable: 'searchable',
    Failed: 'failed',
    Error: 'error'
};
exports.DomainListingAdminServiceV1ModelMedianPriceDataPriceTypeEnum = {
    House: 'house',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    VacantLand: 'vacantLand'
};
exports.DomainListingAdminServiceV1ModelModelEventSeverityEnum = {
    Info: 'Info',
    Warning: 'Warning',
    Error: 'Error'
};
exports.DomainListingAdminServiceV1ModelModelEventIssueTypeEnum = {
    Internal: 'Internal',
    External: 'External'
};
exports.DomainListingAdminServiceV1ModelParkingParkingTypeEnum = {
    OnSite: 'onSite',
    OnStreet: 'onStreet',
    NoParking: 'noParking'
};
exports.DomainListingAdminServiceV1ModelParkingDetailsParkingTypeEnum = {
    OnSite: 'onSite',
    OnStreet: 'onStreet',
    NoParking: 'noParking',
    Garage: 'garage',
    Carport: 'carport',
    Outdoor: 'outdoor'
};
exports.DomainListingAdminServiceV1ModelPastSaleAddressStateEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Act: 'act',
    Sa: 'sa',
    Wa: 'wa',
    Tas: 'tas',
    Qld: 'qld',
    Nt: 'nt'
};
exports.DomainListingAdminServiceV1ModelPropertyMediaResourceTypeEnum = {
    Photograph: 'photograph',
    FloorPlan: 'floorPlan',
    Video: 'video',
    VirtualTour: 'virtualTour',
    WebLink: 'webLink'
};
exports.DomainListingAdminServiceV1ModelPropertyPdfTypeEnum = {
    CommercialPdf: 'commercialPdf',
    NewDevBrochurePdf: 'newDevBrochurePdf',
    FloorplanPdf: 'floorplanPdf',
    DevProjectPdf: 'devProjectPdf'
};
exports.DomainListingAdminServiceV1ModelResidentialListingLifeStyleTypeEnum = {
    FirstHome: 'firstHome',
    Investment: 'investment',
    Retirement: 'retirement',
    SeaChange: 'seaChange',
    TreeChange: 'treeChange',
    YoungFamilies: 'youngFamilies'
};
exports.DomainListingAdminServiceV1ModelResidentialListingListingActionEnum = {
    Sale: 'sale',
    Rent: 'rent',
    SaleAndLease: 'saleAndLease'
};
exports.DomainListingAdminServiceV1ModelResidentialListingContactPreferenceEnum = {
    ByPhone: 'byPhone'
};
exports.DomainListingAdminServiceV1ModelResidentialPropertyPropertyTypeEnum = {
    AcreageSemiRural: 'acreageSemiRural',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    BlockOfUnits: 'blockOfUnits',
    CarSpace: 'carSpace',
    DairyFarming: 'dairyFarming',
    DevelopmentSite: 'developmentSite',
    Duplex: 'duplex',
    Farm: 'farm',
    FishingForestry: 'fishingForestry',
    NewHomeDesigns: 'newHomeDesigns',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    IrrigationServices: 'irrigationServices',
    NewLand: 'newLand',
    Livestock: 'livestock',
    NewApartments: 'newApartments',
    Penthouse: 'penthouse',
    Retirement: 'retirement',
    Rural: 'rural',
    SemiDetached: 'semiDetached',
    SpecialistFarm: 'specialistFarm',
    Studio: 'studio',
    Terrace: 'terrace',
    Townhouse: 'townhouse',
    VacantLand: 'vacantLand',
    Villa: 'villa',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle'
};
exports.DomainListingAdminServiceV1ModelSupplementaryMetadataMeasurementUnitEnum = {
    SquareMetres: 'squareMetres',
    Hectares: 'hectares',
    Millimetres: 'millimetres',
    Dse: 'dse'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsStateAbbreviationEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Sa: 'sa',
    Nt: 'nt',
    Tas: 'tas',
    Act: 'act',
    Qld: 'qld',
    Wa: 'wa'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressPartsDisplayTypeEnum = {
    FullAddress: 'fullAddress',
    StreetAndSuburb: 'streetAndSuburb',
    SuburbOnly: 'suburbOnly',
    RegionOnly: 'regionOnly',
    AreaOnly: 'areaOnly',
    StateOnly: 'stateOnly'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiersAdvertiserTypeEnum = {
    Agency: 'agency',
    Private: 'private'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspectionRecurrenceEnum = {
    None: 'none',
    Weekly: 'weekly'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaCategoryEnum = {
    Image: 'image',
    Video: 'video',
    Others: 'others'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMediaTypeEnum = {
    Photo: 'photo',
    Mp4: 'mp4',
    Youtube: 'youtube',
    Floorplan: 'floorplan',
    Vimeo: 'vimeo',
    NotSpecified: 'notSpecified'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceDataPriceTypeEnum = {
    House: 'house',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    VacantLand: 'vacantLand'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsHiddenReasonsEnum = {
    ByAgency: 'byAgency',
    QLdRestriction: 'qLDRestriction'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsGstOptionEnum = {
    Na: 'na',
    Inc: 'inc',
    Ex: 'ex'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceTypeEnum = {
    Gross: 'gross',
    Net: 'net'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetailsPriceUnitEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsRentalMethodEnum = {
    NotStated: 'notStated',
    Rent: 'rent',
    Share: 'share',
    Holiday: 'holiday',
    Lease: 'lease'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetailsSourceEnum = {
    Internal: 'internal',
    External: 'external'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetailsSaleMethodEnum = {
    NotStated: 'notStated',
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    Tender: 'tender',
    ExpressionOfInterest: 'expressionOfInterest'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSoldActionEnum = {
    NotStated: 'notStated',
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    Withdrawn: 'withdrawn',
    SoldPriorToAuction: 'soldPriorToAuction'
};
exports.DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetailsSourceEnum = {
    Internal: 'internal',
    External: 'external'
};
exports.DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryDeliveryMethodEnum = {
    Email: 'email',
    Sms: 'sms'
};
exports.DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryEnquiryTypeEnum = {
    Listing: 'listing',
    DevProject: 'devProject',
    NewDevLanding: 'newDevLanding',
    AgencyProfile: 'agencyProfile',
    AgentProfile: 'agentProfile',
    ContractRequest: 'contractRequest',
    VendorEnquiry: 'vendorEnquiry',
    PrePortalListing: 'prePortalListing'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearchStateEnum = {
    Act: 'act',
    Nsw: 'nsw',
    Qld: 'qld',
    Vic: 'vic',
    Sa: 'sa',
    Wa: 'wa',
    Nt: 'nt',
    Tas: 'tas'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestPropertyTypesEnum = {
    Unknown: 'unknown',
    AccessoriesParts: 'accessoriesParts',
    AccommodationTourism: 'accommodationTourism',
    Accounting: 'accounting',
    AcreageSemiRural: 'acreageSemiRural',
    Adult: 'adult',
    AdvertisingMarketing: 'advertisingMarketing',
    Aerial: 'aerial',
    Aeronautical: 'aeronautical',
    AgedCare: 'agedCare',
    Agricultural: 'agricultural',
    Air: 'air',
    Aircraft: 'aircraft',
    Alarms: 'alarms',
    AlcoholLiquor: 'alcoholLiquor',
    Amusements: 'amusements',
    AnimalRelated: 'animalRelated',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    AquaticMarineMarinaBerth: 'aquaticMarineMarinaBerth',
    ArtsCrafts: 'artsCrafts',
    AutoElectrical: 'autoElectrical',
    Automotive: 'automotive',
    BackpackerHostel: 'backpackerHostel',
    Bakery: 'bakery',
    BarsNightclubs: 'barsNightclubs',
    BeautyHealth: 'beautyHealth',
    BeautyProducts: 'beautyProducts',
    BeautySalon: 'beautySalon',
    BedAndBreakfast: 'bedAndBreakfast',
    BikeAndMotorcycle: 'bikeAndMotorcycle',
    BlockOfUnits: 'blockOfUnits',
    BoardingKennels: 'boardingKennels',
    BoatsMarineMarinaBerth: 'boatsMarineMarinaBerth',
    Bookkeeping: 'bookkeeping',
    Brokerage: 'brokerage',
    Builder: 'builder',
    BuildingAndConstruction: 'buildingAndConstruction',
    Bus: 'bus',
    Butcher: 'butcher',
    CafeCoffeeShop: 'cafeCoffeeShop',
    Car: 'car',
    CarBusTruck: 'carBusTruck',
    CarDealership: 'carDealership',
    CarRental: 'carRental',
    CarSpace: 'carSpace',
    CarWash: 'carWash',
    CaravanPark: 'caravanPark',
    Carpenter: 'carpenter',
    Catering: 'catering',
    ChildCare: 'childCare',
    Civil: 'civil',
    Cleaning: 'cleaning',
    CleaningAndMaintenance: 'cleaningAndMaintenance',
    ClinicalPractice: 'clinicalPractice',
    ClothingAccessories: 'clothingAccessories',
    ClothingFootwear: 'clothingFootwear',
    Communication: 'communication',
    Communications: 'communications',
    ComputerIt: 'computerIT',
    ComputerAndInternet: 'computerAndInternet',
    Construction: 'construction',
    ConvenienceStore: 'convenienceStore',
    CopyLaminate: 'copyLaminate',
    Courier: 'courier',
    CropHarvesting: 'cropHarvesting',
    Customs: 'customs',
    DairyFarming: 'dairyFarming',
    Deli: 'deli',
    Dental: 'dental',
    Detailing: 'detailing',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Distributors: 'distributors',
    DrivingSchools: 'drivingSchools',
    Duplex: 'duplex',
    EducationTraining: 'educationTraining',
    Educational: 'educational',
    Electrical: 'electrical',
    EmploymentRecruitment: 'employmentRecruitment',
    Entertainment: 'entertainment',
    EntertainmentTechnology: 'entertainmentTechnology',
    Export: 'export',
    Farm: 'farm',
    Farming: 'farming',
    Fertiliser: 'fertiliser',
    Finance: 'finance',
    FinancialServices: 'financialServices',
    FishingForestry: 'fishingForestry',
    FloristNursery: 'floristNursery',
    FoodBeverage: 'foodBeverage',
    FoodBeverageHospitality: 'foodBeverageHospitality',
    FranchiseBusinessOpportunities: 'franchiseBusinessOpportunities',
    Freight: 'freight',
    FruitVegFreshProduce: 'fruitVegFreshProduce',
    FruitPicking: 'fruitPicking',
    FunctionCentre: 'functionCentre',
    FurnitureTimber: 'furnitureTimber',
    Gambling: 'gambling',
    GardenHousehold: 'gardenHousehold',
    GardenNurseries: 'gardenNurseries',
    Gardening: 'gardening',
    GlassCeramic: 'glassCeramic',
    GuestHouseBb: 'guestHouseBB',
    Guesthouse: 'guesthouse',
    Hairdresser: 'hairdresser',
    HealthBeauty: 'healthBeauty',
    HealthSpa: 'healthSpa',
    Hire: 'hire',
    HomeGarden: 'homeGarden',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HomewareHardware: 'homewareHardware',
    Hospital: 'hospital',
    Hotel: 'hotel',
    HotelLeisure: 'hotelLeisure',
    HotelMotelPub: 'hotelMotelPub',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    HuntingTrap: 'huntingTrap',
    Import: 'import',
    ImportExportWholesale: 'importExportWholesale',
    IndustrialManufacturing: 'industrialManufacturing',
    IndustrialWarehouse: 'industrialWarehouse',
    Insemination: 'insemination',
    Insurance: 'insurance',
    InternationalNewDevelopment: 'internationalNewDevelopment',
    Internet: 'internet',
    IrrigationServices: 'irrigationServices',
    JuiceBar: 'juiceBar',
    LandClearing: 'landClearing',
    NewLand: 'newLand',
    Landscaping: 'landscaping',
    LaundryDryCleaning: 'laundryDryCleaning',
    Legal: 'legal',
    LeisureEntertainment: 'leisureEntertainment',
    LimousineTaxi: 'limousineTaxi',
    Livestock: 'livestock',
    InternationalCommercial: 'internationalCommercial',
    Machinery: 'machinery',
    MachineryMetal: 'machineryMetal',
    ManagementRights: 'managementRights',
    Manufacturers: 'manufacturers',
    ManufacturingEngineering: 'manufacturingEngineering',
    Marine: 'marine',
    Massage: 'massage',
    MechanicalRepair: 'mechanicalRepair',
    Media: 'media',
    Medical: 'medical',
    MedicalConsulting: 'medicalConsulting',
    MedicalPractice: 'medicalPractice',
    MiningEarthMoving: 'miningEarthMoving',
    MobileServices: 'mobileServices',
    Motel: 'motel',
    Motorcycle: 'motorcycle',
    MusicRelated: 'musicRelated',
    Mustering: 'mustering',
    Nails: 'nails',
    NaturalTherapies: 'naturalTherapies',
    NewApartments: 'newApartments',
    Newsagency: 'newsagency',
    Nursery: 'nursery',
    NursingHome: 'nursingHome',
    Offices: 'offices',
    OfficeSupplies: 'officeSupplies',
    OilGas: 'oilGas',
    OnStreet: 'onStreet',
    PanelBeating: 'panelBeating',
    PaperPrinting: 'paperPrinting',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    PestRelated: 'pestRelated',
    Pharmacies: 'pharmacies',
    Plastic: 'plastic',
    Plumbing: 'plumbing',
    PoolWater: 'poolWater',
    PostOffices: 'postOffices',
    PrintPhoto: 'printPhoto',
    Professional: 'professional',
    PropertyRealEstate: 'propertyRealEstate',
    Rail: 'rail',
    RecreationSport: 'recreationSport',
    Recruitment: 'recruitment',
    Repair: 'repair',
    Resort: 'resort',
    Restaurant: 'restaurant',
    Retail: 'retail',
    Retailer: 'retailer',
    RetirementVillage: 'retirementVillage',
    Road: 'road',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    Scientific: 'scientific',
    Sea: 'sea',
    Security: 'security',
    SemiDetached: 'semiDetached',
    ServiceStation: 'serviceStation',
    Serviced: 'serviced',
    Services: 'services',
    Shearing: 'shearing',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    SportsComplexGym: 'sportsComplexGym',
    Studio: 'studio',
    Supermarket: 'supermarket',
    TakeawayFood: 'takeawayFood',
    Taxi: 'taxi',
    Terrace: 'terrace',
    ThemePark: 'themePark',
    Tours: 'tours',
    Townhouse: 'townhouse',
    Training: 'training',
    TransportDistribution: 'transportDistribution',
    Travel: 'travel',
    Truck: 'truck',
    VacantLand: 'vacantLand',
    Vending: 'vending',
    Villa: 'villa',
    Water: 'water',
    Welding: 'welding',
    Wholesale: 'wholesale',
    Wholesalers: 'wholesalers',
    WithShowroomWarehouse: 'withShowroomWarehouse',
    WithinShoppingComplex: 'withinShoppingComplex',
    WoolClassing: 'woolClassing',
    Wreckers: 'wreckers',
    Tattersalls: 'tattersalls',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    AlcoholGrocery: 'alcoholGrocery',
    CafeRestaurant: 'cafeRestaurant',
    DiscountStore: 'discountStore',
    EcoFriendly: 'ecoFriendly',
    Green: 'green',
    Grocery: 'grocery',
    SpecialityRetail: 'specialityRetail',
    Storage: 'storage',
    TravelAgency: 'travelAgency',
    VarietyStore: 'varietyStore',
    FranchiseNew: 'franchiseNew',
    Business: 'business'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSortEnum = {
    Default: 'default',
    NewestFirst: 'newestFirst',
    LowTotalPriceFirst: 'lowTotalPriceFirst',
    HightTotalPriceFirst: 'hightTotalPriceFirst',
    SuburbAsc: 'suburbAsc',
    SuburbDesc: 'suburbDesc'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequestSearchModeEnum = {
    ForSale: 'forSale',
    FranchiseOpportunity: 'franchiseOpportunity',
    FranchiseBrand: 'franchiseBrand'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearchStateEnum = {
    Act: 'act',
    Nsw: 'nsw',
    Qld: 'qld',
    Vic: 'vic',
    Sa: 'sa',
    Wa: 'wa',
    Nt: 'nt',
    Tas: 'tas'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearchTypeEnum = {
    OnSite: 'onSite',
    OnStreet: 'onStreet',
    NoParking: 'noParking'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearchTypeEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTypesEnum = {
    Unknown: 'unknown',
    AccessoriesParts: 'accessoriesParts',
    AccommodationTourism: 'accommodationTourism',
    Accounting: 'accounting',
    AcreageSemiRural: 'acreageSemiRural',
    Adult: 'adult',
    AdvertisingMarketing: 'advertisingMarketing',
    Aerial: 'aerial',
    Aeronautical: 'aeronautical',
    AgedCare: 'agedCare',
    Agricultural: 'agricultural',
    Air: 'air',
    Aircraft: 'aircraft',
    Alarms: 'alarms',
    AlcoholLiquor: 'alcoholLiquor',
    Amusements: 'amusements',
    AnimalRelated: 'animalRelated',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    AquaticMarineMarinaBerth: 'aquaticMarineMarinaBerth',
    ArtsCrafts: 'artsCrafts',
    AutoElectrical: 'autoElectrical',
    Automotive: 'automotive',
    BackpackerHostel: 'backpackerHostel',
    Bakery: 'bakery',
    BarsNightclubs: 'barsNightclubs',
    BeautyHealth: 'beautyHealth',
    BeautyProducts: 'beautyProducts',
    BeautySalon: 'beautySalon',
    BedAndBreakfast: 'bedAndBreakfast',
    BikeAndMotorcycle: 'bikeAndMotorcycle',
    BlockOfUnits: 'blockOfUnits',
    BoardingKennels: 'boardingKennels',
    BoatsMarineMarinaBerth: 'boatsMarineMarinaBerth',
    Bookkeeping: 'bookkeeping',
    Brokerage: 'brokerage',
    Builder: 'builder',
    BuildingAndConstruction: 'buildingAndConstruction',
    Bus: 'bus',
    Butcher: 'butcher',
    CafeCoffeeShop: 'cafeCoffeeShop',
    Car: 'car',
    CarBusTruck: 'carBusTruck',
    CarDealership: 'carDealership',
    CarRental: 'carRental',
    CarSpace: 'carSpace',
    CarWash: 'carWash',
    CaravanPark: 'caravanPark',
    Carpenter: 'carpenter',
    Catering: 'catering',
    ChildCare: 'childCare',
    Civil: 'civil',
    Cleaning: 'cleaning',
    CleaningAndMaintenance: 'cleaningAndMaintenance',
    ClinicalPractice: 'clinicalPractice',
    ClothingAccessories: 'clothingAccessories',
    ClothingFootwear: 'clothingFootwear',
    Communication: 'communication',
    Communications: 'communications',
    ComputerIt: 'computerIT',
    ComputerAndInternet: 'computerAndInternet',
    Construction: 'construction',
    ConvenienceStore: 'convenienceStore',
    CopyLaminate: 'copyLaminate',
    Courier: 'courier',
    CropHarvesting: 'cropHarvesting',
    Customs: 'customs',
    DairyFarming: 'dairyFarming',
    Deli: 'deli',
    Dental: 'dental',
    Detailing: 'detailing',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Distributors: 'distributors',
    DrivingSchools: 'drivingSchools',
    Duplex: 'duplex',
    EducationTraining: 'educationTraining',
    Educational: 'educational',
    Electrical: 'electrical',
    EmploymentRecruitment: 'employmentRecruitment',
    Entertainment: 'entertainment',
    EntertainmentTechnology: 'entertainmentTechnology',
    Export: 'export',
    Farm: 'farm',
    Farming: 'farming',
    Fertiliser: 'fertiliser',
    Finance: 'finance',
    FinancialServices: 'financialServices',
    FishingForestry: 'fishingForestry',
    FloristNursery: 'floristNursery',
    FoodBeverage: 'foodBeverage',
    FoodBeverageHospitality: 'foodBeverageHospitality',
    FranchiseBusinessOpportunities: 'franchiseBusinessOpportunities',
    Freight: 'freight',
    FruitVegFreshProduce: 'fruitVegFreshProduce',
    FruitPicking: 'fruitPicking',
    FunctionCentre: 'functionCentre',
    FurnitureTimber: 'furnitureTimber',
    Gambling: 'gambling',
    GardenHousehold: 'gardenHousehold',
    GardenNurseries: 'gardenNurseries',
    Gardening: 'gardening',
    GlassCeramic: 'glassCeramic',
    GuestHouseBb: 'guestHouseBB',
    Guesthouse: 'guesthouse',
    Hairdresser: 'hairdresser',
    HealthBeauty: 'healthBeauty',
    HealthSpa: 'healthSpa',
    Hire: 'hire',
    HomeGarden: 'homeGarden',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HomewareHardware: 'homewareHardware',
    Hospital: 'hospital',
    Hotel: 'hotel',
    HotelLeisure: 'hotelLeisure',
    HotelMotelPub: 'hotelMotelPub',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    HuntingTrap: 'huntingTrap',
    Import: 'import',
    ImportExportWholesale: 'importExportWholesale',
    IndustrialManufacturing: 'industrialManufacturing',
    IndustrialWarehouse: 'industrialWarehouse',
    Insemination: 'insemination',
    Insurance: 'insurance',
    InternationalNewDevelopment: 'internationalNewDevelopment',
    Internet: 'internet',
    IrrigationServices: 'irrigationServices',
    JuiceBar: 'juiceBar',
    LandClearing: 'landClearing',
    NewLand: 'newLand',
    Landscaping: 'landscaping',
    LaundryDryCleaning: 'laundryDryCleaning',
    Legal: 'legal',
    LeisureEntertainment: 'leisureEntertainment',
    LimousineTaxi: 'limousineTaxi',
    Livestock: 'livestock',
    InternationalCommercial: 'internationalCommercial',
    Machinery: 'machinery',
    MachineryMetal: 'machineryMetal',
    ManagementRights: 'managementRights',
    Manufacturers: 'manufacturers',
    ManufacturingEngineering: 'manufacturingEngineering',
    Marine: 'marine',
    Massage: 'massage',
    MechanicalRepair: 'mechanicalRepair',
    Media: 'media',
    Medical: 'medical',
    MedicalConsulting: 'medicalConsulting',
    MedicalPractice: 'medicalPractice',
    MiningEarthMoving: 'miningEarthMoving',
    MobileServices: 'mobileServices',
    Motel: 'motel',
    Motorcycle: 'motorcycle',
    MusicRelated: 'musicRelated',
    Mustering: 'mustering',
    Nails: 'nails',
    NaturalTherapies: 'naturalTherapies',
    NewApartments: 'newApartments',
    Newsagency: 'newsagency',
    Nursery: 'nursery',
    NursingHome: 'nursingHome',
    Offices: 'offices',
    OfficeSupplies: 'officeSupplies',
    OilGas: 'oilGas',
    OnStreet: 'onStreet',
    PanelBeating: 'panelBeating',
    PaperPrinting: 'paperPrinting',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    PestRelated: 'pestRelated',
    Pharmacies: 'pharmacies',
    Plastic: 'plastic',
    Plumbing: 'plumbing',
    PoolWater: 'poolWater',
    PostOffices: 'postOffices',
    PrintPhoto: 'printPhoto',
    Professional: 'professional',
    PropertyRealEstate: 'propertyRealEstate',
    Rail: 'rail',
    RecreationSport: 'recreationSport',
    Recruitment: 'recruitment',
    Repair: 'repair',
    Resort: 'resort',
    Restaurant: 'restaurant',
    Retail: 'retail',
    Retailer: 'retailer',
    RetirementVillage: 'retirementVillage',
    Road: 'road',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    Scientific: 'scientific',
    Sea: 'sea',
    Security: 'security',
    SemiDetached: 'semiDetached',
    ServiceStation: 'serviceStation',
    Serviced: 'serviced',
    Services: 'services',
    Shearing: 'shearing',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    SportsComplexGym: 'sportsComplexGym',
    Studio: 'studio',
    Supermarket: 'supermarket',
    TakeawayFood: 'takeawayFood',
    Taxi: 'taxi',
    Terrace: 'terrace',
    ThemePark: 'themePark',
    Tours: 'tours',
    Townhouse: 'townhouse',
    Training: 'training',
    TransportDistribution: 'transportDistribution',
    Travel: 'travel',
    Truck: 'truck',
    VacantLand: 'vacantLand',
    Vending: 'vending',
    Villa: 'villa',
    Water: 'water',
    Welding: 'welding',
    Wholesale: 'wholesale',
    Wholesalers: 'wholesalers',
    WithShowroomWarehouse: 'withShowroomWarehouse',
    WithinShoppingComplex: 'withinShoppingComplex',
    WoolClassing: 'woolClassing',
    Wreckers: 'wreckers',
    Tattersalls: 'tattersalls',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    AlcoholGrocery: 'alcoholGrocery',
    CafeRestaurant: 'cafeRestaurant',
    DiscountStore: 'discountStore',
    EcoFriendly: 'ecoFriendly',
    Green: 'green',
    Grocery: 'grocery',
    SpecialityRetail: 'specialityRetail',
    Storage: 'storage',
    TravelAgency: 'travelAgency',
    VarietyStore: 'varietyStore',
    FranchiseNew: 'franchiseNew',
    Business: 'business'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSearchModeEnum = {
    ForSale: 'forSale',
    ForLease: 'forLease',
    Sold: 'sold',
    Leased: 'leased'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSortEnum = {
    Default: 'default',
    NewestFirst: 'newestFirst',
    CheapestTotalFirst: 'cheapestTotalFirst',
    CheapestPerSqmFirst: 'cheapestPerSqmFirst',
    MostExpensiveTotalFirst: 'mostExpensiveTotalFirst',
    MostExpensivePerSqmFirst: 'mostExpensivePerSqmFirst',
    SuburbAsc: 'suburbAsc',
    SuburbDesc: 'suburbDesc',
    BuildingSizeAsc: 'buildingSizeAsc',
    BuildingSizeDesc: 'buildingSizeDesc'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestSaleTypeEnum = {
    StandardSale: 'standardSale',
    Auction: 'auction',
    ExpressionOfInterest: 'expressionOfInterest',
    Tender: 'tender'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestPropertyTitleEnum = {
    Freehold: 'freehold',
    Strata: 'strata',
    NoBuilding: 'noBuilding'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequestExclusionTypesEnum = {
    SurroundingSuburbs: 'surroundingSuburbs',
    WithoutPrice: 'withoutPrice'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsListingObjectiveEnum = {
    Sale: 'sale',
    Rent: 'rent'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsListingPropertyTypesEnum = {
    Unknown: 'unknown',
    AccessoriesParts: 'accessoriesParts',
    AccommodationTourism: 'accommodationTourism',
    Accounting: 'accounting',
    AcreageSemiRural: 'acreageSemiRural',
    Adult: 'adult',
    AdvertisingMarketing: 'advertisingMarketing',
    Aerial: 'aerial',
    Aeronautical: 'aeronautical',
    AgedCare: 'agedCare',
    Agricultural: 'agricultural',
    Air: 'air',
    Aircraft: 'aircraft',
    Alarms: 'alarms',
    AlcoholLiquor: 'alcoholLiquor',
    Amusements: 'amusements',
    AnimalRelated: 'animalRelated',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    AquaticMarineMarinaBerth: 'aquaticMarineMarinaBerth',
    ArtsCrafts: 'artsCrafts',
    AutoElectrical: 'autoElectrical',
    Automotive: 'automotive',
    BackpackerHostel: 'backpackerHostel',
    Bakery: 'bakery',
    BarsNightclubs: 'barsNightclubs',
    BeautyHealth: 'beautyHealth',
    BeautyProducts: 'beautyProducts',
    BeautySalon: 'beautySalon',
    BikeAndMotorcycle: 'bikeAndMotorcycle',
    BlockOfUnits: 'blockOfUnits',
    BoardingKennels: 'boardingKennels',
    BoatsMarineMarinaBerth: 'boatsMarineMarinaBerth',
    Bookkeeping: 'bookkeeping',
    Brokerage: 'brokerage',
    Builder: 'builder',
    BuildingAndConstruction: 'buildingAndConstruction',
    Bus: 'bus',
    Butcher: 'butcher',
    CafeCoffeeShop: 'cafeCoffeeShop',
    Car: 'car',
    CarBusTruck: 'carBusTruck',
    CarDealership: 'carDealership',
    CarRental: 'carRental',
    Carspace: 'carspace',
    CarWash: 'carWash',
    CaravanPark: 'caravanPark',
    Carpenter: 'carpenter',
    Catering: 'catering',
    ChildCare: 'childCare',
    Civil: 'civil',
    Cleaning: 'cleaning',
    CleaningAndMaintenance: 'cleaningAndMaintenance',
    ClinicalPractice: 'clinicalPractice',
    ClothingAccessories: 'clothingAccessories',
    ClothingFootwear: 'clothingFootwear',
    Communication: 'communication',
    Communications: 'communications',
    ComputerIt: 'computerIT',
    ComputerAndInternet: 'computerAndInternet',
    Construction: 'construction',
    ConvenienceStore: 'convenienceStore',
    CopyLaminate: 'copyLaminate',
    Courier: 'courier',
    CropHarvesting: 'cropHarvesting',
    Customs: 'customs',
    DairyFarming: 'dairyFarming',
    Deli: 'deli',
    Dental: 'dental',
    Detailing: 'detailing',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Distributors: 'distributors',
    DrivingSchools: 'drivingSchools',
    Duplex: 'duplex',
    EducationTraining: 'educationTraining',
    Educational: 'educational',
    Electrical: 'electrical',
    EmploymentRecruitment: 'employmentRecruitment',
    Entertainment: 'entertainment',
    EntertainmentTechnology: 'entertainmentTechnology',
    Export: 'export',
    Farm: 'farm',
    Farming: 'farming',
    Fertiliser: 'fertiliser',
    Finance: 'finance',
    FinancialServices: 'financialServices',
    FishingForestry: 'fishingForestry',
    FloristNursery: 'floristNursery',
    FoodBeverage: 'foodBeverage',
    FoodBeverageHospitality: 'foodBeverageHospitality',
    FranchiseBusinessOpportunities: 'franchiseBusinessOpportunities',
    Freight: 'freight',
    FruitVegFreshProduce: 'fruitVegFreshProduce',
    FruitPicking: 'fruitPicking',
    FunctionCentre: 'functionCentre',
    FurnitureTimber: 'furnitureTimber',
    Gambling: 'gambling',
    GardenHousehold: 'gardenHousehold',
    GardenNurseries: 'gardenNurseries',
    Gardening: 'gardening',
    GlassCeramic: 'glassCeramic',
    GuestHouseBb: 'guestHouseBB',
    Hairdresser: 'hairdresser',
    HealthBeauty: 'healthBeauty',
    HealthSpa: 'healthSpa',
    Hire: 'hire',
    HomeGarden: 'homeGarden',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HomewareHardware: 'homewareHardware',
    Hospital: 'hospital',
    Hotel: 'hotel',
    HotelLeisure: 'hotelLeisure',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    HuntingTrap: 'huntingTrap',
    Import: 'import',
    ImportExportWholesale: 'importExportWholesale',
    IndustrialManufacturing: 'industrialManufacturing',
    IndustrialWarehouse: 'industrialWarehouse',
    Insemination: 'insemination',
    Insurance: 'insurance',
    Internet: 'internet',
    IrrigationServices: 'irrigationServices',
    JuiceBar: 'juiceBar',
    LandClearing: 'landClearing',
    NewLand: 'newLand',
    Landscaping: 'landscaping',
    LaundryDryCleaning: 'laundryDryCleaning',
    Legal: 'legal',
    LeisureEntertainment: 'leisureEntertainment',
    LimousineTaxi: 'limousineTaxi',
    Livestock: 'livestock',
    International: 'international',
    Machinery: 'machinery',
    MachineryMetal: 'machineryMetal',
    ManagementRights: 'managementRights',
    Manufacturers: 'manufacturers',
    ManufacturingEngineering: 'manufacturingEngineering',
    Marine: 'marine',
    Massage: 'massage',
    MechanicalRepair: 'mechanicalRepair',
    Media: 'media',
    Medical: 'medical',
    MedicalConsulting: 'medicalConsulting',
    MedicalPractice: 'medicalPractice',
    MiningEarthMoving: 'miningEarthMoving',
    MobileServices: 'mobileServices',
    Motel: 'motel',
    Motorcycle: 'motorcycle',
    MusicRelated: 'musicRelated',
    Mustering: 'mustering',
    Nails: 'nails',
    NaturalTherapies: 'naturalTherapies',
    NewApartments: 'newApartments',
    Newsagency: 'newsagency',
    Nursery: 'nursery',
    NursingHome: 'nursingHome',
    Offices: 'offices',
    OfficeSupplies: 'officeSupplies',
    OilGas: 'oilGas',
    PanelBeating: 'panelBeating',
    PaperPrinting: 'paperPrinting',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    PestRelated: 'pestRelated',
    Pharmacies: 'pharmacies',
    Plastic: 'plastic',
    Plumbing: 'plumbing',
    PoolWater: 'poolWater',
    PostOffices: 'postOffices',
    PrintPhoto: 'printPhoto',
    Professional: 'professional',
    PropertyRealEstate: 'propertyRealEstate',
    Rail: 'rail',
    RecreationSport: 'recreationSport',
    Recruitment: 'recruitment',
    Repair: 'repair',
    Resort: 'resort',
    Restaurant: 'restaurant',
    Retail: 'retail',
    Retailer: 'retailer',
    Retirement: 'retirement',
    RetirementVillage: 'retirementVillage',
    Road: 'road',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    Scientific: 'scientific',
    Sea: 'sea',
    Security: 'security',
    SemiDetached: 'semiDetached',
    ServiceStation: 'serviceStation',
    Services: 'services',
    Shearing: 'shearing',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    SportsComplexGym: 'sportsComplexGym',
    Studio: 'studio',
    Supermarket: 'supermarket',
    TakeawayFood: 'takeawayFood',
    Taxi: 'taxi',
    Terrace: 'terrace',
    ThemePark: 'themePark',
    Tours: 'tours',
    Townhouse: 'townhouse',
    Training: 'training',
    TransportDistribution: 'transportDistribution',
    Travel: 'travel',
    Truck: 'truck',
    VacantLand: 'vacantLand',
    Vending: 'vending',
    Villa: 'villa',
    Water: 'water',
    Welding: 'welding',
    Wholesale: 'wholesale',
    Wholesalers: 'wholesalers',
    WoolClassing: 'woolClassing',
    Wreckers: 'wreckers',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    AlcoholGrocery: 'alcoholGrocery',
    CafeRestaurants: 'cafeRestaurants',
    DiscountStore: 'discountStore',
    EcoFriendly: 'ecoFriendly',
    Green: 'green',
    Grocery: 'grocery',
    SpecialityRetail: 'specialityRetail',
    Storage: 'storage',
    TravelAgency: 'travelAgency',
    VarietyStore: 'varietyStore',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsListingStatusEnum = {
    Unknown: 'unknown',
    Archived: 'archived',
    UnderOffer: 'underOffer',
    Sold: 'sold',
    Leased: 'leased',
    NewDevelopment: 'newDevelopment',
    RecentlyUpdated: 'recentlyUpdated',
    New: 'new',
    Live: 'live',
    Pending: 'pending'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsListingSaleModeEnum = {
    Buy: 'buy',
    Rent: 'rent',
    Share: 'share',
    Sold: 'sold',
    Leased: 'leased',
    Archived: 'archived'
};
exports.DomainPublicAdapterWebApiModelsV1ListingsListingChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2AdvertiserTypeEnum = {
    Agency: 'Agency',
    Private: 'Private'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2MediaCategoryEnum = {
    Image: 'Image'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2ProjectPromoLevelEnum = {
    Standard: 'Standard',
    Premium: 'Premium'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2ProjectStateEnum = {
    Act: 'ACT',
    Nsw: 'NSW',
    Qld: 'QLD',
    Vic: 'VIC',
    Sa: 'SA',
    Wa: 'WA',
    Nt: 'NT',
    Tas: 'TAS'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsStateEnum = {
    Act: 'ACT',
    Nsw: 'NSW',
    Qld: 'QLD',
    Vic: 'VIC',
    Sa: 'SA',
    Wa: 'WA',
    Nt: 'NT',
    Tas: 'TAS'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsFeaturesEnum = {
    Unrecognised: 'Unrecognised',
    AirConditioning: 'AirConditioning',
    BuiltInWardrobes: 'BuiltInWardrobes',
    CableOrSatellite: 'CableOrSatellite',
    Ensuite: 'Ensuite',
    Floorboards: 'Floorboards',
    Gas: 'Gas',
    InternalLaundry: 'InternalLaundry',
    PetsAllowed: 'PetsAllowed',
    SecureParking: 'SecureParking',
    SwimmingPool: 'SwimmingPool',
    Furnished: 'Furnished',
    GroundFloor: 'GroundFloor',
    WaterViews: 'WaterViews',
    NorthFacing: 'NorthFacing',
    CityViews: 'CityViews',
    IndoorSpa: 'IndoorSpa',
    Gym: 'Gym',
    AlarmSystem: 'AlarmSystem',
    Intercom: 'Intercom',
    BroadbandInternetAccess: 'BroadbandInternetAccess',
    Bath: 'Bath',
    Fireplace: 'Fireplace',
    SeparateDiningRoom: 'SeparateDiningRoom',
    Heating: 'Heating',
    Dishwasher: 'Dishwasher',
    Study: 'Study',
    TennisCourt: 'TennisCourt',
    Shed: 'Shed',
    FullyFenced: 'FullyFenced',
    BalconyDeck: 'BalconyDeck',
    GardenCourtyard: 'GardenCourtyard',
    OutdoorSpa: 'OutdoorSpa',
    DoubleGlazedWindows: 'DoubleGlazedWindows',
    EnergyEfficientAppliances: 'EnergyEfficientAppliances',
    WaterEfficientAppliances: 'WaterEfficientAppliances',
    WallCeilingInsulation: 'WallCeilingInsulation',
    RainwaterStorageTank: 'RainwaterStorageTank',
    GreywaterSystem: 'GreywaterSystem',
    WaterEfficientFixtures: 'WaterEfficientFixtures',
    SolarHotWater: 'SolarHotWater',
    SolarPanels: 'SolarPanels'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsPropertyTypeEnum = {
    Unknown: 'Unknown',
    AcreageSemiRural: 'AcreageSemiRural',
    ApartmentUnitFlat: 'ApartmentUnitFlat',
    Aquaculture: 'Aquaculture',
    BlockOfUnits: 'BlockOfUnits',
    CarSpace: 'CarSpace',
    DairyFarming: 'DairyFarming',
    DevelopmentSite: 'DevelopmentSite',
    Duplex: 'Duplex',
    Farm: 'Farm',
    FishingForestry: 'FishingForestry',
    NewHomeDesigns: 'NewHomeDesigns',
    House: 'House',
    NewHouseLand: 'NewHouseLand',
    IrrigationServices: 'IrrigationServices',
    NewLand: 'NewLand',
    Livestock: 'Livestock',
    NewApartments: 'NewApartments',
    Penthouse: 'Penthouse',
    RetirementVillage: 'RetirementVillage',
    Rural: 'Rural',
    SemiDetached: 'SemiDetached',
    SpecialistFarm: 'SpecialistFarm',
    Studio: 'Studio',
    Terrace: 'Terrace',
    Townhouse: 'Townhouse',
    VacantLand: 'VacantLand',
    Villa: 'Villa',
    Cropping: 'Cropping',
    Viticulture: 'Viticulture',
    MixedFarming: 'MixedFarming',
    Grazing: 'Grazing',
    Horticulture: 'Horticulture',
    Equine: 'Equine',
    Farmlet: 'Farmlet',
    Orchard: 'Orchard',
    RuralLifestyle: 'RuralLifestyle'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetailsAllPropertyTypesEnum = {
    Unknown: 'Unknown',
    AcreageSemiRural: 'AcreageSemiRural',
    ApartmentUnitFlat: 'ApartmentUnitFlat',
    Aquaculture: 'Aquaculture',
    BlockOfUnits: 'BlockOfUnits',
    CarSpace: 'CarSpace',
    DairyFarming: 'DairyFarming',
    DevelopmentSite: 'DevelopmentSite',
    Duplex: 'Duplex',
    Farm: 'Farm',
    FishingForestry: 'FishingForestry',
    NewHomeDesigns: 'NewHomeDesigns',
    House: 'House',
    NewHouseLand: 'NewHouseLand',
    IrrigationServices: 'IrrigationServices',
    NewLand: 'NewLand',
    Livestock: 'Livestock',
    NewApartments: 'NewApartments',
    Penthouse: 'Penthouse',
    RetirementVillage: 'RetirementVillage',
    Rural: 'Rural',
    SemiDetached: 'SemiDetached',
    SpecialistFarm: 'SpecialistFarm',
    Studio: 'Studio',
    Terrace: 'Terrace',
    Townhouse: 'Townhouse',
    VacantLand: 'VacantLand',
    Villa: 'Villa',
    Cropping: 'Cropping',
    Viticulture: 'Viticulture',
    MixedFarming: 'MixedFarming',
    Grazing: 'Grazing',
    Horticulture: 'Horticulture',
    Equine: 'Equine',
    Farmlet: 'Farmlet',
    Orchard: 'Orchard',
    RuralLifestyle: 'RuralLifestyle'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingPromoLevelEnum = {
    Standard: 'Standard',
    StandardPp: 'StandardPP',
    Elite: 'Elite',
    ElitePp: 'ElitePP',
    PremiumPlus: 'PremiumPlus'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListingListingTypeEnum = {
    Sale: 'Sale',
    Rent: 'Rent',
    Share: 'Share',
    Sold: 'Sold',
    NewHomes: 'NewHomes'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2SearchResultTypeEnum = {
    PropertyListing: 'PropertyListing',
    Project: 'Project'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSourceEnum = {
    Agency: 'Agency',
    Apm: 'Apm'
};
exports.DomainSearchServiceV2ModelDomainSearchContractsV2SoldDataSaleMethodEnum = {
    NotStated: 'NotStated',
    SoldByAuction: 'SoldByAuction',
    SoldByPrivateTreaty: 'SoldByPrivateTreaty',
    Withdrawn: 'Withdrawn',
    SoldPriorToAuction: 'SoldPriorToAuction'
};
exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementFieldEnum = {
    AdId: 'AdId',
    PromoLevelScore: 'PromoLevelScore',
    FreshnessLevel: 'FreshnessLevel',
    ProductBoost: 'ProductBoost',
    DateUpdated: 'DateUpdated',
    DateListed: 'DateListed',
    SuburbName: 'SuburbName',
    PriceDisplayOption: 'PriceDisplayOption',
    SoldDate: 'SoldDate',
    Price: 'Price',
    EarliestInspectionOpenTime: 'EarliestInspectionOpenTime',
    EarliestAuctionTime: 'EarliestAuctionTime',
    DateAvailable: 'DateAvailable'
};
exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSortElementDirectionEnum = {
    Ascending: 'Ascending',
    Descending: 'Descending'
};
exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocationStateEnum = {
    Act: 'ACT',
    Nsw: 'NSW',
    Qld: 'QLD',
    Vic: 'VIC',
    Sa: 'SA',
    Wa: 'WA',
    Nt: 'NT',
    Tas: 'TAS'
};
exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingTypeEnum = {
    Sale: 'Sale',
    Rent: 'Rent',
    Share: 'Share',
    Sold: 'Sold',
    NewHomes: 'NewHomes'
};
exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyTypesEnum = {
    AcreageSemiRural: 'AcreageSemiRural',
    ApartmentUnitFlat: 'ApartmentUnitFlat',
    Aquaculture: 'Aquaculture',
    BlockOfUnits: 'BlockOfUnits',
    CarSpace: 'CarSpace',
    DairyFarming: 'DairyFarming',
    DevelopmentSite: 'DevelopmentSite',
    Duplex: 'Duplex',
    Farm: 'Farm',
    FishingForestry: 'FishingForestry',
    NewHomeDesigns: 'NewHomeDesigns',
    House: 'House',
    NewHouseLand: 'NewHouseLand',
    IrrigationServices: 'IrrigationServices',
    NewLand: 'NewLand',
    Livestock: 'Livestock',
    NewApartments: 'NewApartments',
    Penthouse: 'Penthouse',
    RetirementVillage: 'RetirementVillage',
    Rural: 'Rural',
    SemiDetached: 'SemiDetached',
    SpecialistFarm: 'SpecialistFarm',
    Studio: 'Studio',
    Terrace: 'Terrace',
    Townhouse: 'Townhouse',
    VacantLand: 'VacantLand',
    Villa: 'Villa',
    Cropping: 'Cropping',
    Viticulture: 'Viticulture',
    MixedFarming: 'MixedFarming',
    Grazing: 'Grazing',
    Horticulture: 'Horticulture',
    Equine: 'Equine',
    Farmlet: 'Farmlet',
    Orchard: 'Orchard',
    RuralLifestyle: 'RuralLifestyle'
};
exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyFeaturesEnum = {
    AirConditioning: 'AirConditioning',
    BuiltInWardrobes: 'BuiltInWardrobes',
    CableOrSatellite: 'CableOrSatellite',
    Ensuite: 'Ensuite',
    Floorboards: 'Floorboards',
    Gas: 'Gas',
    InternalLaundry: 'InternalLaundry',
    PetsAllowed: 'PetsAllowed',
    SecureParking: 'SecureParking',
    SwimmingPool: 'SwimmingPool',
    Furnished: 'Furnished',
    GroundFloor: 'GroundFloor',
    WaterViews: 'WaterViews',
    NorthFacing: 'NorthFacing',
    CityViews: 'CityViews',
    IndoorSpa: 'IndoorSpa',
    Gym: 'Gym',
    AlarmSystem: 'AlarmSystem',
    Intercom: 'Intercom',
    BroadbandInternetAccess: 'BroadbandInternetAccess',
    Bath: 'Bath',
    Fireplace: 'Fireplace',
    SeparateDiningRoom: 'SeparateDiningRoom',
    Heating: 'Heating',
    Dishwasher: 'Dishwasher',
    Study: 'Study',
    TennisCourt: 'TennisCourt',
    Shed: 'Shed',
    FullyFenced: 'FullyFenced',
    BalconyDeck: 'BalconyDeck',
    GardenCourtyard: 'GardenCourtyard',
    OutdoorSpa: 'OutdoorSpa',
    DoubleGlazedWindows: 'DoubleGlazedWindows',
    EnergyEfficientAppliances: 'EnergyEfficientAppliances',
    WaterEfficientAppliances: 'WaterEfficientAppliances',
    WallCeilingInsulation: 'WallCeilingInsulation',
    RainwaterStorageTank: 'RainwaterStorageTank',
    GreywaterSystem: 'GreywaterSystem',
    WaterEfficientFixtures: 'WaterEfficientFixtures',
    SolarHotWater: 'SolarHotWater',
    SolarPanels: 'SolarPanels'
};
exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersListingAttributesEnum = {
    HasPhotos: 'HasPhotos',
    HasPrice: 'HasPrice',
    NotUpForAuction: 'NotUpForAuction',
    NotUnderContract: 'NotUnderContract',
    MarkedAsNew: 'MarkedAsNew'
};
exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParametersPropertyEstablishedTypeEnum = {
    Any: 'Any',
    New: 'New',
    Established: 'Established'
};
exports.DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQueryCriteriaEnum = {
    Include: 'Include',
    Exclude: 'Exclude'
};
exports.DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBySortKeyEnum = {
    Default: 'Default',
    Suburb: 'Suburb',
    Price: 'Price',
    DateUpdated: 'DateUpdated',
    InspectionTime: 'InspectionTime',
    AuctionTime: 'AuctionTime',
    Proximity: 'Proximity',
    SoldDate: 'SoldDate',
    DefaultThenDateUpdated: 'DefaultThenDateUpdated',
    DateAvailable: 'DateAvailable',
    DateListed: 'DateListed'
};
exports.DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortByDirectionEnum = {
    Ascending: 'Ascending',
    Descending: 'Descending'
};
exports.EnquiriesV1EnquiryReportDeliveryMethodEnum = {
    Email: 'email',
    Sms: 'sms'
};
exports.EnquiriesV1EnquiryReportEnquiryTypeEnum = {
    Listing: 'listing',
    DevProject: 'devProject',
    NewDevLanding: 'newDevLanding',
    AgencyProfile: 'agencyProfile',
    AgentProfile: 'agentProfile',
    ContractRequest: 'contractRequest',
    VendorEnquiry: 'vendorEnquiry',
    PrePortalListing: 'prePortalListing'
};
exports.EnquiriesV1RecipientRecipientTypeEnum = {
    Primary: 'primary',
    Secondary: 'secondary',
    Hidden: 'hidden'
};
exports.EnquiriesV1RecipientDeliveryStatusDeliveryStatusEnum = {
    Queued: 'queued',
    Delivered: 'delivered',
    Failed: 'failed',
    Deferred: 'deferred'
};
exports.ListingAdminV2AddressDisplayOptionEnum = {
    Unspecified: 'unspecified',
    FullAddress: 'fullAddress',
    StreetAndSuburb: 'streetAndSuburb',
    SuburbOnly: 'suburbOnly',
    RegionOnly: 'regionOnly',
    AreaOnly: 'areaOnly',
    StateOnly: 'stateOnly'
};
exports.ListingAdminV2AddressStateEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Act: 'act',
    Sa: 'sa',
    Wa: 'wa',
    Tas: 'tas',
    Qld: 'qld',
    Nt: 'nt'
};
exports.ListingAdminV2AreaUnitEnum = {
    SquareMetres: 'squareMetres',
    Acres: 'acres',
    Hectares: 'hectares',
    SquareFeet: 'squareFeet',
    SquareYards: 'squareYards',
    Squares: 'squares'
};
exports.ListingAdminV2BusinessOffMarketListingListingActionEnum = {
    Sale: 'sale',
    Rent: 'rent'
};
exports.ListingAdminV2BusinessOffMarketPropertyPropertyTypeEnum = {
    AccessoriesParts: 'accessoriesParts',
    AccommodationTourism: 'accommodationTourism',
    Accounting: 'accounting',
    Adult: 'adult',
    AdvertisingMarketing: 'advertisingMarketing',
    Aerial: 'aerial',
    Aeronautical: 'aeronautical',
    AgedCare: 'agedCare',
    Agricultural: 'agricultural',
    Air: 'air',
    Aircraft: 'aircraft',
    Alarms: 'alarms',
    AlcoholLiquor: 'alcoholLiquor',
    Amusements: 'amusements',
    AnimalRelated: 'animalRelated',
    Aquaculture: 'aquaculture',
    AquaticMarineMarinaBerth: 'aquaticMarineMarinaBerth',
    ArtsCrafts: 'artsCrafts',
    AutoElectrical: 'autoElectrical',
    Automotive: 'automotive',
    BackpackerHostel: 'backpackerHostel',
    Bakery: 'bakery',
    BarsNightclubs: 'barsNightclubs',
    BeautyHealth: 'beautyHealth',
    BeautyProducts: 'beautyProducts',
    BeautySalon: 'beautySalon',
    BikeAndMotorcycle: 'bikeAndMotorcycle',
    BoardingKennels: 'boardingKennels',
    BoatsMarineMarinaBerth: 'boatsMarineMarinaBerth',
    Bookkeeping: 'bookkeeping',
    Brokerage: 'brokerage',
    Builder: 'builder',
    BuildingAndConstruction: 'buildingAndConstruction',
    Bus: 'bus',
    Butcher: 'butcher',
    CafeCoffeeShop: 'cafeCoffeeShop',
    Car: 'car',
    CarBusTruck: 'carBusTruck',
    CarDealership: 'carDealership',
    CarRental: 'carRental',
    CarWash: 'carWash',
    CaravanPark: 'caravanPark',
    Carpenter: 'carpenter',
    Catering: 'catering',
    ChildCare: 'childCare',
    Civil: 'civil',
    Cleaning: 'cleaning',
    CleaningAndMaintenance: 'cleaningAndMaintenance',
    ClinicalPractice: 'clinicalPractice',
    ClothingAccessories: 'clothingAccessories',
    ClothingFootwear: 'clothingFootwear',
    Communication: 'communication',
    Communications: 'communications',
    ComputerIt: 'computerIT',
    ComputerAndInternet: 'computerAndInternet',
    Construction: 'construction',
    ConvenienceStore: 'convenienceStore',
    CopyLaminate: 'copyLaminate',
    Courier: 'courier',
    CropHarvesting: 'cropHarvesting',
    Customs: 'customs',
    DairyFarming: 'dairyFarming',
    Deli: 'deli',
    Dental: 'dental',
    Detailing: 'detailing',
    Distributors: 'distributors',
    DrivingSchools: 'drivingSchools',
    EducationTraining: 'educationTraining',
    Educational: 'educational',
    Electrical: 'electrical',
    EmploymentRecruitment: 'employmentRecruitment',
    Entertainment: 'entertainment',
    EntertainmentTechnology: 'entertainmentTechnology',
    Export: 'export',
    Farming: 'farming',
    Fertiliser: 'fertiliser',
    Finance: 'finance',
    FinancialServices: 'financialServices',
    FishingForestry: 'fishingForestry',
    FloristNursery: 'floristNursery',
    FoodBeverage: 'foodBeverage',
    FoodBeverageHospitality: 'foodBeverageHospitality',
    FranchiseBusinessOpportunities: 'franchiseBusinessOpportunities',
    Freight: 'freight',
    FruitVegFreshProduce: 'fruitVegFreshProduce',
    FruitPicking: 'fruitPicking',
    FunctionCentre: 'functionCentre',
    FurnitureTimber: 'furnitureTimber',
    Gambling: 'gambling',
    GardenHousehold: 'gardenHousehold',
    GardenNurseries: 'gardenNurseries',
    Gardening: 'gardening',
    GlassCeramic: 'glassCeramic',
    GuestHouseBb: 'guestHouseBB',
    Hairdresser: 'hairdresser',
    HealthBeauty: 'healthBeauty',
    HealthSpa: 'healthSpa',
    Hire: 'hire',
    HomeGarden: 'homeGarden',
    HomeBased: 'homeBased',
    HomewareHardware: 'homewareHardware',
    Hospital: 'hospital',
    Hotel: 'hotel',
    HuntingTrap: 'huntingTrap',
    Import: 'import',
    ImportExportWholesale: 'importExportWholesale',
    IndustrialManufacturing: 'industrialManufacturing',
    Insemination: 'insemination',
    Insurance: 'insurance',
    Internet: 'internet',
    IrrigationServices: 'irrigationServices',
    JuiceBar: 'juiceBar',
    LandClearing: 'landClearing',
    Landscaping: 'landscaping',
    LaundryDryCleaning: 'laundryDryCleaning',
    Legal: 'legal',
    LeisureEntertainment: 'leisureEntertainment',
    LimousineTaxi: 'limousineTaxi',
    Livestock: 'livestock',
    Machinery: 'machinery',
    MachineryMetal: 'machineryMetal',
    ManagementRights: 'managementRights',
    Manufacturers: 'manufacturers',
    ManufacturingEngineering: 'manufacturingEngineering',
    Marine: 'marine',
    Massage: 'massage',
    MechanicalRepair: 'mechanicalRepair',
    Media: 'media',
    Medical: 'medical',
    MedicalPractice: 'medicalPractice',
    MiningEarthMoving: 'miningEarthMoving',
    MobileServices: 'mobileServices',
    Motel: 'motel',
    Motorcycle: 'motorcycle',
    MusicRelated: 'musicRelated',
    Mustering: 'mustering',
    Nails: 'nails',
    NaturalTherapies: 'naturalTherapies',
    Newsagency: 'newsagency',
    Nursery: 'nursery',
    NursingHome: 'nursingHome',
    OfficeSupplies: 'officeSupplies',
    OilGas: 'oilGas',
    PanelBeating: 'panelBeating',
    PaperPrinting: 'paperPrinting',
    ParkingCarSpace: 'parkingCarSpace',
    PestRelated: 'pestRelated',
    Pharmacies: 'pharmacies',
    Plastic: 'plastic',
    Plumbing: 'plumbing',
    PoolWater: 'poolWater',
    PostOffices: 'postOffices',
    PrintPhoto: 'printPhoto',
    Professional: 'professional',
    PropertyRealEstate: 'propertyRealEstate',
    Rail: 'rail',
    RecreationSport: 'recreationSport',
    Recruitment: 'recruitment',
    Repair: 'repair',
    Resort: 'resort',
    Restaurant: 'restaurant',
    Retail: 'retail',
    Retailer: 'retailer',
    Retirement: 'retirement',
    RetirementVillage: 'retirementVillage',
    Road: 'road',
    Rural: 'rural',
    Scientific: 'scientific',
    Sea: 'sea',
    Security: 'security',
    ServiceStation: 'serviceStation',
    Services: 'services',
    Shearing: 'shearing',
    SportsComplexGym: 'sportsComplexGym',
    Supermarket: 'supermarket',
    TakeawayFood: 'takeawayFood',
    Taxi: 'taxi',
    ThemePark: 'themePark',
    Tours: 'tours',
    Training: 'training',
    TransportDistribution: 'transportDistribution',
    Travel: 'travel',
    Truck: 'truck',
    Vending: 'vending',
    Water: 'water',
    Welding: 'welding',
    Wholesale: 'wholesale',
    Wholesalers: 'wholesalers',
    WoolClassing: 'woolClassing',
    Wreckers: 'wreckers',
    AlcoholGrocery: 'alcoholGrocery',
    CafeRestaurants: 'cafeRestaurants',
    DiscountStore: 'discountStore',
    EcoFriendly: 'ecoFriendly',
    Green: 'green',
    Grocery: 'grocery',
    SpecialityRetail: 'specialityRetail',
    Storage: 'storage',
    TravelAgency: 'travelAgency',
    VarietyStore: 'varietyStore',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
};
exports.ListingAdminV2CommercialListingV2OccupancyTypeEnum = {
    Tenanted: 'tenanted',
    Vacant: 'vacant'
};
exports.ListingAdminV2CommercialListingV2ListingActionEnum = {
    Sale: 'sale',
    Rent: 'rent',
    SaleAndLease: 'saleAndLease'
};
exports.ListingAdminV2CommercialListingV2ContactPreferenceEnum = {
    ByPhone: 'byPhone'
};
exports.ListingAdminV2CommercialOffMarketListingListingActionEnum = {
    Sale: 'sale',
    Rent: 'rent'
};
exports.ListingAdminV2CommercialOffMarketPropertyPropertyTypeEnum = {
    Aquaculture: 'aquaculture',
    DairyFarming: 'dairyFarming',
    DevelopmentLand: 'developmentLand',
    FishingForestry: 'fishingForestry',
    HotelLeisure: 'hotelLeisure',
    IndustrialWarehouse: 'industrialWarehouse',
    IrrigationServices: 'irrigationServices',
    Livestock: 'livestock',
    InternationalCommercial: 'internationalCommercial',
    MedicalConsulting: 'medicalConsulting',
    Offices: 'offices',
    ParkingCarSpace: 'parkingCarSpace',
    Retail: 'retail',
    RuralCommercialFarming: 'ruralCommercialFarming',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle'
};
exports.ListingAdminV2CommercialOffMarketPropertyBuildingTypeEnum = {
    Whole: 'whole',
    Part: 'part',
    NA: 'nA'
};
exports.ListingAdminV2CommercialPricePriceUnitTypeEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
};
exports.ListingAdminV2CommercialPricePriceTypeEnum = {
    Gross: 'gross',
    Net: 'net'
};
exports.ListingAdminV2CommercialPriceGstOptionTypeEnum = {
    NA: 'nA',
    Inc: 'inc',
    Ex: 'ex'
};
exports.ListingAdminV2CommercialPropertyPropertyTypeEnum = {
    Aquaculture: 'aquaculture',
    DairyFarming: 'dairyFarming',
    DevelopmentLand: 'developmentLand',
    FishingForestry: 'fishingForestry',
    HotelLeisure: 'hotelLeisure',
    IndustrialWarehouse: 'industrialWarehouse',
    IrrigationServices: 'irrigationServices',
    Livestock: 'livestock',
    InternationalCommercial: 'internationalCommercial',
    MedicalConsulting: 'medicalConsulting',
    Offices: 'offices',
    ParkingCarSpace: 'parkingCarSpace',
    Retail: 'retail',
    RuralCommercialFarming: 'ruralCommercialFarming',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle'
};
exports.ListingAdminV2CommercialPropertyBuildingTypeEnum = {
    Whole: 'whole',
    Part: 'part',
    NA: 'nA'
};
exports.ListingAdminV2LandAreaUnitEnum = {
    SquareMetres: 'squareMetres',
    Acres: 'acres',
    Hectares: 'hectares',
    SquareFeet: 'squareFeet',
    SquareYards: 'squareYards',
    Squares: 'squares'
};
exports.ListingAdminV2ListingResponseProcessStatusEnum = {
    Queued: 'queued',
    Processing: 'processing',
    Processed: 'processed',
    Searchable: 'searchable',
    Failed: 'failed',
    Error: 'error'
};
exports.ListingAdminV2OffMarketDetailsBaseOffMarketActionEnum = {
    WithDrawn: 'withDrawn',
    Sold: 'sold',
    Leased: 'leased'
};
exports.ListingAdminV2ParkingParkingTypeEnum = {
    OnSite: 'onSite',
    OnStreet: 'onStreet',
    NoParking: 'noParking'
};
exports.ListingAdminV2ParkingDetailsParkingTypeEnum = {
    OnSite: 'onSite',
    OnStreet: 'onStreet',
    NoParking: 'noParking',
    Garage: 'garage',
    Carport: 'carport',
    Outdoor: 'outdoor'
};
exports.ListingAdminV2PropertyMediaResourceTypeEnum = {
    Photograph: 'photograph',
    FloorPlan: 'floorPlan',
    Video: 'video',
    VirtualTour: 'virtualTour',
    WebLink: 'webLink'
};
exports.ListingAdminV2PropertyPdfTypeEnum = {
    CommercialPdf: 'commercialPdf',
    NewDevBrochurePdf: 'newDevBrochurePdf',
    FloorplanPdf: 'floorplanPdf',
    DevProjectPdf: 'devProjectPdf',
    DevProjectMasterplanPdf: 'devProjectMasterplanPdf'
};
exports.ListingAdminV2ResidentialOffMarketListingListingActionEnum = {
    Sale: 'sale',
    Rent: 'rent'
};
exports.ListingAdminV2ResidentialOffMarketPropertyPropertyTypeEnum = {
    AcreageSemiRural: 'acreageSemiRural',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    BlockOfUnits: 'blockOfUnits',
    CarSpace: 'carSpace',
    DairyFarming: 'dairyFarming',
    DevelopmentSite: 'developmentSite',
    Duplex: 'duplex',
    Farm: 'farm',
    FishingForestry: 'fishingForestry',
    NewHomeDesigns: 'newHomeDesigns',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    IrrigationServices: 'irrigationServices',
    NewLand: 'newLand',
    Livestock: 'livestock',
    NewApartments: 'newApartments',
    Penthouse: 'penthouse',
    Retirement: 'retirement',
    Rural: 'rural',
    SemiDetached: 'semiDetached',
    SpecialistFarm: 'specialistFarm',
    Studio: 'studio',
    Terrace: 'terrace',
    Townhouse: 'townhouse',
    VacantLand: 'vacantLand',
    Villa: 'villa',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle'
};
exports.ListingAdminV2SoldDetailsSoldTypeEnum = {
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    PriorToAuction: 'priorToAuction'
};
exports.ListingAdminV2SpecificUnitDetailOccupancyEnum = {
    Tenanted: 'tenanted',
    Vacant: 'vacant'
};
exports.ListingAdminV2SpecificUnitDetailPriceUnitEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
};
exports.ListingAdminV2SupplementaryMetadataMeasurementUnitEnum = {
    SquareMetres: 'squareMetres',
    Hectares: 'hectares',
    Millimetres: 'millimetres',
    Dse: 'dse'
};
exports.ListingsV1AddressPartsStateAbbreviationEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Sa: 'sa',
    Nt: 'nt',
    Tas: 'tas',
    Act: 'act',
    Qld: 'qld',
    Wa: 'wa'
};
exports.ListingsV1AddressPartsDisplayTypeEnum = {
    FullAddress: 'fullAddress',
    StreetAndSuburb: 'streetAndSuburb',
    SuburbOnly: 'suburbOnly',
    RegionOnly: 'regionOnly',
    AreaOnly: 'areaOnly',
    StateOnly: 'stateOnly'
};
exports.ListingsV1AdvertiserIdentifiersAdvertiserTypeEnum = {
    Agency: 'agency',
    Private: 'private'
};
exports.ListingsV1InspectionRecurrenceEnum = {
    None: 'none',
    Weekly: 'weekly'
};
exports.ListingsV1ListingObjectiveEnum = {
    Sale: 'sale',
    Rent: 'rent'
};
exports.ListingsV1ListingStatusEnum = {
    Unknown: 'unknown',
    Archived: 'archived',
    UnderOffer: 'underOffer',
    Sold: 'sold',
    Leased: 'leased',
    NewDevelopment: 'newDevelopment',
    RecentlyUpdated: 'recentlyUpdated',
    New: 'new',
    Live: 'live',
    Pending: 'pending',
    DepositTaken: 'depositTaken'
};
exports.ListingsV1ListingSaleModeEnum = {
    Buy: 'buy',
    Rent: 'rent',
    Share: 'share',
    Sold: 'sold',
    Leased: 'leased',
    Archived: 'archived'
};
exports.ListingsV1ListingChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
};
exports.ListingsV1ListingPropertyTypesEnum = {
    Unknown: 'unknown',
    AcreageSemiRural: 'acreageSemiRural',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    BlockOfUnits: 'blockOfUnits',
    Carspace: 'carspace',
    DairyFarming: 'dairyFarming',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Duplex: 'duplex',
    Farm: 'farm',
    FishingForestry: 'fishingForestry',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HotelLeisure: 'hotelLeisure',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    IndustrialWarehouse: 'industrialWarehouse',
    IrrigationServices: 'irrigationServices',
    NewLand: 'newLand',
    Livestock: 'livestock',
    International: 'international',
    MedicalConsulting: 'medicalConsulting',
    NewApartments: 'newApartments',
    Offices: 'offices',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    Retail: 'retail',
    Retirement: 'retirement',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    SemiDetached: 'semiDetached',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    Studio: 'studio',
    Terrace: 'terrace',
    Townhouse: 'townhouse',
    VacantLand: 'vacantLand',
    Villa: 'villa',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
};
exports.ListingsV1ListingMediaCategoryEnum = {
    Image: 'image',
    Video: 'video',
    Others: 'others'
};
exports.ListingsV1ListingMediaTypeEnum = {
    Photo: 'photo',
    Mp4: 'mp4',
    Youtube: 'youtube',
    Floorplan: 'floorplan',
    Vimeo: 'vimeo',
    NotSpecified: 'notSpecified'
};
exports.ListingsV1MedianPriceDataPriceTypeEnum = {
    House: 'house',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    VacantLand: 'vacantLand'
};
exports.ListingsV1PriceDetailsGstOptionEnum = {
    Na: 'na',
    Inc: 'inc',
    Ex: 'ex'
};
exports.ListingsV1PriceDetailsPriceTypeEnum = {
    Gross: 'gross',
    Net: 'net'
};
exports.ListingsV1PriceDetailsPriceUnitEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
};
exports.ListingsV1PriceDetailsHiddenReasonsEnum = {
    ByAgency: 'byAgency',
    QldRestriction: 'qldRestriction'
};
exports.ListingsV1RentalDetailsRentalMethodEnum = {
    NotStated: 'notStated',
    Rent: 'rent',
    Share: 'share',
    Holiday: 'holiday',
    Lease: 'lease'
};
exports.ListingsV1RentalDetailsSourceEnum = {
    Internal: 'internal',
    External: 'external'
};
exports.ListingsV1SaleDetailsSaleMethodEnum = {
    NotStated: 'notStated',
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    Tender: 'tender',
    ExpressionOfInterest: 'expressionOfInterest'
};
exports.ListingsV1SoldDetailsSoldActionEnum = {
    NotStated: 'notStated',
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    Withdrawn: 'withdrawn',
    SoldPriorToAuction: 'soldPriorToAuction'
};
exports.ListingsV1SoldDetailsSourceEnum = {
    Internal: 'internal',
    External: 'external'
};
exports.ListingsV2AddressPartsStateAbbreviationEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Sa: 'sa',
    Nt: 'nt',
    Tas: 'tas',
    Act: 'act',
    Qld: 'qld',
    Wa: 'wa'
};
exports.ListingsV2AddressPartsDisplayTypeEnum = {
    FullAddress: 'fullAddress',
    StreetAndSuburb: 'streetAndSuburb',
    SuburbOnly: 'suburbOnly',
    RegionOnly: 'regionOnly',
    AreaOnly: 'areaOnly',
    StateOnly: 'stateOnly'
};
exports.ListingsV2AdvertiserIdentifiersAdvertiserTypeEnum = {
    Agency: 'agency',
    Private: 'private'
};
exports.ListingsV2InspectionRecurrenceEnum = {
    None: 'none',
    Weekly: 'weekly'
};
exports.ListingsV2ListingObjectiveEnum = {
    Sale: 'sale',
    Rent: 'rent'
};
exports.ListingsV2ListingStatusEnum = {
    Unknown: 'unknown',
    Archived: 'archived',
    UnderOffer: 'underOffer',
    Sold: 'sold',
    Leased: 'leased',
    NewDevelopment: 'newDevelopment',
    RecentlyUpdated: 'recentlyUpdated',
    New: 'new',
    Live: 'live',
    Pending: 'pending',
    DepositTaken: 'depositTaken'
};
exports.ListingsV2ListingSaleModeEnum = {
    Buy: 'buy',
    Rent: 'rent',
    Share: 'share',
    Sold: 'sold',
    Leased: 'leased',
    Archived: 'archived'
};
exports.ListingsV2ListingChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
};
exports.ListingsV2ListingPropertyTypesEnum = {
    Unknown: 'unknown',
    AcreageSemiRural: 'acreageSemiRural',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    BlockOfUnits: 'blockOfUnits',
    Carspace: 'carspace',
    DairyFarming: 'dairyFarming',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Duplex: 'duplex',
    Farm: 'farm',
    FishingForestry: 'fishingForestry',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HotelLeisure: 'hotelLeisure',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    IndustrialWarehouse: 'industrialWarehouse',
    IrrigationServices: 'irrigationServices',
    NewLand: 'newLand',
    Livestock: 'livestock',
    International: 'international',
    MedicalConsulting: 'medicalConsulting',
    NewApartments: 'newApartments',
    Offices: 'offices',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    Retail: 'retail',
    Retirement: 'retirement',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    SemiDetached: 'semiDetached',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    Studio: 'studio',
    Terrace: 'terrace',
    Townhouse: 'townhouse',
    VacantLand: 'vacantLand',
    Villa: 'villa',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
};
exports.ListingsV2ListingMediaCategoryEnum = {
    Image: 'image',
    Video: 'video',
    Others: 'others'
};
exports.ListingsV2ListingMediaTypeEnum = {
    Photo: 'photo',
    Mp4: 'mp4',
    Youtube: 'youtube',
    Floorplan: 'floorplan',
    Vimeo: 'vimeo',
    NotSpecified: 'notSpecified'
};
exports.ListingsV2MedianPriceDataPriceTypeEnum = {
    House: 'house',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    VacantLand: 'vacantLand'
};
exports.ListingsV2PdfUploadTypeEnum = {
    CommercialPdf: 'commercialPdf',
    NewDevBrochurePdf: 'newDevBrochurePdf',
    FloorplanPdf: 'floorplanPdf',
    DevProjectPdf: 'devProjectPdf',
    DevProjectMasterplanPdf: 'devProjectMasterplanPdf'
};
exports.ListingsV2PriceDetailsGstOptionEnum = {
    Na: 'na',
    Inc: 'inc',
    Ex: 'ex'
};
exports.ListingsV2PriceDetailsPriceTypeEnum = {
    Gross: 'gross',
    Net: 'net'
};
exports.ListingsV2PriceDetailsPriceUnitEnum = {
    TotalAmount: 'totalAmount',
    PerSqm: 'perSqm'
};
exports.ListingsV2PriceDetailsHiddenReasonsEnum = {
    ByAgency: 'byAgency',
    QldRestriction: 'qldRestriction'
};
exports.ListingsV2ProjectProjectProfileTypeEnum = {
    NoProfile: 'noProfile',
    ProjectProfileStandard: 'projectProfileStandard',
    ProjectProfilePremium: 'projectProfilePremium'
};
exports.ListingsV2ProjectEstimatedCompletionTertileEnum = {
    Early: 'early',
    Mid: 'mid',
    Late: 'late'
};
exports.ListingsV2ProjectCategoryEnum = {
    HouseAndLand: 'houseAndLand',
    Apartment: 'apartment',
    Retirement: 'retirement'
};
exports.ListingsV2ProjectPropertyTypesEnum = {
    Unknown: 'unknown',
    AcreageSemiRural: 'acreageSemiRural',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    Aquaculture: 'aquaculture',
    BlockOfUnits: 'blockOfUnits',
    Carspace: 'carspace',
    DairyFarming: 'dairyFarming',
    DevelopmentLand: 'developmentLand',
    DevelopmentSite: 'developmentSite',
    Duplex: 'duplex',
    Farm: 'farm',
    FishingForestry: 'fishingForestry',
    HomeBased: 'homeBased',
    NewHomeDesigns: 'newHomeDesigns',
    HotelLeisure: 'hotelLeisure',
    House: 'house',
    NewHouseLand: 'newHouseLand',
    IndustrialWarehouse: 'industrialWarehouse',
    IrrigationServices: 'irrigationServices',
    NewLand: 'newLand',
    Livestock: 'livestock',
    International: 'international',
    MedicalConsulting: 'medicalConsulting',
    NewApartments: 'newApartments',
    Offices: 'offices',
    ParkingCarSpace: 'parkingCarSpace',
    Penthouse: 'penthouse',
    Retail: 'retail',
    Retirement: 'retirement',
    Rural: 'rural',
    RuralCommercialFarming: 'ruralCommercialFarming',
    SemiDetached: 'semiDetached',
    ShowroomsBulkyGoods: 'showroomsBulkyGoods',
    SpecialistFarm: 'specialistFarm',
    Studio: 'studio',
    Terrace: 'terrace',
    Townhouse: 'townhouse',
    VacantLand: 'vacantLand',
    Villa: 'villa',
    ServicedOffices: 'servicedOffices',
    Other: 'other',
    ChickenShop: 'chickenShop',
    SeafoodShop: 'seafoodShop',
    DeliCafe: 'deliCafe',
    Cropping: 'cropping',
    Viticulture: 'viticulture',
    MixedFarming: 'mixedFarming',
    Grazing: 'grazing',
    Horticulture: 'horticulture',
    Equine: 'equine',
    Farmlet: 'farmlet',
    Orchard: 'orchard',
    RuralLifestyle: 'ruralLifestyle',
    OnlineBusiness: 'onlineBusiness'
};
exports.ListingsV2ProjectAddressPartsStateAbbreviationEnum = {
    Nsw: 'nsw',
    Vic: 'vic',
    Sa: 'sa',
    Nt: 'nt',
    Tas: 'tas',
    Act: 'act',
    Qld: 'qld',
    Wa: 'wa'
};
exports.ListingsV2ProjectAddressPartsDisplayTypeEnum = {
    FullAddress: 'fullAddress',
    StreetAndSuburb: 'streetAndSuburb',
    SuburbOnly: 'suburbOnly',
    RegionOnly: 'regionOnly',
    AreaOnly: 'areaOnly',
    StateOnly: 'stateOnly'
};
exports.ListingsV2ProjectMediaCategoryEnum = {
    Image: 'image',
    Video: 'video',
    Others: 'others'
};
exports.ListingsV2ProjectMediaTypeEnum = {
    Photo: 'photo',
    Poster: 'poster',
    Video: 'video',
    VirtualTour: 'virtualTour',
    WebLink: 'webLink'
};
exports.ListingsV2RentalDetailsRentalMethodEnum = {
    NotStated: 'notStated',
    Rent: 'rent',
    Share: 'share',
    Holiday: 'holiday',
    Lease: 'lease'
};
exports.ListingsV2RentalDetailsSourceEnum = {
    Internal: 'internal',
    External: 'external'
};
exports.ListingsV2SaleDetailsSaleMethodEnum = {
    NotStated: 'notStated',
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    Tender: 'tender',
    ExpressionOfInterest: 'expressionOfInterest'
};
exports.ListingsV2SoldDetailsSoldActionEnum = {
    NotStated: 'notStated',
    Auction: 'auction',
    PrivateTreaty: 'privateTreaty',
    Withdrawn: 'withdrawn',
    SoldPriorToAuction: 'soldPriorToAuction'
};
exports.ListingsV2SoldDetailsSourceEnum = {
    Internal: 'internal',
    External: 'external'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.PreMarketV1AuthorityType = {
    PrivateSale: 'privateSale',
    Auction: 'auction',
    ExpressionOfInterest: 'expressionOfInterest'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.PreMarketV1OperationType = {
    Add: 'add',
    Remove: 'remove',
    Replace: 'replace',
    Move: 'move',
    Copy: 'copy',
    Test: 'test',
    Invalid: 'invalid'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.PreMarketV1PrePortalListingStatus = {
    PreMarket: 'preMarket',
    Sold: 'sold',
    Listed: 'listed',
    Withdrawn: 'withdrawn',
    Draft: 'draft'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.PreMarketV1PropertyType = {
    House: 'house',
    Townhouse: 'townhouse',
    ApartmentUnitFlat: 'apartmentUnitFlat',
    VacantLand: 'vacantLand'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.PreMarketV1ResourceType = {
    Photograph: 'photograph',
    FloorPlan: 'floorPlan'
};
/**
 * Australian states
 * @export
 * @enum {string}
 */
exports.PreMarketV1State = {
    Nsw: 'nsw',
    Vic: 'vic',
    Act: 'act',
    Sa: 'sa',
    Wa: 'wa',
    Tas: 'tas',
    Qld: 'qld',
    Nt: 'nt'
};
exports.PropertiesV1AdvertOnMarketTypesEnum = {
    Unknown: 'Unknown',
    Rent: 'Rent',
    Sale: 'Sale',
    Share: 'Share'
};
exports.PropertiesV1ClaimDataClaimantEnum = {
    Owner: 'Owner',
    Tenant: 'Tenant',
    Investor: 'Investor',
    Unspecified: 'Unspecified'
};
exports.PropertiesV1PhotoImageTypeEnum = {
    Property: 'Property',
    Floorplan: 'Floorplan',
    GoogleStreetView: 'GoogleStreetView'
};
exports.PropertiesV1PropertyCadastreTypeEnum = {
    Point: 'Point',
    MultiPoint: 'MultiPoint',
    LineString: 'LineString',
    MultiLineString: 'MultiLineString',
    Polygon: 'Polygon',
    MultiPolygon: 'MultiPolygon',
    GeometryCollection: 'GeometryCollection',
    Feature: 'Feature',
    FeatureCollection: 'FeatureCollection'
};
exports.PropertiesV1PropertyOnMarketTypesEnum = {
    Unknown: 'Unknown',
    Rent: 'Rent',
    Sale: 'Sale',
    Share: 'Share'
};
exports.PropertiesV1PropertyStatusEnum = {
    OffMarket: 'OffMarket',
    OnMarket: 'OnMarket'
};
exports.PropertyEnrichmentV1PropertyActivitySummaryOwnerRenterEnum = {
    Owner: 'owner',
    Renter: 'renter'
};
exports.SchoolsV2SchoolSchoolSectorEnum = {
    Catholic: 'Catholic',
    Government: 'Government',
    Independent: 'Independent'
};
exports.SchoolsV2SchoolSchoolTypeEnum = {
    Combined: 'Combined',
    Primary: 'Primary',
    Secondary: 'Secondary',
    Special: 'Special'
};
exports.SchoolsV2SchoolGenderEnum = {
    Boys: 'Boys',
    Girls: 'Girls',
    CoEd: 'CoEd'
};
exports.SchoolsV2SchoolCatchmentTypeEnum = {
    Primary: 'Primary',
    Secondary: 'Secondary'
};
exports.SocialBoostV1ListingRateInfoProductListingLevelEnum = {
    None: 'None',
    PlatinumExtend: 'PlatinumExtend',
    Platinum: 'Platinum',
    Gold: 'Gold',
    Silver: 'Silver',
    Branded: 'Branded',
    Tier1: 'Tier1',
    Tier2: 'Tier2',
    Tier3: 'Tier3'
};
exports.SocialBoostV1ListingRateInfoProductListingRuleEnum = {
    None: 'None',
    EarlyAccess: 'EarlyAccess',
    SocialBoostAll: 'SocialBoostAll',
    SocialBoostCasual: 'SocialBoostCasual',
    SocialBoostRuralAll: 'SocialBoostRuralAll',
    SocialBoostRuralCasual: 'SocialBoostRuralCasual',
    SocialBoostAgent: 'SocialBoostAgent',
    SocialBoostRuralAgent: 'SocialBoostRuralAgent'
};
exports.SocialBoostV1RateForNewSocialBoostReasonEnum = {
    BasedOnContract: 'BasedOnContract',
    NoContractFound: 'NoContractFound',
    NoRateFound: 'NoRateFound',
    PropertyTypeExcluded: 'PropertyTypeExcluded'
};
exports.SocialBoostV1RateForNewSocialBoostRequestModelPropertyTypeEnum = {
    Unknown: 'Unknown',
    AcreageSemiRural: 'AcreageSemiRural',
    ApartmentUnitFlat: 'ApartmentUnitFlat',
    Aquaculture: 'Aquaculture',
    BlockOfUnits: 'BlockOfUnits',
    Carspace: 'Carspace',
    DairyFarming: 'DairyFarming',
    DevelopmentSite: 'DevelopmentSite',
    Duplex: 'Duplex',
    Farm: 'Farm',
    FishingForestry: 'FishingForestry',
    NewHomeDesigns: 'NewHomeDesigns',
    House: 'House',
    NewHouseLand: 'NewHouseLand',
    IrrigationServices: 'IrrigationServices',
    NewLand: 'NewLand',
    Livestock: 'Livestock',
    NewApartments: 'NewApartments',
    Penthouse: 'Penthouse',
    Retirement: 'Retirement',
    RetirementVillage: 'RetirementVillage',
    Rural: 'Rural',
    SemiDetached: 'SemiDetached',
    SpecialistFarm: 'SpecialistFarm',
    Studio: 'Studio',
    Terrace: 'Terrace',
    Townhouse: 'Townhouse',
    VacantLand: 'VacantLand',
    Villa: 'Villa',
    Cropping: 'Cropping',
    Viticulture: 'Viticulture',
    MixedFarming: 'MixedFarming',
    Grazing: 'Grazing',
    Horticulture: 'Horticulture',
    Equine: 'Equine',
    Farmlet: 'Farmlet',
    Orchard: 'Orchard',
    RuralLifestyle: 'RuralLifestyle'
};
exports.SocialBoostV1RateForNewSocialBoostRequestModelListingTypeEnum = {
    Sale: 'Sale',
    Rent: 'Rent',
    None: 'None'
};
exports.SocialBoostV1RateForNewSocialBoostRequestModelChannelEnum = {
    Residential: 'Residential',
    Commercial: 'Commercial',
    Business: 'Business'
};
/**
 * AVMApi - axios parameter creator
 * @export
 */
const AVMApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Creates a bank grade valuation and PDF report for a given property address or GnafPId.
         * @param {DomainAvmV1Request} [domainAvmV1Request] The request to get the valuation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        avmGetValuation: (domainAvmV1Request, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/avm/getvaluation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_avm_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_avm_read"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domainAvmV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AVMApiAxiosParamCreator = AVMApiAxiosParamCreator;
/**
 * AVMApi - functional programming interface
 * @export
 */
const AVMApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AVMApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Creates a bank grade valuation and PDF report for a given property address or GnafPId.
         * @param {DomainAvmV1Request} [domainAvmV1Request] The request to get the valuation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        avmGetValuation(domainAvmV1Request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.avmGetValuation(domainAvmV1Request, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AVMApiFp = AVMApiFp;
/**
 * AVMApi - factory interface
 * @export
 */
const AVMApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AVMApiFp)(configuration);
    return {
        /**
         *
         * @summary Creates a bank grade valuation and PDF report for a given property address or GnafPId.
         * @param {DomainAvmV1Request} [domainAvmV1Request] The request to get the valuation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        avmGetValuation(domainAvmV1Request, options) {
            return localVarFp.avmGetValuation(domainAvmV1Request, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AVMApiFactory = AVMApiFactory;
/**
 * AVMApi - object-oriented interface
 * @export
 * @class AVMApi
 * @extends {BaseAPI}
 */
class AVMApi extends base_1.BaseAPI {
    /**
     *
     * @summary Creates a bank grade valuation and PDF report for a given property address or GnafPId.
     * @param {DomainAvmV1Request} [domainAvmV1Request] The request to get the valuation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AVMApi
     */
    avmGetValuation(domainAvmV1Request, options) {
        return (0, exports.AVMApiFp)(this.configuration).avmGetValuation(domainAvmV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AVMApi = AVMApi;
/**
 * AddressLocatorsApi - axios parameter creator
 * @export
 */
const AddressLocatorsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this endpoint to retrieve IDs that may be used to query information from other endpoints.    For example use `id` of the `Suburb` level to query [`demographics`](/docs/v1/apis/pkg_properties_locations/references/demographics_get)
         * @summary Retrieves matching ids for use in other services.
         * @param {string} [searchLevel] Requested search level. Valid values are: &#x60;Address&#x60;, and &#x60;Suburb&#x60;
         * @param {string} [unitNumber] Unit number
         * @param {string} [streetNumber] Street number
         * @param {string} [streetName] Street name
         * @param {string} [streetType] Street type
         * @param {string} [suburb] Suburb
         * @param {string} [state] State
         * @param {string} [postcode] Postcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressLocatorsGet: (searchLevel, unitNumber, streetNumber, streetName, streetType, suburb, state, postcode, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/addressLocators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_addresslocators_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_addresslocators_read"], configuration);
            if (searchLevel !== undefined) {
                localVarQueryParameter['searchLevel'] = searchLevel;
            }
            if (unitNumber !== undefined) {
                localVarQueryParameter['unitNumber'] = unitNumber;
            }
            if (streetNumber !== undefined) {
                localVarQueryParameter['streetNumber'] = streetNumber;
            }
            if (streetName !== undefined) {
                localVarQueryParameter['streetName'] = streetName;
            }
            if (streetType !== undefined) {
                localVarQueryParameter['streetType'] = streetType;
            }
            if (suburb !== undefined) {
                localVarQueryParameter['suburb'] = suburb;
            }
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            if (postcode !== undefined) {
                localVarQueryParameter['postcode'] = postcode;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AddressLocatorsApiAxiosParamCreator = AddressLocatorsApiAxiosParamCreator;
/**
 * AddressLocatorsApi - functional programming interface
 * @export
 */
const AddressLocatorsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AddressLocatorsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Use this endpoint to retrieve IDs that may be used to query information from other endpoints.    For example use `id` of the `Suburb` level to query [`demographics`](/docs/v1/apis/pkg_properties_locations/references/demographics_get)
         * @summary Retrieves matching ids for use in other services.
         * @param {string} [searchLevel] Requested search level. Valid values are: &#x60;Address&#x60;, and &#x60;Suburb&#x60;
         * @param {string} [unitNumber] Unit number
         * @param {string} [streetNumber] Street number
         * @param {string} [streetName] Street name
         * @param {string} [streetType] Street type
         * @param {string} [suburb] Suburb
         * @param {string} [state] State
         * @param {string} [postcode] Postcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressLocatorsGet(searchLevel, unitNumber, streetNumber, streetName, streetType, suburb, state, postcode, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addressLocatorsGet(searchLevel, unitNumber, streetNumber, streetName, streetType, suburb, state, postcode, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AddressLocatorsApiFp = AddressLocatorsApiFp;
/**
 * AddressLocatorsApi - factory interface
 * @export
 */
const AddressLocatorsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AddressLocatorsApiFp)(configuration);
    return {
        /**
         * Use this endpoint to retrieve IDs that may be used to query information from other endpoints.    For example use `id` of the `Suburb` level to query [`demographics`](/docs/v1/apis/pkg_properties_locations/references/demographics_get)
         * @summary Retrieves matching ids for use in other services.
         * @param {string} [searchLevel] Requested search level. Valid values are: &#x60;Address&#x60;, and &#x60;Suburb&#x60;
         * @param {string} [unitNumber] Unit number
         * @param {string} [streetNumber] Street number
         * @param {string} [streetName] Street name
         * @param {string} [streetType] Street type
         * @param {string} [suburb] Suburb
         * @param {string} [state] State
         * @param {string} [postcode] Postcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressLocatorsGet(searchLevel, unitNumber, streetNumber, streetName, streetType, suburb, state, postcode, options) {
            return localVarFp.addressLocatorsGet(searchLevel, unitNumber, streetNumber, streetName, streetType, suburb, state, postcode, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AddressLocatorsApiFactory = AddressLocatorsApiFactory;
/**
 * AddressLocatorsApi - object-oriented interface
 * @export
 * @class AddressLocatorsApi
 * @extends {BaseAPI}
 */
class AddressLocatorsApi extends base_1.BaseAPI {
    /**
     * Use this endpoint to retrieve IDs that may be used to query information from other endpoints.    For example use `id` of the `Suburb` level to query [`demographics`](/docs/v1/apis/pkg_properties_locations/references/demographics_get)
     * @summary Retrieves matching ids for use in other services.
     * @param {string} [searchLevel] Requested search level. Valid values are: &#x60;Address&#x60;, and &#x60;Suburb&#x60;
     * @param {string} [unitNumber] Unit number
     * @param {string} [streetNumber] Street number
     * @param {string} [streetName] Street name
     * @param {string} [streetType] Street type
     * @param {string} [suburb] Suburb
     * @param {string} [state] State
     * @param {string} [postcode] Postcode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressLocatorsApi
     */
    addressLocatorsGet(searchLevel, unitNumber, streetNumber, streetName, streetType, suburb, state, postcode, options) {
        return (0, exports.AddressLocatorsApiFp)(this.configuration).addressLocatorsGet(searchLevel, unitNumber, streetNumber, streetName, streetType, suburb, state, postcode, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AddressLocatorsApi = AddressLocatorsApi;
/**
 * AgenciesApi - axios parameter creator
 * @export
 */
const AgenciesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Enables automatic creation of a test agency in our sandbox environment.
         * @summary Create a test agency for sandbox testing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesCreateTestAgency: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/agencies/_testAgency`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_write"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a specific agency details.
         * @param {number} id Agency identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('agenciesGet', 'id', id);
            const localVarPath = `/v1/agencies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
         * @summary Retrieves listings across all channels for a specific agency matching specified criteria.
         * @param {number} id Agency identifier
         * @param {AgenciesGetListingsListingStatusFilterEnum} [listingStatusFilter] Filter for listing status
         * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGetListings: (id, listingStatusFilter, dateUpdatedSince, pageNumber, pageSize, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('agenciesGetListings', 'id', id);
            const localVarPath = `/v1/agencies/{id}/listings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            if (listingStatusFilter !== undefined) {
                localVarQueryParameter['listingStatusFilter'] = listingStatusFilter;
            }
            if (dateUpdatedSince !== undefined) {
                localVarQueryParameter['dateUpdatedSince'] = (dateUpdatedSince instanceof Date) ?
                    dateUpdatedSince.toISOString() :
                    dateUpdatedSince;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves statistics for a specific agency.
         * @param {number} id Agency identifier
         * @param {AgenciesGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {AgenciesGetStatisticsStatusFilterEnum} [statusFilter] Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60;
         * @param {AgenciesGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
         * @param {number} [pageNumber] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGetStatistics: (id, timePeriod, statusFilter, channel, pageNumber, pageSize, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('agenciesGetStatistics', 'id', id);
            const localVarPath = `/v1/agencies/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }
            if (statusFilter !== undefined) {
                localVarQueryParameter['statusFilter'] = statusFilter;
            }
            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.    See `X-Total-Count` header for result count.
         * @summary Retrieves summary of agency search.
         * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesHead: (q, pageNumber, pageSize, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/agencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'HEAD' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * <br>The ```q``` parameter supports:  <ul>    <li>name: search by name eg. ```name:\"Agency XYZ\"```</li>    <li>providerId: search by providerId. eg. ```providerId:\"ABC Software\"```</li>    <li>domainUrl: search by domainUrl. eg. ```domainUrl:\"agency-xyz\"```</li>    <li>dateUpdated: search by dateUpdated. eg. ```dateUpdated:\"2016-12-25\"```</li>    <li>suburbId: search by suburbId. Lists supported.  eg. ```suburbId:1``` eg. ```suburbId:(1 OR 2 OR 3)```.  Can include related suburbs by adding ```in:related```</li>    <li>accountType: search by account type. Lists supported.  eg. ```accountType:residential``` eg. ```accountType:(residential OR commercial)``` Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business</li>    <li>      ```in:all``` includes archived agencies (archived agencies excluded by default)</li>    <li>      ```-is:selfservice``` excludes selfservice</li>  </ul>
         * @summary Retrieves summary of agencies matching the specified criteria.
         * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesSearch: (q, pageNumber, pageSize, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/agencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AgenciesApiAxiosParamCreator = AgenciesApiAxiosParamCreator;
/**
 * AgenciesApi - functional programming interface
 * @export
 */
const AgenciesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AgenciesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Enables automatic creation of a test agency in our sandbox environment.
         * @summary Create a test agency for sandbox testing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesCreateTestAgency(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.agenciesCreateTestAgency(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a specific agency details.
         * @param {number} id Agency identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.agenciesGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
         * @summary Retrieves listings across all channels for a specific agency matching specified criteria.
         * @param {number} id Agency identifier
         * @param {AgenciesGetListingsListingStatusFilterEnum} [listingStatusFilter] Filter for listing status
         * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGetListings(id, listingStatusFilter, dateUpdatedSince, pageNumber, pageSize, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.agenciesGetListings(id, listingStatusFilter, dateUpdatedSince, pageNumber, pageSize, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves statistics for a specific agency.
         * @param {number} id Agency identifier
         * @param {AgenciesGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {AgenciesGetStatisticsStatusFilterEnum} [statusFilter] Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60;
         * @param {AgenciesGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
         * @param {number} [pageNumber] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.agenciesGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.    See `X-Total-Count` header for result count.
         * @summary Retrieves summary of agency search.
         * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesHead(q, pageNumber, pageSize, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.agenciesHead(q, pageNumber, pageSize, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * <br>The ```q``` parameter supports:  <ul>    <li>name: search by name eg. ```name:\"Agency XYZ\"```</li>    <li>providerId: search by providerId. eg. ```providerId:\"ABC Software\"```</li>    <li>domainUrl: search by domainUrl. eg. ```domainUrl:\"agency-xyz\"```</li>    <li>dateUpdated: search by dateUpdated. eg. ```dateUpdated:\"2016-12-25\"```</li>    <li>suburbId: search by suburbId. Lists supported.  eg. ```suburbId:1``` eg. ```suburbId:(1 OR 2 OR 3)```.  Can include related suburbs by adding ```in:related```</li>    <li>accountType: search by account type. Lists supported.  eg. ```accountType:residential``` eg. ```accountType:(residential OR commercial)``` Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business</li>    <li>      ```in:all``` includes archived agencies (archived agencies excluded by default)</li>    <li>      ```-is:selfservice``` excludes selfservice</li>  </ul>
         * @summary Retrieves summary of agencies matching the specified criteria.
         * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesSearch(q, pageNumber, pageSize, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.agenciesSearch(q, pageNumber, pageSize, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AgenciesApiFp = AgenciesApiFp;
/**
 * AgenciesApi - factory interface
 * @export
 */
const AgenciesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AgenciesApiFp)(configuration);
    return {
        /**
         * Enables automatic creation of a test agency in our sandbox environment.
         * @summary Create a test agency for sandbox testing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesCreateTestAgency(options) {
            return localVarFp.agenciesCreateTestAgency(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a specific agency details.
         * @param {number} id Agency identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGet(id, options) {
            return localVarFp.agenciesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
         * @summary Retrieves listings across all channels for a specific agency matching specified criteria.
         * @param {number} id Agency identifier
         * @param {AgenciesGetListingsListingStatusFilterEnum} [listingStatusFilter] Filter for listing status
         * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGetListings(id, listingStatusFilter, dateUpdatedSince, pageNumber, pageSize, options) {
            return localVarFp.agenciesGetListings(id, listingStatusFilter, dateUpdatedSince, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves statistics for a specific agency.
         * @param {number} id Agency identifier
         * @param {AgenciesGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {AgenciesGetStatisticsStatusFilterEnum} [statusFilter] Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60;
         * @param {AgenciesGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
         * @param {number} [pageNumber] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options) {
            return localVarFp.agenciesGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.    See `X-Total-Count` header for result count.
         * @summary Retrieves summary of agency search.
         * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesHead(q, pageNumber, pageSize, options) {
            return localVarFp.agenciesHead(q, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * <br>The ```q``` parameter supports:  <ul>    <li>name: search by name eg. ```name:\"Agency XYZ\"```</li>    <li>providerId: search by providerId. eg. ```providerId:\"ABC Software\"```</li>    <li>domainUrl: search by domainUrl. eg. ```domainUrl:\"agency-xyz\"```</li>    <li>dateUpdated: search by dateUpdated. eg. ```dateUpdated:\"2016-12-25\"```</li>    <li>suburbId: search by suburbId. Lists supported.  eg. ```suburbId:1``` eg. ```suburbId:(1 OR 2 OR 3)```.  Can include related suburbs by adding ```in:related```</li>    <li>accountType: search by account type. Lists supported.  eg. ```accountType:residential``` eg. ```accountType:(residential OR commercial)``` Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business</li>    <li>      ```in:all``` includes archived agencies (archived agencies excluded by default)</li>    <li>      ```-is:selfservice``` excludes selfservice</li>  </ul>
         * @summary Retrieves summary of agencies matching the specified criteria.
         * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agenciesSearch(q, pageNumber, pageSize, options) {
            return localVarFp.agenciesSearch(q, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AgenciesApiFactory = AgenciesApiFactory;
/**
 * AgenciesApi - object-oriented interface
 * @export
 * @class AgenciesApi
 * @extends {BaseAPI}
 */
class AgenciesApi extends base_1.BaseAPI {
    /**
     * Enables automatic creation of a test agency in our sandbox environment.
     * @summary Create a test agency for sandbox testing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgenciesApi
     */
    agenciesCreateTestAgency(options) {
        return (0, exports.AgenciesApiFp)(this.configuration).agenciesCreateTestAgency(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a specific agency details.
     * @param {number} id Agency identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgenciesApi
     */
    agenciesGet(id, options) {
        return (0, exports.AgenciesApiFp)(this.configuration).agenciesGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
     * @summary Retrieves listings across all channels for a specific agency matching specified criteria.
     * @param {number} id Agency identifier
     * @param {AgenciesGetListingsListingStatusFilterEnum} [listingStatusFilter] Filter for listing status
     * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgenciesApi
     */
    agenciesGetListings(id, listingStatusFilter, dateUpdatedSince, pageNumber, pageSize, options) {
        return (0, exports.AgenciesApiFp)(this.configuration).agenciesGetListings(id, listingStatusFilter, dateUpdatedSince, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves statistics for a specific agency.
     * @param {number} id Agency identifier
     * @param {AgenciesGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
     * @param {AgenciesGetStatisticsStatusFilterEnum} [statusFilter] Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60;
     * @param {AgenciesGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
     * @param {number} [pageNumber] Page number
     * @param {number} [pageSize] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgenciesApi
     */
    agenciesGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options) {
        return (0, exports.AgenciesApiFp)(this.configuration).agenciesGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.    See `X-Total-Count` header for result count.
     * @summary Retrieves summary of agency search.
     * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgenciesApi
     */
    agenciesHead(q, pageNumber, pageSize, options) {
        return (0, exports.AgenciesApiFp)(this.configuration).agenciesHead(q, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <br>The ```q``` parameter supports:  <ul>    <li>name: search by name eg. ```name:\"Agency XYZ\"```</li>    <li>providerId: search by providerId. eg. ```providerId:\"ABC Software\"```</li>    <li>domainUrl: search by domainUrl. eg. ```domainUrl:\"agency-xyz\"```</li>    <li>dateUpdated: search by dateUpdated. eg. ```dateUpdated:\"2016-12-25\"```</li>    <li>suburbId: search by suburbId. Lists supported.  eg. ```suburbId:1``` eg. ```suburbId:(1 OR 2 OR 3)```.  Can include related suburbs by adding ```in:related```</li>    <li>accountType: search by account type. Lists supported.  eg. ```accountType:residential``` eg. ```accountType:(residential OR commercial)``` Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business</li>    <li>      ```in:all``` includes archived agencies (archived agencies excluded by default)</li>    <li>      ```-is:selfservice``` excludes selfservice</li>  </ul>
     * @summary Retrieves summary of agencies matching the specified criteria.
     * @param {string} [q] Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgenciesApi
     */
    agenciesSearch(q, pageNumber, pageSize, options) {
        return (0, exports.AgenciesApiFp)(this.configuration).agenciesSearch(q, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AgenciesApi = AgenciesApi;
/**
 * @export
 */
exports.AgenciesGetListingsListingStatusFilterEnum = {
    Live: 'live',
    LiveAndArchived: 'liveAndArchived'
};
/**
 * @export
 */
exports.AgenciesGetStatisticsTimePeriodEnum = {
    Last7Days: 'last7Days',
    Last90Days: 'last90Days',
    WholeCampaign: 'wholeCampaign'
};
/**
 * @export
 */
exports.AgenciesGetStatisticsStatusFilterEnum = {
    Live: 'live',
    LiveAndArchived: 'liveAndArchived'
};
/**
 * @export
 */
exports.AgenciesGetStatisticsChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
};
/**
 * AgentsApi - axios parameter creator
 * @export
 */
const AgentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves a specific agent details, including contact information.
         * @param {number} id Agent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('agentsGet', 'id', id);
            const localVarPath = `/v1/agents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Gets listing using the contact id
         * @param {number} id Agent identifier
         * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
         * @param {boolean} [includedArchivedListings] Filter to remove listings that have been archived
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGetListings: (id, dateUpdatedSince, includedArchivedListings, pageNumber, pageSize, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('agentsGetListings', 'id', id);
            const localVarPath = `/v1/agents/{id}/listings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            if (dateUpdatedSince !== undefined) {
                localVarQueryParameter['dateUpdatedSince'] = (dateUpdatedSince instanceof Date) ?
                    dateUpdatedSince.toISOString() :
                    dateUpdatedSince;
            }
            if (includedArchivedListings !== undefined) {
                localVarQueryParameter['includedArchivedListings'] = includedArchivedListings;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves stats for the listings of a given agent
         * @param {number} id Agent identifier
         * @param {AgentsGetStatisticsTimePeriodEnum} [timePeriod] The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;
         * @param {AgentsGetStatisticsStatusFilterEnum} [statusFilter] Listing filter
         * @param {AgentsGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGetStatistics: (id, timePeriod, statusFilter, channel, pageNumber, pageSize, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('agentsGetStatistics', 'id', id);
            const localVarPath = `/v1/agents/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }
            if (statusFilter !== undefined) {
                localVarQueryParameter['statusFilter'] = statusFilter;
            }
            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The returned Agent ID can be used to get an agent details by ID. See `GET /agents/{id}/`
         * @summary Search for agents by name.
         * @param {string} query The name, or portion of name, to search for.
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results (maximum 20)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsSearch: (query, pageNumber, pageSize, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'query' is not null or undefined
            (0, common_1.assertParamExists)('agentsSearch', 'query', query);
            const localVarPath = `/v1/agents/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AgentsApiAxiosParamCreator = AgentsApiAxiosParamCreator;
/**
 * AgentsApi - functional programming interface
 * @export
 */
const AgentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AgentsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves a specific agent details, including contact information.
         * @param {number} id Agent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.agentsGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Gets listing using the contact id
         * @param {number} id Agent identifier
         * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
         * @param {boolean} [includedArchivedListings] Filter to remove listings that have been archived
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGetListings(id, dateUpdatedSince, includedArchivedListings, pageNumber, pageSize, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.agentsGetListings(id, dateUpdatedSince, includedArchivedListings, pageNumber, pageSize, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves stats for the listings of a given agent
         * @param {number} id Agent identifier
         * @param {AgentsGetStatisticsTimePeriodEnum} [timePeriod] The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;
         * @param {AgentsGetStatisticsStatusFilterEnum} [statusFilter] Listing filter
         * @param {AgentsGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.agentsGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The returned Agent ID can be used to get an agent details by ID. See `GET /agents/{id}/`
         * @summary Search for agents by name.
         * @param {string} query The name, or portion of name, to search for.
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results (maximum 20)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsSearch(query, pageNumber, pageSize, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.agentsSearch(query, pageNumber, pageSize, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AgentsApiFp = AgentsApiFp;
/**
 * AgentsApi - factory interface
 * @export
 */
const AgentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AgentsApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves a specific agent details, including contact information.
         * @param {number} id Agent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGet(id, options) {
            return localVarFp.agentsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets listing using the contact id
         * @param {number} id Agent identifier
         * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
         * @param {boolean} [includedArchivedListings] Filter to remove listings that have been archived
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGetListings(id, dateUpdatedSince, includedArchivedListings, pageNumber, pageSize, options) {
            return localVarFp.agentsGetListings(id, dateUpdatedSince, includedArchivedListings, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves stats for the listings of a given agent
         * @param {number} id Agent identifier
         * @param {AgentsGetStatisticsTimePeriodEnum} [timePeriod] The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;
         * @param {AgentsGetStatisticsStatusFilterEnum} [statusFilter] Listing filter
         * @param {AgentsGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options) {
            return localVarFp.agentsGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * The returned Agent ID can be used to get an agent details by ID. See `GET /agents/{id}/`
         * @summary Search for agents by name.
         * @param {string} query The name, or portion of name, to search for.
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results (maximum 20)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsSearch(query, pageNumber, pageSize, options) {
            return localVarFp.agentsSearch(query, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AgentsApiFactory = AgentsApiFactory;
/**
 * AgentsApi - object-oriented interface
 * @export
 * @class AgentsApi
 * @extends {BaseAPI}
 */
class AgentsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves a specific agent details, including contact information.
     * @param {number} id Agent identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    agentsGet(id, options) {
        return (0, exports.AgentsApiFp)(this.configuration).agentsGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets listing using the contact id
     * @param {number} id Agent identifier
     * @param {string} [dateUpdatedSince] Filter to remove listings not updated since before the given date time
     * @param {boolean} [includedArchivedListings] Filter to remove listings that have been archived
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    agentsGetListings(id, dateUpdatedSince, includedArchivedListings, pageNumber, pageSize, options) {
        return (0, exports.AgentsApiFp)(this.configuration).agentsGetListings(id, dateUpdatedSince, includedArchivedListings, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves stats for the listings of a given agent
     * @param {number} id Agent identifier
     * @param {AgentsGetStatisticsTimePeriodEnum} [timePeriod] The time period to show statistics for. Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;
     * @param {AgentsGetStatisticsStatusFilterEnum} [statusFilter] Listing filter
     * @param {AgentsGetStatisticsChannelEnum} [channel] Filter statistics for the given channel
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    agentsGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options) {
        return (0, exports.AgentsApiFp)(this.configuration).agentsGetStatistics(id, timePeriod, statusFilter, channel, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The returned Agent ID can be used to get an agent details by ID. See `GET /agents/{id}/`
     * @summary Search for agents by name.
     * @param {string} query The name, or portion of name, to search for.
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results (maximum 20)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    agentsSearch(query, pageNumber, pageSize, options) {
        return (0, exports.AgentsApiFp)(this.configuration).agentsSearch(query, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AgentsApi = AgentsApi;
/**
 * @export
 */
exports.AgentsGetStatisticsTimePeriodEnum = {
    Last7Days: 'last7Days',
    Last90Days: 'last90Days',
    WholeCampaign: 'wholeCampaign'
};
/**
 * @export
 */
exports.AgentsGetStatisticsStatusFilterEnum = {
    Live: 'live',
    LiveAndArchived: 'liveAndArchived'
};
/**
 * @export
 */
exports.AgentsGetStatisticsChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
};
/**
 * AuthoritiesApi - axios parameter creator
 * @export
 */
const AuthoritiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new authority into the system.
         * @summary Creates a new authority into the system.
         * @param {AuthoritiesV1AuthorityRequest} authoritiesV1AuthorityRequest Authority information to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesCreate: (authoritiesV1AuthorityRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authoritiesV1AuthorityRequest' is not null or undefined
            (0, common_1.assertParamExists)('authoritiesCreate', 'authoritiesV1AuthorityRequest', authoritiesV1AuthorityRequest);
            const localVarPath = `/v1/authorities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/vnd.realtimeagent.authorities.v1+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authoritiesV1AuthorityRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Download a compressed file(`.zip`) that contains all files attached to an authority based on the given authority `id`.
         * @summary Download a compressed file that contains all files attached to an authority.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesDownloadAttachments: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('authoritiesDownloadAttachments', 'id', id);
            const localVarPath = `/v1/authorities/{id}/attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve authority details based on the given ID.
         * @summary Retrieve a single authority
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesGetById: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('authoritiesGetById', 'id', id);
            const localVarPath = `/v1/authorities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Subscribe to an agency to get notified on changes made to the authorities in that agencies scope.
         * @summary Subscribe to an agency for all its authorities
         * @param {AuthoritiesV1SubscriptionRequest} [authoritiesV1SubscriptionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesSubscribe: (authoritiesV1SubscriptionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/authorities/webhooks/subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authoritiesV1SubscriptionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a subscription using subscriptionId.
         * @summary Delete a subscription using subscriptionId
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUnsubscribe: (subscriptionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subscriptionId' is not null or undefined
            (0, common_1.assertParamExists)('authoritiesUnsubscribe', 'subscriptionId', subscriptionId);
            const localVarPath = `/v1/authorities/webhooks/subscription/{subscriptionId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Executes a full update on an existing authority.
         * @summary full update an existing authority.
         * @param {string} id
         * @param {AuthoritiesV1AuthorityResponse} authoritiesV1AuthorityResponse Authority information to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUpdateById: (id, authoritiesV1AuthorityResponse, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('authoritiesUpdateById', 'id', id);
            // verify required parameter 'authoritiesV1AuthorityResponse' is not null or undefined
            (0, common_1.assertParamExists)('authoritiesUpdateById', 'authoritiesV1AuthorityResponse', authoritiesV1AuthorityResponse);
            const localVarPath = `/v1/authorities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/vnd.realtimeagent.authorities.v1+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authoritiesV1AuthorityResponse, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Upload multiple files to be attached to an authority based on the given `id`.
         * @summary Upload multiple files to an authority.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUploadAttachment: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('authoritiesUploadAttachment', 'id', id);
            const localVarPath = `/v1/authorities/{id}/attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Upload multiple files to be attached to a specific vendor in an authority.
         * @summary Upload multiple files to be attached to a specific vendor in an authority.
         * @param {string} id
         * @param {string} vendorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUploadVendorAttachment: (id, vendorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('authoritiesUploadVendorAttachment', 'id', id);
            // verify required parameter 'vendorId' is not null or undefined
            (0, common_1.assertParamExists)('authoritiesUploadVendorAttachment', 'vendorId', vendorId);
            const localVarPath = `/v1/authorities/{id}/vendors/{vendorId}/attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"vendorId"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_authorities_write"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AuthoritiesApiAxiosParamCreator = AuthoritiesApiAxiosParamCreator;
/**
 * AuthoritiesApi - functional programming interface
 * @export
 */
const AuthoritiesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuthoritiesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates a new authority into the system.
         * @summary Creates a new authority into the system.
         * @param {AuthoritiesV1AuthorityRequest} authoritiesV1AuthorityRequest Authority information to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesCreate(authoritiesV1AuthorityRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authoritiesCreate(authoritiesV1AuthorityRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Download a compressed file(`.zip`) that contains all files attached to an authority based on the given authority `id`.
         * @summary Download a compressed file that contains all files attached to an authority.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesDownloadAttachments(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authoritiesDownloadAttachments(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve authority details based on the given ID.
         * @summary Retrieve a single authority
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesGetById(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authoritiesGetById(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Subscribe to an agency to get notified on changes made to the authorities in that agencies scope.
         * @summary Subscribe to an agency for all its authorities
         * @param {AuthoritiesV1SubscriptionRequest} [authoritiesV1SubscriptionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesSubscribe(authoritiesV1SubscriptionRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authoritiesSubscribe(authoritiesV1SubscriptionRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a subscription using subscriptionId.
         * @summary Delete a subscription using subscriptionId
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUnsubscribe(subscriptionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authoritiesUnsubscribe(subscriptionId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Executes a full update on an existing authority.
         * @summary full update an existing authority.
         * @param {string} id
         * @param {AuthoritiesV1AuthorityResponse} authoritiesV1AuthorityResponse Authority information to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUpdateById(id, authoritiesV1AuthorityResponse, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authoritiesUpdateById(id, authoritiesV1AuthorityResponse, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Upload multiple files to be attached to an authority based on the given `id`.
         * @summary Upload multiple files to an authority.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUploadAttachment(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authoritiesUploadAttachment(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Upload multiple files to be attached to a specific vendor in an authority.
         * @summary Upload multiple files to be attached to a specific vendor in an authority.
         * @param {string} id
         * @param {string} vendorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUploadVendorAttachment(id, vendorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authoritiesUploadVendorAttachment(id, vendorId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AuthoritiesApiFp = AuthoritiesApiFp;
/**
 * AuthoritiesApi - factory interface
 * @export
 */
const AuthoritiesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuthoritiesApiFp)(configuration);
    return {
        /**
         * Creates a new authority into the system.
         * @summary Creates a new authority into the system.
         * @param {AuthoritiesV1AuthorityRequest} authoritiesV1AuthorityRequest Authority information to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesCreate(authoritiesV1AuthorityRequest, options) {
            return localVarFp.authoritiesCreate(authoritiesV1AuthorityRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Download a compressed file(`.zip`) that contains all files attached to an authority based on the given authority `id`.
         * @summary Download a compressed file that contains all files attached to an authority.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesDownloadAttachments(id, options) {
            return localVarFp.authoritiesDownloadAttachments(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve authority details based on the given ID.
         * @summary Retrieve a single authority
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesGetById(id, options) {
            return localVarFp.authoritiesGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Subscribe to an agency to get notified on changes made to the authorities in that agencies scope.
         * @summary Subscribe to an agency for all its authorities
         * @param {AuthoritiesV1SubscriptionRequest} [authoritiesV1SubscriptionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesSubscribe(authoritiesV1SubscriptionRequest, options) {
            return localVarFp.authoritiesSubscribe(authoritiesV1SubscriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a subscription using subscriptionId.
         * @summary Delete a subscription using subscriptionId
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUnsubscribe(subscriptionId, options) {
            return localVarFp.authoritiesUnsubscribe(subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Executes a full update on an existing authority.
         * @summary full update an existing authority.
         * @param {string} id
         * @param {AuthoritiesV1AuthorityResponse} authoritiesV1AuthorityResponse Authority information to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUpdateById(id, authoritiesV1AuthorityResponse, options) {
            return localVarFp.authoritiesUpdateById(id, authoritiesV1AuthorityResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload multiple files to be attached to an authority based on the given `id`.
         * @summary Upload multiple files to an authority.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUploadAttachment(id, options) {
            return localVarFp.authoritiesUploadAttachment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload multiple files to be attached to a specific vendor in an authority.
         * @summary Upload multiple files to be attached to a specific vendor in an authority.
         * @param {string} id
         * @param {string} vendorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoritiesUploadVendorAttachment(id, vendorId, options) {
            return localVarFp.authoritiesUploadVendorAttachment(id, vendorId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthoritiesApiFactory = AuthoritiesApiFactory;
/**
 * AuthoritiesApi - object-oriented interface
 * @export
 * @class AuthoritiesApi
 * @extends {BaseAPI}
 */
class AuthoritiesApi extends base_1.BaseAPI {
    /**
     * Creates a new authority into the system.
     * @summary Creates a new authority into the system.
     * @param {AuthoritiesV1AuthorityRequest} authoritiesV1AuthorityRequest Authority information to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    authoritiesCreate(authoritiesV1AuthorityRequest, options) {
        return (0, exports.AuthoritiesApiFp)(this.configuration).authoritiesCreate(authoritiesV1AuthorityRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Download a compressed file(`.zip`) that contains all files attached to an authority based on the given authority `id`.
     * @summary Download a compressed file that contains all files attached to an authority.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    authoritiesDownloadAttachments(id, options) {
        return (0, exports.AuthoritiesApiFp)(this.configuration).authoritiesDownloadAttachments(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve authority details based on the given ID.
     * @summary Retrieve a single authority
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    authoritiesGetById(id, options) {
        return (0, exports.AuthoritiesApiFp)(this.configuration).authoritiesGetById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Subscribe to an agency to get notified on changes made to the authorities in that agencies scope.
     * @summary Subscribe to an agency for all its authorities
     * @param {AuthoritiesV1SubscriptionRequest} [authoritiesV1SubscriptionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    authoritiesSubscribe(authoritiesV1SubscriptionRequest, options) {
        return (0, exports.AuthoritiesApiFp)(this.configuration).authoritiesSubscribe(authoritiesV1SubscriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a subscription using subscriptionId.
     * @summary Delete a subscription using subscriptionId
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    authoritiesUnsubscribe(subscriptionId, options) {
        return (0, exports.AuthoritiesApiFp)(this.configuration).authoritiesUnsubscribe(subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Executes a full update on an existing authority.
     * @summary full update an existing authority.
     * @param {string} id
     * @param {AuthoritiesV1AuthorityResponse} authoritiesV1AuthorityResponse Authority information to be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    authoritiesUpdateById(id, authoritiesV1AuthorityResponse, options) {
        return (0, exports.AuthoritiesApiFp)(this.configuration).authoritiesUpdateById(id, authoritiesV1AuthorityResponse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload multiple files to be attached to an authority based on the given `id`.
     * @summary Upload multiple files to an authority.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    authoritiesUploadAttachment(id, options) {
        return (0, exports.AuthoritiesApiFp)(this.configuration).authoritiesUploadAttachment(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload multiple files to be attached to a specific vendor in an authority.
     * @summary Upload multiple files to be attached to a specific vendor in an authority.
     * @param {string} id
     * @param {string} vendorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    authoritiesUploadVendorAttachment(id, vendorId, options) {
        return (0, exports.AuthoritiesApiFp)(this.configuration).authoritiesUploadVendorAttachment(id, vendorId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthoritiesApi = AuthoritiesApi;
/**
 * DemographicsApi - axios parameter creator
 * @export
 */
const DemographicsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
         * @summary Search for demographics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
         * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
         * @param {number} [year] Census Year of data to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demographicsGetByNamedSuburb: (state, suburb, postcode, types, year, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'state' is not null or undefined
            (0, common_1.assertParamExists)('demographicsGetByNamedSuburb', 'state', state);
            // verify required parameter 'suburb' is not null or undefined
            (0, common_1.assertParamExists)('demographicsGetByNamedSuburb', 'suburb', suburb);
            // verify required parameter 'postcode' is not null or undefined
            (0, common_1.assertParamExists)('demographicsGetByNamedSuburb', 'postcode', postcode);
            const localVarPath = `/v2/demographics/{state}/{suburb}/{postcode}`
                .replace(`{${"state"}}`, encodeURIComponent(String(state)))
                .replace(`{${"suburb"}}`, encodeURIComponent(String(suburb)))
                .replace(`{${"postcode"}}`, encodeURIComponent(String(postcode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_demographics_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_demographics_read"], configuration);
            if (types !== undefined) {
                localVarQueryParameter['types'] = types;
            }
            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
         * @summary Search for demographics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
         * @param {number} [year] Census Year of data to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demographicsGetByNamedSuburbWithoutPostcode: (state, suburb, types, year, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'state' is not null or undefined
            (0, common_1.assertParamExists)('demographicsGetByNamedSuburbWithoutPostcode', 'state', state);
            // verify required parameter 'suburb' is not null or undefined
            (0, common_1.assertParamExists)('demographicsGetByNamedSuburbWithoutPostcode', 'suburb', suburb);
            const localVarPath = `/v2/demographics/{state}/{suburb}`
                .replace(`{${"state"}}`, encodeURIComponent(String(state)))
                .replace(`{${"suburb"}}`, encodeURIComponent(String(suburb)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_demographics_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_demographics_read"], configuration);
            if (types !== undefined) {
                localVarQueryParameter['types'] = types;
            }
            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DemographicsApiAxiosParamCreator = DemographicsApiAxiosParamCreator;
/**
 * DemographicsApi - functional programming interface
 * @export
 */
const DemographicsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DemographicsApiAxiosParamCreator)(configuration);
    return {
        /**
         * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
         * @summary Search for demographics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
         * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
         * @param {number} [year] Census Year of data to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demographicsGetByNamedSuburb(state, suburb, postcode, types, year, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.demographicsGetByNamedSuburb(state, suburb, postcode, types, year, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
         * @summary Search for demographics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
         * @param {number} [year] Census Year of data to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demographicsGetByNamedSuburbWithoutPostcode(state, suburb, types, year, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.demographicsGetByNamedSuburbWithoutPostcode(state, suburb, types, year, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.DemographicsApiFp = DemographicsApiFp;
/**
 * DemographicsApi - factory interface
 * @export
 */
const DemographicsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DemographicsApiFp)(configuration);
    return {
        /**
         * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
         * @summary Search for demographics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
         * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
         * @param {number} [year] Census Year of data to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demographicsGetByNamedSuburb(state, suburb, postcode, types, year, options) {
            return localVarFp.demographicsGetByNamedSuburb(state, suburb, postcode, types, year, options).then((request) => request(axios, basePath));
        },
        /**
         * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
         * @summary Search for demographics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
         * @param {number} [year] Census Year of data to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demographicsGetByNamedSuburbWithoutPostcode(state, suburb, types, year, options) {
            return localVarFp.demographicsGetByNamedSuburbWithoutPostcode(state, suburb, types, year, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DemographicsApiFactory = DemographicsApiFactory;
/**
 * DemographicsApi - object-oriented interface
 * @export
 * @class DemographicsApi
 * @extends {BaseAPI}
 */
class DemographicsApi extends base_1.BaseAPI {
    /**
     * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
     * @summary Search for demographics in a given geographic level.
     * @param {string} state The Australian state abbreviation
     * @param {string} suburb Suburb name to retrieve data for
     * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
     * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
     * @param {number} [year] Census Year of data to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemographicsApi
     */
    demographicsGetByNamedSuburb(state, suburb, postcode, types, year, options) {
        return (0, exports.DemographicsApiFp)(this.configuration).demographicsGetByNamedSuburb(state, suburb, postcode, types, year, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * <br>Where available, all available topics and years will be returned if not supplied.  <br>Note that not all suburbs will have data available for all years and topics.
     * @summary Search for demographics in a given geographic level.
     * @param {string} state The Australian state abbreviation
     * @param {string} suburb Suburb name to retrieve data for
     * @param {string} [types] Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60;
     * @param {number} [year] Census Year of data to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemographicsApi
     */
    demographicsGetByNamedSuburbWithoutPostcode(state, suburb, types, year, options) {
        return (0, exports.DemographicsApiFp)(this.configuration).demographicsGetByNamedSuburbWithoutPostcode(state, suburb, types, year, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DemographicsApi = DemographicsApi;
/**
 * DisclaimersApi - axios parameter creator
 * @export
 */
const DisclaimersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves disclaimers for given ids
         * @param {string} [ids] Comma separated list of ids. Eg. \&quot;1,2,3\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disclaimersGet: (ids, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/disclaimers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves disclaimers for given product
         * @param {string} product Possible product values: &#x60;PropertyData&#x60;, &#x60;AURIN&#x60;, &#x60;HomePriceGuide&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disclaimersGetByProduct: (product, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'product' is not null or undefined
            (0, common_1.assertParamExists)('disclaimersGetByProduct', 'product', product);
            const localVarPath = `/v1/disclaimers/product/{product}`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DisclaimersApiAxiosParamCreator = DisclaimersApiAxiosParamCreator;
/**
 * DisclaimersApi - functional programming interface
 * @export
 */
const DisclaimersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DisclaimersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves disclaimers for given ids
         * @param {string} [ids] Comma separated list of ids. Eg. \&quot;1,2,3\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disclaimersGet(ids, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.disclaimersGet(ids, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves disclaimers for given product
         * @param {string} product Possible product values: &#x60;PropertyData&#x60;, &#x60;AURIN&#x60;, &#x60;HomePriceGuide&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disclaimersGetByProduct(product, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.disclaimersGetByProduct(product, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.DisclaimersApiFp = DisclaimersApiFp;
/**
 * DisclaimersApi - factory interface
 * @export
 */
const DisclaimersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DisclaimersApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves disclaimers for given ids
         * @param {string} [ids] Comma separated list of ids. Eg. \&quot;1,2,3\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disclaimersGet(ids, options) {
            return localVarFp.disclaimersGet(ids, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves disclaimers for given product
         * @param {string} product Possible product values: &#x60;PropertyData&#x60;, &#x60;AURIN&#x60;, &#x60;HomePriceGuide&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disclaimersGetByProduct(product, options) {
            return localVarFp.disclaimersGetByProduct(product, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DisclaimersApiFactory = DisclaimersApiFactory;
/**
 * DisclaimersApi - object-oriented interface
 * @export
 * @class DisclaimersApi
 * @extends {BaseAPI}
 */
class DisclaimersApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves disclaimers for given ids
     * @param {string} [ids] Comma separated list of ids. Eg. \&quot;1,2,3\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisclaimersApi
     */
    disclaimersGet(ids, options) {
        return (0, exports.DisclaimersApiFp)(this.configuration).disclaimersGet(ids, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves disclaimers for given product
     * @param {string} product Possible product values: &#x60;PropertyData&#x60;, &#x60;AURIN&#x60;, &#x60;HomePriceGuide&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisclaimersApi
     */
    disclaimersGetByProduct(product, options) {
        return (0, exports.DisclaimersApiFp)(this.configuration).disclaimersGetByProduct(product, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DisclaimersApi = DisclaimersApi;
/**
 * EnquiriesApi - axios parameter creator
 * @export
 */
const EnquiriesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieve the details of a specific enquiry
         * @param {string} id Id of the enquiry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('enquiriesGet', 'id', id);
            const localVarPath = `/v1/enquiries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
         * @param {DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry} domainPublicAdapterWebApiModelsV1EnquiriesEnquiry The enquiry object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesPost: (domainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'domainPublicAdapterWebApiModelsV1EnquiriesEnquiry' is not null or undefined
            (0, common_1.assertParamExists)('enquiriesPost', 'domainPublicAdapterWebApiModelsV1EnquiriesEnquiry', domainPublicAdapterWebApiModelsV1EnquiriesEnquiry);
            const localVarPath = `/v1/enquiries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_enquiries_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_enquiries_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Searches enquiries based on agents or agencies.
         * @param {number} [agencyId] Agency identifier
         * @param {number} [agentId] Agent identifier
         * @param {string} [from] Enquiries received from
         * @param {string} [to] Enquiries received up to
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesSearch: (agencyId, agentId, from, to, pageNumber, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/enquiries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration);
            if (agencyId !== undefined) {
                localVarQueryParameter['agencyId'] = agencyId;
            }
            if (agentId !== undefined) {
                localVarQueryParameter['agentId'] = agentId;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from instanceof Date) ?
                    from.toISOString() :
                    from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = (to instanceof Date) ?
                    to.toISOString() :
                    to;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.EnquiriesApiAxiosParamCreator = EnquiriesApiAxiosParamCreator;
/**
 * EnquiriesApi - functional programming interface
 * @export
 */
const EnquiriesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.EnquiriesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieve the details of a specific enquiry
         * @param {string} id Id of the enquiry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.enquiriesGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
         * @param {DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry} domainPublicAdapterWebApiModelsV1EnquiriesEnquiry The enquiry object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesPost(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.enquiriesPost(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Searches enquiries based on agents or agencies.
         * @param {number} [agencyId] Agency identifier
         * @param {number} [agentId] Agent identifier
         * @param {string} [from] Enquiries received from
         * @param {string} [to] Enquiries received up to
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesSearch(agencyId, agentId, from, to, pageNumber, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.enquiriesSearch(agencyId, agentId, from, to, pageNumber, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.EnquiriesApiFp = EnquiriesApiFp;
/**
 * EnquiriesApi - factory interface
 * @export
 */
const EnquiriesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.EnquiriesApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieve the details of a specific enquiry
         * @param {string} id Id of the enquiry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesGet(id, options) {
            return localVarFp.enquiriesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
         * @param {DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry} domainPublicAdapterWebApiModelsV1EnquiriesEnquiry The enquiry object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesPost(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options) {
            return localVarFp.enquiriesPost(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Searches enquiries based on agents or agencies.
         * @param {number} [agencyId] Agency identifier
         * @param {number} [agentId] Agent identifier
         * @param {string} [from] Enquiries received from
         * @param {string} [to] Enquiries received up to
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enquiriesSearch(agencyId, agentId, from, to, pageNumber, options) {
            return localVarFp.enquiriesSearch(agencyId, agentId, from, to, pageNumber, options).then((request) => request(axios, basePath));
        },
    };
};
exports.EnquiriesApiFactory = EnquiriesApiFactory;
/**
 * EnquiriesApi - object-oriented interface
 * @export
 * @class EnquiriesApi
 * @extends {BaseAPI}
 */
class EnquiriesApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieve the details of a specific enquiry
     * @param {string} id Id of the enquiry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnquiriesApi
     */
    enquiriesGet(id, options) {
        return (0, exports.EnquiriesApiFp)(this.configuration).enquiriesGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.
     * @param {DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry} domainPublicAdapterWebApiModelsV1EnquiriesEnquiry The enquiry object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnquiriesApi
     */
    enquiriesPost(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options) {
        return (0, exports.EnquiriesApiFp)(this.configuration).enquiriesPost(domainPublicAdapterWebApiModelsV1EnquiriesEnquiry, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Searches enquiries based on agents or agencies.
     * @param {number} [agencyId] Agency identifier
     * @param {number} [agentId] Agent identifier
     * @param {string} [from] Enquiries received from
     * @param {string} [to] Enquiries received up to
     * @param {number} [pageNumber] Page number for paginated results (25 per page)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnquiriesApi
     */
    enquiriesSearch(agencyId, agentId, from, to, pageNumber, options) {
        return (0, exports.EnquiriesApiFp)(this.configuration).enquiriesSearch(agencyId, agentId, from, to, pageNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EnquiriesApi = EnquiriesApi;
/**
 * LeadscopeApi - axios parameter creator
 * @export
 */
const LeadscopeApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary URL to download a list of agency predictions
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadScopeGetById: (participantId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'participantId' is not null or undefined
            (0, common_1.assertParamExists)('leadScopeGetById', 'participantId', participantId);
            const localVarPath = `/v1/leadscope/predictions/{participantId}`
                .replace(`{${"participantId"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.LeadscopeApiAxiosParamCreator = LeadscopeApiAxiosParamCreator;
/**
 * LeadscopeApi - functional programming interface
 * @export
 */
const LeadscopeApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.LeadscopeApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary URL to download a list of agency predictions
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadScopeGetById(participantId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.leadScopeGetById(participantId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.LeadscopeApiFp = LeadscopeApiFp;
/**
 * LeadscopeApi - factory interface
 * @export
 */
const LeadscopeApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.LeadscopeApiFp)(configuration);
    return {
        /**
         *
         * @summary URL to download a list of agency predictions
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadScopeGetById(participantId, options) {
            return localVarFp.leadScopeGetById(participantId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.LeadscopeApiFactory = LeadscopeApiFactory;
/**
 * LeadscopeApi - object-oriented interface
 * @export
 * @class LeadscopeApi
 * @extends {BaseAPI}
 */
class LeadscopeApi extends base_1.BaseAPI {
    /**
     *
     * @summary URL to download a list of agency predictions
     * @param {string} participantId Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadscopeApi
     */
    leadScopeGetById(participantId, options) {
        return (0, exports.LeadscopeApiFp)(this.configuration).leadScopeGetById(participantId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LeadscopeApi = LeadscopeApi;
/**
 * ListingsApi - axios parameter creator
 * @export
 */
const ListingsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * The resulting suggested location can be of type \"suburb\" / \"area\" / \"region\".    The `name` property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [`v1/listings/residential/_search`](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
         * @summary Suggests listing locations
         * @param {string} [terms] Suburb / area / region prefix, or postcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingLocationsSearch: (terms, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/listings/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration);
            if (terms !== undefined) {
                localVarQueryParameter['terms'] = terms;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves business listings matching the specified criteria.
         * @param {DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest} domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedBusinessSearch: (domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest' is not null or undefined
            (0, common_1.assertParamExists)('listingsDetailedBusinessSearch', 'domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest', domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest);
            const localVarPath = `/v1/listings/business/_search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves commercial listings matching the specified criteria.
         * @param {DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest} domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedCommercialSearch: (domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest' is not null or undefined
            (0, common_1.assertParamExists)('listingsDetailedCommercialSearch', 'domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest', domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest);
            const localVarPath = `/v1/listings/commercial/_search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
         * @summary Retrieves residential listings matching the specified criteria.
         * @param {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters} domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedResidentialSearch: (domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters' is not null or undefined
            (0, common_1.assertParamExists)('listingsDetailedResidentialSearch', 'domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters', domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters);
            const localVarPath = `/v1/listings/residential/_search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieve details of listing using the listing id
         * @param {number} id Id of the listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('listingsGet', 'id', id);
            const localVarPath = `/v1/listings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieve details of all enquiries received for a specific listing
         * @param {number} id Listing Id
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetEnquiries: (id, pageNumber, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('listingsGetEnquiries', 'id', id);
            const localVarPath = `/v1/listings/{id}/enquiries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration);
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Gets the processing report
         * @param {string} id Report id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingReport: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('listingsGetListingReport', 'id', id);
            const localVarPath = `/v1/listings/processingReports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Searches processing reports
         * @param {number} agencyId Domain agency Id
         * @param {string} providerAdId External provider advertisement identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingReportByReference: (agencyId, providerAdId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'agencyId' is not null or undefined
            (0, common_1.assertParamExists)('listingsGetListingReportByReference', 'agencyId', agencyId);
            // verify required parameter 'providerAdId' is not null or undefined
            (0, common_1.assertParamExists)('listingsGetListingReportByReference', 'providerAdId', providerAdId);
            const localVarPath = `/v1/listings/processingReports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            if (agencyId !== undefined) {
                localVarQueryParameter['agencyId'] = agencyId;
            }
            if (providerAdId !== undefined) {
                localVarQueryParameter['providerAdId'] = providerAdId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieve details of listing using the listing id
         * @param {number} id Id of the listing
         * @param {ListingsGetListingStatisticsTimePeriodEnum} [timePeriod] The period of time to see the listing performance for (not including today). Defaults to Last7Days
         * @param {ListingsGetListingStatisticsChannelEnum} [channel] Filter statistics for the given channel. Defaults to listing Channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingStatistics: (id, timePeriod, channel, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('listingsGetListingStatistics', 'id', id);
            const localVarPath = `/v1/listings/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }
            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates or updates a business listing
         * @param {DomainListingAdminServiceV1ModelBusinessListing} domainListingAdminServiceV1ModelBusinessListing The business listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertBusinessListing: (domainListingAdminServiceV1ModelBusinessListing, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'domainListingAdminServiceV1ModelBusinessListing' is not null or undefined
            (0, common_1.assertParamExists)('listingsUpsertBusinessListing', 'domainListingAdminServiceV1ModelBusinessListing', domainListingAdminServiceV1ModelBusinessListing);
            const localVarPath = `/v1/listings/business`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domainListingAdminServiceV1ModelBusinessListing, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates or updates a residential listing
         * @param {DomainListingAdminServiceV1ModelResidentialListing} domainListingAdminServiceV1ModelResidentialListing The residential listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertResidentialListing: (domainListingAdminServiceV1ModelResidentialListing, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'domainListingAdminServiceV1ModelResidentialListing' is not null or undefined
            (0, common_1.assertParamExists)('listingsUpsertResidentialListing', 'domainListingAdminServiceV1ModelResidentialListing', domainListingAdminServiceV1ModelResidentialListing);
            const localVarPath = `/v1/listings/residential`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domainListingAdminServiceV1ModelResidentialListing, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates an externally sold business listing; or takes an existing business listing off the market.
         * @param {ListingAdminV2BusinessOffMarketListing} listingAdminV2BusinessOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertbusinessoffmarket: (listingAdminV2BusinessOffMarketListing, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'listingAdminV2BusinessOffMarketListing' is not null or undefined
            (0, common_1.assertParamExists)('listingsUpsertbusinessoffmarket', 'listingAdminV2BusinessOffMarketListing', listingAdminV2BusinessOffMarketListing);
            const localVarPath = `/v2/listings/business/offmarket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(listingAdminV2BusinessOffMarketListing, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a commercial listing.
         * @param {ListingAdminV2CommercialListingV2} listingAdminV2CommercialListingV2 Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertcommerciallisting: (listingAdminV2CommercialListingV2, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'listingAdminV2CommercialListingV2' is not null or undefined
            (0, common_1.assertParamExists)('listingsUpsertcommerciallisting', 'listingAdminV2CommercialListingV2', listingAdminV2CommercialListingV2);
            const localVarPath = `/v2/listings/commercial`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(listingAdminV2CommercialListingV2, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
         * @param {ListingAdminV2CommercialOffMarketListing} listingAdminV2CommercialOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertcommercialoffmarket: (listingAdminV2CommercialOffMarketListing, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'listingAdminV2CommercialOffMarketListing' is not null or undefined
            (0, common_1.assertParamExists)('listingsUpsertcommercialoffmarket', 'listingAdminV2CommercialOffMarketListing', listingAdminV2CommercialOffMarketListing);
            const localVarPath = `/v2/listings/commercial/offmarket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(listingAdminV2CommercialOffMarketListing, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
         * @param {ListingAdminV2ResidentialOffMarketListing} listingAdminV2ResidentialOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertresidentialoffmarket: (listingAdminV2ResidentialOffMarketListing, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'listingAdminV2ResidentialOffMarketListing' is not null or undefined
            (0, common_1.assertParamExists)('listingsUpsertresidentialoffmarket', 'listingAdminV2ResidentialOffMarketListing', listingAdminV2ResidentialOffMarketListing);
            const localVarPath = `/v2/listings/residential/offmarket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(listingAdminV2ResidentialOffMarketListing, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ListingsApiAxiosParamCreator = ListingsApiAxiosParamCreator;
/**
 * ListingsApi - functional programming interface
 * @export
 */
const ListingsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ListingsApiAxiosParamCreator)(configuration);
    return {
        /**
         * The resulting suggested location can be of type \"suburb\" / \"area\" / \"region\".    The `name` property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [`v1/listings/residential/_search`](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
         * @summary Suggests listing locations
         * @param {string} [terms] Suburb / area / region prefix, or postcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingLocationsSearch(terms, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingLocationsSearch(terms, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves business listings matching the specified criteria.
         * @param {DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest} domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedBusinessSearch(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsDetailedBusinessSearch(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves commercial listings matching the specified criteria.
         * @param {DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest} domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedCommercialSearch(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsDetailedCommercialSearch(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
         * @summary Retrieves residential listings matching the specified criteria.
         * @param {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters} domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedResidentialSearch(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsDetailedResidentialSearch(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieve details of listing using the listing id
         * @param {number} id Id of the listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieve details of all enquiries received for a specific listing
         * @param {number} id Listing Id
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetEnquiries(id, pageNumber, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsGetEnquiries(id, pageNumber, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Gets the processing report
         * @param {string} id Report id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingReport(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsGetListingReport(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Searches processing reports
         * @param {number} agencyId Domain agency Id
         * @param {string} providerAdId External provider advertisement identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingReportByReference(agencyId, providerAdId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsGetListingReportByReference(agencyId, providerAdId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieve details of listing using the listing id
         * @param {number} id Id of the listing
         * @param {ListingsGetListingStatisticsTimePeriodEnum} [timePeriod] The period of time to see the listing performance for (not including today). Defaults to Last7Days
         * @param {ListingsGetListingStatisticsChannelEnum} [channel] Filter statistics for the given channel. Defaults to listing Channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingStatistics(id, timePeriod, channel, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsGetListingStatistics(id, timePeriod, channel, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates or updates a business listing
         * @param {DomainListingAdminServiceV1ModelBusinessListing} domainListingAdminServiceV1ModelBusinessListing The business listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertBusinessListing(domainListingAdminServiceV1ModelBusinessListing, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsUpsertBusinessListing(domainListingAdminServiceV1ModelBusinessListing, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates or updates a residential listing
         * @param {DomainListingAdminServiceV1ModelResidentialListing} domainListingAdminServiceV1ModelResidentialListing The residential listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertResidentialListing(domainListingAdminServiceV1ModelResidentialListing, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsUpsertResidentialListing(domainListingAdminServiceV1ModelResidentialListing, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates an externally sold business listing; or takes an existing business listing off the market.
         * @param {ListingAdminV2BusinessOffMarketListing} listingAdminV2BusinessOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a commercial listing.
         * @param {ListingAdminV2CommercialListingV2} listingAdminV2CommercialListingV2 Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertcommerciallisting(listingAdminV2CommercialListingV2, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsUpsertcommerciallisting(listingAdminV2CommercialListingV2, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
         * @param {ListingAdminV2CommercialOffMarketListing} listingAdminV2CommercialOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
         * @param {ListingAdminV2ResidentialOffMarketListing} listingAdminV2ResidentialOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ListingsApiFp = ListingsApiFp;
/**
 * ListingsApi - factory interface
 * @export
 */
const ListingsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ListingsApiFp)(configuration);
    return {
        /**
         * The resulting suggested location can be of type \"suburb\" / \"area\" / \"region\".    The `name` property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [`v1/listings/residential/_search`](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
         * @summary Suggests listing locations
         * @param {string} [terms] Suburb / area / region prefix, or postcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingLocationsSearch(terms, options) {
            return localVarFp.listingLocationsSearch(terms, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves business listings matching the specified criteria.
         * @param {DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest} domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedBusinessSearch(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options) {
            return localVarFp.listingsDetailedBusinessSearch(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves commercial listings matching the specified criteria.
         * @param {DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest} domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedCommercialSearch(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options) {
            return localVarFp.listingsDetailedCommercialSearch(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
         * @summary Retrieves residential listings matching the specified criteria.
         * @param {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters} domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters Search parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsDetailedResidentialSearch(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options) {
            return localVarFp.listingsDetailedResidentialSearch(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve details of listing using the listing id
         * @param {number} id Id of the listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGet(id, options) {
            return localVarFp.listingsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve details of all enquiries received for a specific listing
         * @param {number} id Listing Id
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetEnquiries(id, pageNumber, options) {
            return localVarFp.listingsGetEnquiries(id, pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the processing report
         * @param {string} id Report id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingReport(id, options) {
            return localVarFp.listingsGetListingReport(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Searches processing reports
         * @param {number} agencyId Domain agency Id
         * @param {string} providerAdId External provider advertisement identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingReportByReference(agencyId, providerAdId, options) {
            return localVarFp.listingsGetListingReportByReference(agencyId, providerAdId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve details of listing using the listing id
         * @param {number} id Id of the listing
         * @param {ListingsGetListingStatisticsTimePeriodEnum} [timePeriod] The period of time to see the listing performance for (not including today). Defaults to Last7Days
         * @param {ListingsGetListingStatisticsChannelEnum} [channel] Filter statistics for the given channel. Defaults to listing Channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsGetListingStatistics(id, timePeriod, channel, options) {
            return localVarFp.listingsGetListingStatistics(id, timePeriod, channel, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates or updates a business listing
         * @param {DomainListingAdminServiceV1ModelBusinessListing} domainListingAdminServiceV1ModelBusinessListing The business listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertBusinessListing(domainListingAdminServiceV1ModelBusinessListing, options) {
            return localVarFp.listingsUpsertBusinessListing(domainListingAdminServiceV1ModelBusinessListing, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates or updates a residential listing
         * @param {DomainListingAdminServiceV1ModelResidentialListing} domainListingAdminServiceV1ModelResidentialListing The residential listing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertResidentialListing(domainListingAdminServiceV1ModelResidentialListing, options) {
            return localVarFp.listingsUpsertResidentialListing(domainListingAdminServiceV1ModelResidentialListing, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates an externally sold business listing; or takes an existing business listing off the market.
         * @param {ListingAdminV2BusinessOffMarketListing} listingAdminV2BusinessOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing, options) {
            return localVarFp.listingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a commercial listing.
         * @param {ListingAdminV2CommercialListingV2} listingAdminV2CommercialListingV2 Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertcommerciallisting(listingAdminV2CommercialListingV2, options) {
            return localVarFp.listingsUpsertcommerciallisting(listingAdminV2CommercialListingV2, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
         * @param {ListingAdminV2CommercialOffMarketListing} listingAdminV2CommercialOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing, options) {
            return localVarFp.listingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
         * @param {ListingAdminV2ResidentialOffMarketListing} listingAdminV2ResidentialOffMarketListing Listing data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing, options) {
            return localVarFp.listingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ListingsApiFactory = ListingsApiFactory;
/**
 * ListingsApi - object-oriented interface
 * @export
 * @class ListingsApi
 * @extends {BaseAPI}
 */
class ListingsApi extends base_1.BaseAPI {
    /**
     * The resulting suggested location can be of type \"suburb\" / \"area\" / \"region\".    The `name` property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [`v1/listings/residential/_search`](/docs/v1/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
     * @summary Suggests listing locations
     * @param {string} [terms] Suburb / area / region prefix, or postcode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingLocationsSearch(terms, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingLocationsSearch(terms, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves business listings matching the specified criteria.
     * @param {DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest} domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest Search parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsDetailedBusinessSearch(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsDetailedBusinessSearch(domainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves commercial listings matching the specified criteria.
     * @param {DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest} domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest Search parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsDetailedCommercialSearch(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsDetailedCommercialSearch(domainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.
     * @summary Retrieves residential listings matching the specified criteria.
     * @param {DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters} domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters Search parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsDetailedResidentialSearch(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsDetailedResidentialSearch(domainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve details of listing using the listing id
     * @param {number} id Id of the listing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsGet(id, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve details of all enquiries received for a specific listing
     * @param {number} id Listing Id
     * @param {number} [pageNumber] Page number for paginated results (25 per page)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsGetEnquiries(id, pageNumber, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsGetEnquiries(id, pageNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the processing report
     * @param {string} id Report id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsGetListingReport(id, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsGetListingReport(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Searches processing reports
     * @param {number} agencyId Domain agency Id
     * @param {string} providerAdId External provider advertisement identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsGetListingReportByReference(agencyId, providerAdId, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsGetListingReportByReference(agencyId, providerAdId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve details of listing using the listing id
     * @param {number} id Id of the listing
     * @param {ListingsGetListingStatisticsTimePeriodEnum} [timePeriod] The period of time to see the listing performance for (not including today). Defaults to Last7Days
     * @param {ListingsGetListingStatisticsChannelEnum} [channel] Filter statistics for the given channel. Defaults to listing Channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsGetListingStatistics(id, timePeriod, channel, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsGetListingStatistics(id, timePeriod, channel, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates or updates a business listing
     * @param {DomainListingAdminServiceV1ModelBusinessListing} domainListingAdminServiceV1ModelBusinessListing The business listing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsUpsertBusinessListing(domainListingAdminServiceV1ModelBusinessListing, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsUpsertBusinessListing(domainListingAdminServiceV1ModelBusinessListing, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates or updates a residential listing
     * @param {DomainListingAdminServiceV1ModelResidentialListing} domainListingAdminServiceV1ModelResidentialListing The residential listing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsUpsertResidentialListing(domainListingAdminServiceV1ModelResidentialListing, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsUpsertResidentialListing(domainListingAdminServiceV1ModelResidentialListing, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates an externally sold business listing; or takes an existing business listing off the market.
     * @param {ListingAdminV2BusinessOffMarketListing} listingAdminV2BusinessOffMarketListing Listing data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsUpsertbusinessoffmarket(listingAdminV2BusinessOffMarketListing, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a commercial listing.
     * @param {ListingAdminV2CommercialListingV2} listingAdminV2CommercialListingV2 Listing data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsUpsertcommerciallisting(listingAdminV2CommercialListingV2, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsUpsertcommerciallisting(listingAdminV2CommercialListingV2, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
     * @param {ListingAdminV2CommercialOffMarketListing} listingAdminV2CommercialOffMarketListing Listing data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsUpsertcommercialoffmarket(listingAdminV2CommercialOffMarketListing, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
     * @param {ListingAdminV2ResidentialOffMarketListing} listingAdminV2ResidentialOffMarketListing Listing data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    listingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing, options) {
        return (0, exports.ListingsApiFp)(this.configuration).listingsUpsertresidentialoffmarket(listingAdminV2ResidentialOffMarketListing, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ListingsApi = ListingsApi;
/**
 * @export
 */
exports.ListingsGetListingStatisticsTimePeriodEnum = {
    Last7Days: 'last7Days',
    Last90Days: 'last90Days',
    WholeCampaign: 'wholeCampaign'
};
/**
 * @export
 */
exports.ListingsGetListingStatisticsChannelEnum = {
    Residential: 'residential',
    Commercial: 'commercial',
    Business: 'business'
};
/**
 * LocationsApi - axios parameter creator
 * @export
 */
const LocationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get location data based on the given domainLocationId
         * @param {string} domainLocationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationProfilesGet: (domainLocationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'domainLocationId' is not null or undefined
            (0, common_1.assertParamExists)('locationProfilesGet', 'domainLocationId', domainLocationId);
            const localVarPath = `/v1/locations/profiles/{domainLocationId}`
                .replace(`{${"domainLocationId"}}`, encodeURIComponent(String(domainLocationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_locations_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_locations_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.LocationsApiAxiosParamCreator = LocationsApiAxiosParamCreator;
/**
 * LocationsApi - functional programming interface
 * @export
 */
const LocationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.LocationsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get location data based on the given domainLocationId
         * @param {string} domainLocationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationProfilesGet(domainLocationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.locationProfilesGet(domainLocationId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.LocationsApiFp = LocationsApiFp;
/**
 * LocationsApi - factory interface
 * @export
 */
const LocationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.LocationsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get location data based on the given domainLocationId
         * @param {string} domainLocationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationProfilesGet(domainLocationId, options) {
            return localVarFp.locationProfilesGet(domainLocationId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.LocationsApiFactory = LocationsApiFactory;
/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
class LocationsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get location data based on the given domainLocationId
     * @param {string} domainLocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    locationProfilesGet(domainLocationId, options) {
        return (0, exports.LocationsApiFp)(this.configuration).locationProfilesGet(domainLocationId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LocationsApi = LocationsApi;
/**
 * MeApi - axios parameter creator
 * @export
 */
const MeApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieve list of agencies with which the current client is associated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetMyAgencies: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/me/agencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieve list of provider Ids with which the current client is associated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetMyProviders: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/me/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieve information about the currently authorised request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meProfile: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", [], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.MeApiAxiosParamCreator = MeApiAxiosParamCreator;
/**
 * MeApi - functional programming interface
 * @export
 */
const MeApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MeApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieve list of agencies with which the current client is associated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetMyAgencies(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.meGetMyAgencies(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieve list of provider Ids with which the current client is associated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetMyProviders(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.meGetMyProviders(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieve information about the currently authorised request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meProfile(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.meProfile(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.MeApiFp = MeApiFp;
/**
 * MeApi - factory interface
 * @export
 */
const MeApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MeApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieve list of agencies with which the current client is associated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetMyAgencies(options) {
            return localVarFp.meGetMyAgencies(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve list of provider Ids with which the current client is associated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGetMyProviders(options) {
            return localVarFp.meGetMyProviders(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve information about the currently authorised request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meProfile(options) {
            return localVarFp.meProfile(options).then((request) => request(axios, basePath));
        },
    };
};
exports.MeApiFactory = MeApiFactory;
/**
 * MeApi - object-oriented interface
 * @export
 * @class MeApi
 * @extends {BaseAPI}
 */
class MeApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieve list of agencies with which the current client is associated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    meGetMyAgencies(options) {
        return (0, exports.MeApiFp)(this.configuration).meGetMyAgencies(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve list of provider Ids with which the current client is associated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    meGetMyProviders(options) {
        return (0, exports.MeApiFp)(this.configuration).meGetMyProviders(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve information about the currently authorised request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    meProfile(options) {
        return (0, exports.MeApiFp)(this.configuration).meProfile(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MeApi = MeApi;
/**
 * PreMarketApi - axios parameter creator
 * @export
 */
const PreMarketApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves a pre-portal listing.
         * @param {string} id Pre-portal listing ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('preMarketGet', 'id', id);
            const localVarPath = `/v2/premarket/listings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Patches a pre-portal listing.
         * @param {string} id Pre-portal listing ID.
         * @param {PreMarketV1ListingRequestJsonPatchDocument} [preMarketV1ListingRequestJsonPatchDocument] &#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketPatch: (id, preMarketV1ListingRequestJsonPatchDocument, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('preMarketPatch', 'id', id);
            const localVarPath = `/v2/premarket/listings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(preMarketV1ListingRequestJsonPatchDocument, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates or updates a pre-portal listing.
         * @param {PreMarketV1ListingRequest} [preMarketV1ListingRequest] Pre-portal listing request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketPost: (preMarketV1ListingRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v2/premarket/listings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(preMarketV1ListingRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.PreMarketApiAxiosParamCreator = PreMarketApiAxiosParamCreator;
/**
 * PreMarketApi - functional programming interface
 * @export
 */
const PreMarketApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PreMarketApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves a pre-portal listing.
         * @param {string} id Pre-portal listing ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.preMarketGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Patches a pre-portal listing.
         * @param {string} id Pre-portal listing ID.
         * @param {PreMarketV1ListingRequestJsonPatchDocument} [preMarketV1ListingRequestJsonPatchDocument] &#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketPatch(id, preMarketV1ListingRequestJsonPatchDocument, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.preMarketPatch(id, preMarketV1ListingRequestJsonPatchDocument, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates or updates a pre-portal listing.
         * @param {PreMarketV1ListingRequest} [preMarketV1ListingRequest] Pre-portal listing request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketPost(preMarketV1ListingRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.preMarketPost(preMarketV1ListingRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.PreMarketApiFp = PreMarketApiFp;
/**
 * PreMarketApi - factory interface
 * @export
 */
const PreMarketApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PreMarketApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves a pre-portal listing.
         * @param {string} id Pre-portal listing ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketGet(id, options) {
            return localVarFp.preMarketGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Patches a pre-portal listing.
         * @param {string} id Pre-portal listing ID.
         * @param {PreMarketV1ListingRequestJsonPatchDocument} [preMarketV1ListingRequestJsonPatchDocument] &#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketPatch(id, preMarketV1ListingRequestJsonPatchDocument, options) {
            return localVarFp.preMarketPatch(id, preMarketV1ListingRequestJsonPatchDocument, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates or updates a pre-portal listing.
         * @param {PreMarketV1ListingRequest} [preMarketV1ListingRequest] Pre-portal listing request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preMarketPost(preMarketV1ListingRequest, options) {
            return localVarFp.preMarketPost(preMarketV1ListingRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PreMarketApiFactory = PreMarketApiFactory;
/**
 * PreMarketApi - object-oriented interface
 * @export
 * @class PreMarketApi
 * @extends {BaseAPI}
 */
class PreMarketApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves a pre-portal listing.
     * @param {string} id Pre-portal listing ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreMarketApi
     */
    preMarketGet(id, options) {
        return (0, exports.PreMarketApiFp)(this.configuration).preMarketGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Patches a pre-portal listing.
     * @param {string} id Pre-portal listing ID.
     * @param {PreMarketV1ListingRequestJsonPatchDocument} [preMarketV1ListingRequestJsonPatchDocument] &#x60;&#x60;&#x60;  Examples:  [  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/bedrooms\&quot;,   \&quot;value\&quot;: 3     },  {   \&quot;op\&quot;: \&quot;replace\&quot;,   \&quot;path\&quot;: \&quot;/listingStatus\&quot;,   \&quot;value\&quot;: \&quot;sold\&quot;  },  {   \&quot;op\&quot;: \&quot;remove\&quot;,   \&quot;path\&quot;: \&quot;/StatementOfInformation\&quot;  },  {   \&quot;op\&quot;: \&quot;add\&quot;,   \&quot;path\&quot;: \&quot;/contacts/-\&quot;,   \&quot;value\&quot;: {    \&quot;firstName\&quot;: \&quot;lily\&quot;,    \&quot;lastName\&quot;: \&quot;li\&quot;,    \&quot;email\&quot;: \&quot;lily.li@domain.com.au\&quot;,    \&quot;phone\&quot;: \&quot;0411111111\&quot;,    \&quot;mobile\&quot;: null,    \&quot;fax\&quot;: null   }  }  ]  &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreMarketApi
     */
    preMarketPatch(id, preMarketV1ListingRequestJsonPatchDocument, options) {
        return (0, exports.PreMarketApiFp)(this.configuration).preMarketPatch(id, preMarketV1ListingRequestJsonPatchDocument, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates or updates a pre-portal listing.
     * @param {PreMarketV1ListingRequest} [preMarketV1ListingRequest] Pre-portal listing request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreMarketApi
     */
    preMarketPost(preMarketV1ListingRequest, options) {
        return (0, exports.PreMarketApiFp)(this.configuration).preMarketPost(preMarketV1ListingRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PreMarketApi = PreMarketApi;
/**
 * ProductsApi - axios parameter creator
 * @export
 */
const ProductsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get updated pricing information for a hypothetical listing
         * @param {BookingsV2RateForNewListingRequest} [bookingsV2RateForNewListingRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsRateForNewListing: (bookingsV2RateForNewListingRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/products/ratefornewlisting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bookingsV2RateForNewListingRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get updated pricing information for a hypothetical listing
         * @param {SocialBoostV1RateForNewSocialBoostRequestModel} [socialBoostV1RateForNewSocialBoostRequestModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialBoostRateForNewSocialBoost: (socialBoostV1RateForNewSocialBoostRequestModel, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/products/ratefornewsocialboost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_agencies_read"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(socialBoostV1RateForNewSocialBoostRequestModel, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ProductsApiAxiosParamCreator = ProductsApiAxiosParamCreator;
/**
 * ProductsApi - functional programming interface
 * @export
 */
const ProductsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProductsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get updated pricing information for a hypothetical listing
         * @param {BookingsV2RateForNewListingRequest} [bookingsV2RateForNewListingRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsRateForNewListing(bookingsV2RateForNewListingRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.productsRateForNewListing(bookingsV2RateForNewListingRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get updated pricing information for a hypothetical listing
         * @param {SocialBoostV1RateForNewSocialBoostRequestModel} [socialBoostV1RateForNewSocialBoostRequestModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialBoostRateForNewSocialBoost(socialBoostV1RateForNewSocialBoostRequestModel, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.socialBoostRateForNewSocialBoost(socialBoostV1RateForNewSocialBoostRequestModel, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ProductsApiFp = ProductsApiFp;
/**
 * ProductsApi - factory interface
 * @export
 */
const ProductsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProductsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get updated pricing information for a hypothetical listing
         * @param {BookingsV2RateForNewListingRequest} [bookingsV2RateForNewListingRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsRateForNewListing(bookingsV2RateForNewListingRequest, options) {
            return localVarFp.productsRateForNewListing(bookingsV2RateForNewListingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get updated pricing information for a hypothetical listing
         * @param {SocialBoostV1RateForNewSocialBoostRequestModel} [socialBoostV1RateForNewSocialBoostRequestModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialBoostRateForNewSocialBoost(socialBoostV1RateForNewSocialBoostRequestModel, options) {
            return localVarFp.socialBoostRateForNewSocialBoost(socialBoostV1RateForNewSocialBoostRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProductsApiFactory = ProductsApiFactory;
/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
class ProductsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get updated pricing information for a hypothetical listing
     * @param {BookingsV2RateForNewListingRequest} [bookingsV2RateForNewListingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    productsRateForNewListing(bookingsV2RateForNewListingRequest, options) {
        return (0, exports.ProductsApiFp)(this.configuration).productsRateForNewListing(bookingsV2RateForNewListingRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get updated pricing information for a hypothetical listing
     * @param {SocialBoostV1RateForNewSocialBoostRequestModel} [socialBoostV1RateForNewSocialBoostRequestModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    socialBoostRateForNewSocialBoost(socialBoostV1RateForNewSocialBoostRequestModel, options) {
        return (0, exports.ProductsApiFp)(this.configuration).socialBoostRateForNewSocialBoost(socialBoostV1RateForNewSocialBoostRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProductsApi = ProductsApi;
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
const ProjectsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Details of project
         * @param {number} id Id of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('projectsGet', 'id', id);
            const localVarPath = `/v1/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Project listings
         * @param {number} id Id of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetChildListings: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('projectsGetChildListings', 'id', id);
            const localVarPath = `/v1/projects/{id}/listings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read", "api_listings_write"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves statistics for a specific project with a breakdown for listings.
         * @param {number} id project identifier
         * @param {ProjectsGetChildListingsStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetChildListingsStatistics: (id, timePeriod, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('projectsGetChildListingsStatistics', 'id', id);
            const localVarPath = `/v1/projects/{id}/listings/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieve details of all enquiries received for a specific new development project
         * @param {number} id New Development Project Id
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetEnquiries: (id, pageNumber, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('projectsGetEnquiries', 'id', id);
            const localVarPath = `/v1/projects/{id}/enquiries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_enquiries_read", "api_enquiries_write"], configuration);
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves statistics for a specific project.
         * @param {number} id project identifier
         * @param {ProjectsGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetStatistics: (id, timePeriod, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('projectsGetStatistics', 'id', id);
            const localVarPath = `/v1/projects/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
         * @summary Searches projects
         * @param {number} [agencyId] Restricts to the provided agency
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {ProjectsSearchProjectStatusEnum} [projectStatus] The set of projects to return, defaults to &#x60;live&#x60; only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSearch: (agencyId, pageNumber, pageSize, projectStatus, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            if (agencyId !== undefined) {
                localVarQueryParameter['agencyId'] = agencyId;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (projectStatus !== undefined) {
                localVarQueryParameter['projectStatus'] = projectStatus;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ProjectsApiAxiosParamCreator = ProjectsApiAxiosParamCreator;
/**
 * ProjectsApi - functional programming interface
 * @export
 */
const ProjectsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProjectsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Details of project
         * @param {number} id Id of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.projectsGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Project listings
         * @param {number} id Id of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetChildListings(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.projectsGetChildListings(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves statistics for a specific project with a breakdown for listings.
         * @param {number} id project identifier
         * @param {ProjectsGetChildListingsStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetChildListingsStatistics(id, timePeriod, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.projectsGetChildListingsStatistics(id, timePeriod, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieve details of all enquiries received for a specific new development project
         * @param {number} id New Development Project Id
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetEnquiries(id, pageNumber, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.projectsGetEnquiries(id, pageNumber, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves statistics for a specific project.
         * @param {number} id project identifier
         * @param {ProjectsGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetStatistics(id, timePeriod, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.projectsGetStatistics(id, timePeriod, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
         * @summary Searches projects
         * @param {number} [agencyId] Restricts to the provided agency
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {ProjectsSearchProjectStatusEnum} [projectStatus] The set of projects to return, defaults to &#x60;live&#x60; only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSearch(agencyId, pageNumber, pageSize, projectStatus, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.projectsSearch(agencyId, pageNumber, pageSize, projectStatus, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ProjectsApiFp = ProjectsApiFp;
/**
 * ProjectsApi - factory interface
 * @export
 */
const ProjectsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProjectsApiFp)(configuration);
    return {
        /**
         *
         * @summary Details of project
         * @param {number} id Id of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet(id, options) {
            return localVarFp.projectsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Project listings
         * @param {number} id Id of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetChildListings(id, options) {
            return localVarFp.projectsGetChildListings(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves statistics for a specific project with a breakdown for listings.
         * @param {number} id project identifier
         * @param {ProjectsGetChildListingsStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetChildListingsStatistics(id, timePeriod, options) {
            return localVarFp.projectsGetChildListingsStatistics(id, timePeriod, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve details of all enquiries received for a specific new development project
         * @param {number} id New Development Project Id
         * @param {number} [pageNumber] Page number for paginated results (25 per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetEnquiries(id, pageNumber, options) {
            return localVarFp.projectsGetEnquiries(id, pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves statistics for a specific project.
         * @param {number} id project identifier
         * @param {ProjectsGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGetStatistics(id, timePeriod, options) {
            return localVarFp.projectsGetStatistics(id, timePeriod, options).then((request) => request(axios, basePath));
        },
        /**
         * Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
         * @summary Searches projects
         * @param {number} [agencyId] Restricts to the provided agency
         * @param {number} [pageNumber] Page number for paginated results
         * @param {number} [pageSize] Page size for paginated results
         * @param {ProjectsSearchProjectStatusEnum} [projectStatus] The set of projects to return, defaults to &#x60;live&#x60; only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSearch(agencyId, pageNumber, pageSize, projectStatus, options) {
            return localVarFp.projectsSearch(agencyId, pageNumber, pageSize, projectStatus, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProjectsApiFactory = ProjectsApiFactory;
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
class ProjectsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Details of project
     * @param {number} id Id of the project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsGet(id, options) {
        return (0, exports.ProjectsApiFp)(this.configuration).projectsGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Project listings
     * @param {number} id Id of the project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsGetChildListings(id, options) {
        return (0, exports.ProjectsApiFp)(this.configuration).projectsGetChildListings(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves statistics for a specific project with a breakdown for listings.
     * @param {number} id project identifier
     * @param {ProjectsGetChildListingsStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsGetChildListingsStatistics(id, timePeriod, options) {
        return (0, exports.ProjectsApiFp)(this.configuration).projectsGetChildListingsStatistics(id, timePeriod, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve details of all enquiries received for a specific new development project
     * @param {number} id New Development Project Id
     * @param {number} [pageNumber] Page number for paginated results (25 per page)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsGetEnquiries(id, pageNumber, options) {
        return (0, exports.ProjectsApiFp)(this.configuration).projectsGetEnquiries(id, pageNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves statistics for a specific project.
     * @param {number} id project identifier
     * @param {ProjectsGetStatisticsTimePeriodEnum} [timePeriod] Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsGetStatistics(id, timePeriod, options) {
        return (0, exports.ProjectsApiFp)(this.configuration).projectsGetStatistics(id, timePeriod, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
     * @summary Searches projects
     * @param {number} [agencyId] Restricts to the provided agency
     * @param {number} [pageNumber] Page number for paginated results
     * @param {number} [pageSize] Page size for paginated results
     * @param {ProjectsSearchProjectStatusEnum} [projectStatus] The set of projects to return, defaults to &#x60;live&#x60; only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsSearch(agencyId, pageNumber, pageSize, projectStatus, options) {
        return (0, exports.ProjectsApiFp)(this.configuration).projectsSearch(agencyId, pageNumber, pageSize, projectStatus, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectsApi = ProjectsApi;
/**
 * @export
 */
exports.ProjectsGetChildListingsStatisticsTimePeriodEnum = {
    Last7Days: 'last7Days',
    Last90Days: 'last90Days',
    WholeCampaign: 'wholeCampaign'
};
/**
 * @export
 */
exports.ProjectsGetStatisticsTimePeriodEnum = {
    Last7Days: 'last7Days',
    Last90Days: 'last90Days',
    WholeCampaign: 'wholeCampaign'
};
/**
 * @export
 */
exports.ProjectsSearchProjectStatusEnum = {
    Live: 'live',
    InActive: 'inActive'
};
/**
 * PropertiesApi - axios parameter creator
 * @export
 */
const PropertiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieve list of listings for the given property id
         * @param {string} propertyId
         * @param {string} [updatedSince]
         * @param {string} [listedSince]
         * @param {ListingsBypropertyidSaleModeEnum} [saleMode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsBypropertyid: (propertyId, updatedSince, listedSince, saleMode, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'propertyId' is not null or undefined
            (0, common_1.assertParamExists)('listingsBypropertyid', 'propertyId', propertyId);
            const localVarPath = `/v2/properties/{propertyId}/listings`
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_listings_read"], configuration);
            if (updatedSince !== undefined) {
                localVarQueryParameter['updatedSince'] = (updatedSince instanceof Date) ?
                    updatedSince.toISOString() :
                    updatedSince;
            }
            if (listedSince !== undefined) {
                localVarQueryParameter['listedSince'] = (listedSince instanceof Date) ?
                    listedSince.toISOString() :
                    listedSince;
            }
            if (saleMode !== undefined) {
                localVarQueryParameter['saleMode'] = saleMode;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution and appropriate state government attribution.
         * @summary Retrieves a specific property.
         * @param {string} id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('propertiesGet', 'id', id);
            const localVarPath = `/v1/properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Price estimates based on propertyId
         * @param {string} propertyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGetPriceEstimate: (propertyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'propertyId' is not null or undefined
            (0, common_1.assertParamExists)('propertiesGetPriceEstimate', 'propertyId', propertyId);
            const localVarPath = `/v1/properties/{propertyId}/priceEstimate`
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Rental estimates based on propertyId
         * @param {string} propertyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGetRentalEstimate: (propertyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'propertyId' is not null or undefined
            (0, common_1.assertParamExists)('propertiesGetRentalEstimate', 'propertyId', propertyId);
            const localVarPath = `/v1/properties/{propertyId}/rentalEstimate`
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution.
         * @summary Search for suggested addresses for the given terms
         * @param {string} terms The address to search
         * @param {number} [pageSize] Number of suggestions (maximum 20)
         * @param {PropertiesSuggestChannelEnum} [channel] Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesSuggest: (terms, pageSize, channel, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'terms' is not null or undefined
            (0, common_1.assertParamExists)('propertiesSuggest', 'terms', terms);
            const localVarPath = `/v1/properties/_suggest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            if (terms !== undefined) {
                localVarQueryParameter['terms'] = terms;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a property report based on query parameters
         * @param {string} propertyType Type of property &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {string} streetNumber Street number
         * @param {string} streetName Street name
         * @param {string} suburb Suburb e.g. &#x60;Pyrmont&#x60;
         * @param {string} state State e.g. &#x60;NSW&#x60;
         * @param {string} [unitNumber] Unit number
         * @param {string} [streetType] Street type e.g. &#x60;Pl&#x60;
         * @param {string} [postcode] Postcode e.g. &#x60;2009&#x60;
         * @param {number} [areaSize] Area size
         * @param {number} [bedrooms] Number of bedrooms
         * @param {number} [bathrooms] Number of bathrooms
         * @param {number} [parking] Number of parking spots
         * @param {string} [preparedFor] \&quot;Prepared for\&quot; information
         * @param {string} [productCode] Report product code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyReportsGet: (propertyType, streetNumber, streetName, suburb, state, unitNumber, streetType, postcode, areaSize, bedrooms, bathrooms, parking, preparedFor, productCode, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'propertyType' is not null or undefined
            (0, common_1.assertParamExists)('propertyReportsGet', 'propertyType', propertyType);
            // verify required parameter 'streetNumber' is not null or undefined
            (0, common_1.assertParamExists)('propertyReportsGet', 'streetNumber', streetNumber);
            // verify required parameter 'streetName' is not null or undefined
            (0, common_1.assertParamExists)('propertyReportsGet', 'streetName', streetName);
            // verify required parameter 'suburb' is not null or undefined
            (0, common_1.assertParamExists)('propertyReportsGet', 'suburb', suburb);
            // verify required parameter 'state' is not null or undefined
            (0, common_1.assertParamExists)('propertyReportsGet', 'state', state);
            const localVarPath = `/v1/propertyReports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyreports_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyreports_read"], configuration);
            if (propertyType !== undefined) {
                localVarQueryParameter['propertyType'] = propertyType;
            }
            if (streetNumber !== undefined) {
                localVarQueryParameter['streetNumber'] = streetNumber;
            }
            if (streetName !== undefined) {
                localVarQueryParameter['streetName'] = streetName;
            }
            if (suburb !== undefined) {
                localVarQueryParameter['suburb'] = suburb;
            }
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            if (unitNumber !== undefined) {
                localVarQueryParameter['unitNumber'] = unitNumber;
            }
            if (streetType !== undefined) {
                localVarQueryParameter['streetType'] = streetType;
            }
            if (postcode !== undefined) {
                localVarQueryParameter['postcode'] = postcode;
            }
            if (areaSize !== undefined) {
                localVarQueryParameter['areaSize'] = areaSize;
            }
            if (bedrooms !== undefined) {
                localVarQueryParameter['bedrooms'] = bedrooms;
            }
            if (bathrooms !== undefined) {
                localVarQueryParameter['bathrooms'] = bathrooms;
            }
            if (parking !== undefined) {
                localVarQueryParameter['parking'] = parking;
            }
            if (preparedFor !== undefined) {
                localVarQueryParameter['preparedFor'] = preparedFor;
            }
            if (productCode !== undefined) {
                localVarQueryParameter['productCode'] = productCode;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Search for a specific property and provide property information and latest sale/rental activity if found. Supply either propertyId, gnafId, or all address fields (with flatNumber optional)
         * @summary API that supplies property level data and activities across two packages for a specific property
         * @param {string} [propertyId]
         * @param {string} [gnafId]
         * @param {string} [flatNumber]
         * @param {string} [streetNumber]
         * @param {string} [streetName]
         * @param {string} [streetType]
         * @param {string} [postcode]
         * @param {string} [suburbName]
         * @param {PropertyenrichmentGetStateEnum} [state]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyenrichmentGet: (propertyId, gnafId, flatNumber, streetNumber, streetName, streetType, postcode, suburbName, state, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/propertyenrichment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_properties_read"], configuration);
            if (propertyId !== undefined) {
                localVarQueryParameter['propertyId'] = propertyId;
            }
            if (gnafId !== undefined) {
                localVarQueryParameter['gnafId'] = gnafId;
            }
            if (flatNumber !== undefined) {
                localVarQueryParameter['flatNumber'] = flatNumber;
            }
            if (streetNumber !== undefined) {
                localVarQueryParameter['streetNumber'] = streetNumber;
            }
            if (streetName !== undefined) {
                localVarQueryParameter['streetName'] = streetName;
            }
            if (streetType !== undefined) {
                localVarQueryParameter['streetType'] = streetType;
            }
            if (postcode !== undefined) {
                localVarQueryParameter['postcode'] = postcode;
            }
            if (suburbName !== undefined) {
                localVarQueryParameter['suburbName'] = suburbName;
            }
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.PropertiesApiAxiosParamCreator = PropertiesApiAxiosParamCreator;
/**
 * PropertiesApi - functional programming interface
 * @export
 */
const PropertiesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PropertiesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieve list of listings for the given property id
         * @param {string} propertyId
         * @param {string} [updatedSince]
         * @param {string} [listedSince]
         * @param {ListingsBypropertyidSaleModeEnum} [saleMode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsBypropertyid(propertyId, updatedSince, listedSince, saleMode, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listingsBypropertyid(propertyId, updatedSince, listedSince, saleMode, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution and appropriate state government attribution.
         * @summary Retrieves a specific property.
         * @param {string} id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.propertiesGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Price estimates based on propertyId
         * @param {string} propertyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGetPriceEstimate(propertyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.propertiesGetPriceEstimate(propertyId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Rental estimates based on propertyId
         * @param {string} propertyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGetRentalEstimate(propertyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.propertiesGetRentalEstimate(propertyId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution.
         * @summary Search for suggested addresses for the given terms
         * @param {string} terms The address to search
         * @param {number} [pageSize] Number of suggestions (maximum 20)
         * @param {PropertiesSuggestChannelEnum} [channel] Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesSuggest(terms, pageSize, channel, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.propertiesSuggest(terms, pageSize, channel, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a property report based on query parameters
         * @param {string} propertyType Type of property &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {string} streetNumber Street number
         * @param {string} streetName Street name
         * @param {string} suburb Suburb e.g. &#x60;Pyrmont&#x60;
         * @param {string} state State e.g. &#x60;NSW&#x60;
         * @param {string} [unitNumber] Unit number
         * @param {string} [streetType] Street type e.g. &#x60;Pl&#x60;
         * @param {string} [postcode] Postcode e.g. &#x60;2009&#x60;
         * @param {number} [areaSize] Area size
         * @param {number} [bedrooms] Number of bedrooms
         * @param {number} [bathrooms] Number of bathrooms
         * @param {number} [parking] Number of parking spots
         * @param {string} [preparedFor] \&quot;Prepared for\&quot; information
         * @param {string} [productCode] Report product code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyReportsGet(propertyType, streetNumber, streetName, suburb, state, unitNumber, streetType, postcode, areaSize, bedrooms, bathrooms, parking, preparedFor, productCode, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.propertyReportsGet(propertyType, streetNumber, streetName, suburb, state, unitNumber, streetType, postcode, areaSize, bedrooms, bathrooms, parking, preparedFor, productCode, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Search for a specific property and provide property information and latest sale/rental activity if found. Supply either propertyId, gnafId, or all address fields (with flatNumber optional)
         * @summary API that supplies property level data and activities across two packages for a specific property
         * @param {string} [propertyId]
         * @param {string} [gnafId]
         * @param {string} [flatNumber]
         * @param {string} [streetNumber]
         * @param {string} [streetName]
         * @param {string} [streetType]
         * @param {string} [postcode]
         * @param {string} [suburbName]
         * @param {PropertyenrichmentGetStateEnum} [state]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyenrichmentGet(propertyId, gnafId, flatNumber, streetNumber, streetName, streetType, postcode, suburbName, state, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.propertyenrichmentGet(propertyId, gnafId, flatNumber, streetNumber, streetName, streetType, postcode, suburbName, state, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.PropertiesApiFp = PropertiesApiFp;
/**
 * PropertiesApi - factory interface
 * @export
 */
const PropertiesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PropertiesApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieve list of listings for the given property id
         * @param {string} propertyId
         * @param {string} [updatedSince]
         * @param {string} [listedSince]
         * @param {ListingsBypropertyidSaleModeEnum} [saleMode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listingsBypropertyid(propertyId, updatedSince, listedSince, saleMode, options) {
            return localVarFp.listingsBypropertyid(propertyId, updatedSince, listedSince, saleMode, options).then((request) => request(axios, basePath));
        },
        /**
         * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution and appropriate state government attribution.
         * @summary Retrieves a specific property.
         * @param {string} id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGet(id, options) {
            return localVarFp.propertiesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Price estimates based on propertyId
         * @param {string} propertyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGetPriceEstimate(propertyId, options) {
            return localVarFp.propertiesGetPriceEstimate(propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Rental estimates based on propertyId
         * @param {string} propertyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGetRentalEstimate(propertyId, options) {
            return localVarFp.propertiesGetRentalEstimate(propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution.
         * @summary Search for suggested addresses for the given terms
         * @param {string} terms The address to search
         * @param {number} [pageSize] Number of suggestions (maximum 20)
         * @param {PropertiesSuggestChannelEnum} [channel] Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesSuggest(terms, pageSize, channel, options) {
            return localVarFp.propertiesSuggest(terms, pageSize, channel, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a property report based on query parameters
         * @param {string} propertyType Type of property &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {string} streetNumber Street number
         * @param {string} streetName Street name
         * @param {string} suburb Suburb e.g. &#x60;Pyrmont&#x60;
         * @param {string} state State e.g. &#x60;NSW&#x60;
         * @param {string} [unitNumber] Unit number
         * @param {string} [streetType] Street type e.g. &#x60;Pl&#x60;
         * @param {string} [postcode] Postcode e.g. &#x60;2009&#x60;
         * @param {number} [areaSize] Area size
         * @param {number} [bedrooms] Number of bedrooms
         * @param {number} [bathrooms] Number of bathrooms
         * @param {number} [parking] Number of parking spots
         * @param {string} [preparedFor] \&quot;Prepared for\&quot; information
         * @param {string} [productCode] Report product code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyReportsGet(propertyType, streetNumber, streetName, suburb, state, unitNumber, streetType, postcode, areaSize, bedrooms, bathrooms, parking, preparedFor, productCode, options) {
            return localVarFp.propertyReportsGet(propertyType, streetNumber, streetName, suburb, state, unitNumber, streetType, postcode, areaSize, bedrooms, bathrooms, parking, preparedFor, productCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for a specific property and provide property information and latest sale/rental activity if found. Supply either propertyId, gnafId, or all address fields (with flatNumber optional)
         * @summary API that supplies property level data and activities across two packages for a specific property
         * @param {string} [propertyId]
         * @param {string} [gnafId]
         * @param {string} [flatNumber]
         * @param {string} [streetNumber]
         * @param {string} [streetName]
         * @param {string} [streetType]
         * @param {string} [postcode]
         * @param {string} [suburbName]
         * @param {PropertyenrichmentGetStateEnum} [state]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyenrichmentGet(propertyId, gnafId, flatNumber, streetNumber, streetName, streetType, postcode, suburbName, state, options) {
            return localVarFp.propertyenrichmentGet(propertyId, gnafId, flatNumber, streetNumber, streetName, streetType, postcode, suburbName, state, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PropertiesApiFactory = PropertiesApiFactory;
/**
 * PropertiesApi - object-oriented interface
 * @export
 * @class PropertiesApi
 * @extends {BaseAPI}
 */
class PropertiesApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieve list of listings for the given property id
     * @param {string} propertyId
     * @param {string} [updatedSince]
     * @param {string} [listedSince]
     * @param {ListingsBypropertyidSaleModeEnum} [saleMode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    listingsBypropertyid(propertyId, updatedSince, listedSince, saleMode, options) {
        return (0, exports.PropertiesApiFp)(this.configuration).listingsBypropertyid(propertyId, updatedSince, listedSince, saleMode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution and appropriate state government attribution.
     * @summary Retrieves a specific property.
     * @param {string} id Property identifier.  Use the &#x60;_suggest&#x60; resource to determine the propertyId.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    propertiesGet(id, options) {
        return (0, exports.PropertiesApiFp)(this.configuration).propertiesGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Price estimates based on propertyId
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    propertiesGetPriceEstimate(propertyId, options) {
        return (0, exports.PropertiesApiFp)(this.configuration).propertiesGetPriceEstimate(propertyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Rental estimates based on propertyId
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    propertiesGetRentalEstimate(propertyId, options) {
        return (0, exports.PropertiesApiFp)(this.configuration).propertiesGetRentalEstimate(propertyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Applicable [policies](/docs/latest/support/policies) apply here include APM attribution.
     * @summary Search for suggested addresses for the given terms
     * @param {string} terms The address to search
     * @param {number} [pageSize] Number of suggestions (maximum 20)
     * @param {PropertiesSuggestChannelEnum} [channel] Restrict the suggestions to this type of property: &#x60;All&#x60; (default), &#x60;Residential&#x60;, &#x60;Commercial&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    propertiesSuggest(terms, pageSize, channel, options) {
        return (0, exports.PropertiesApiFp)(this.configuration).propertiesSuggest(terms, pageSize, channel, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a property report based on query parameters
     * @param {string} propertyType Type of property &#x60;House&#x60;, &#x60;Unit&#x60;
     * @param {string} streetNumber Street number
     * @param {string} streetName Street name
     * @param {string} suburb Suburb e.g. &#x60;Pyrmont&#x60;
     * @param {string} state State e.g. &#x60;NSW&#x60;
     * @param {string} [unitNumber] Unit number
     * @param {string} [streetType] Street type e.g. &#x60;Pl&#x60;
     * @param {string} [postcode] Postcode e.g. &#x60;2009&#x60;
     * @param {number} [areaSize] Area size
     * @param {number} [bedrooms] Number of bedrooms
     * @param {number} [bathrooms] Number of bathrooms
     * @param {number} [parking] Number of parking spots
     * @param {string} [preparedFor] \&quot;Prepared for\&quot; information
     * @param {string} [productCode] Report product code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    propertyReportsGet(propertyType, streetNumber, streetName, suburb, state, unitNumber, streetType, postcode, areaSize, bedrooms, bathrooms, parking, preparedFor, productCode, options) {
        return (0, exports.PropertiesApiFp)(this.configuration).propertyReportsGet(propertyType, streetNumber, streetName, suburb, state, unitNumber, streetType, postcode, areaSize, bedrooms, bathrooms, parking, preparedFor, productCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search for a specific property and provide property information and latest sale/rental activity if found. Supply either propertyId, gnafId, or all address fields (with flatNumber optional)
     * @summary API that supplies property level data and activities across two packages for a specific property
     * @param {string} [propertyId]
     * @param {string} [gnafId]
     * @param {string} [flatNumber]
     * @param {string} [streetNumber]
     * @param {string} [streetName]
     * @param {string} [streetType]
     * @param {string} [postcode]
     * @param {string} [suburbName]
     * @param {PropertyenrichmentGetStateEnum} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    propertyenrichmentGet(propertyId, gnafId, flatNumber, streetNumber, streetName, streetType, postcode, suburbName, state, options) {
        return (0, exports.PropertiesApiFp)(this.configuration).propertyenrichmentGet(propertyId, gnafId, flatNumber, streetNumber, streetName, streetType, postcode, suburbName, state, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PropertiesApi = PropertiesApi;
/**
 * @export
 */
exports.ListingsBypropertyidSaleModeEnum = {
    Sale: 'sale',
    Rent: 'rent',
    Both: 'both'
};
/**
 * @export
 */
exports.PropertiesSuggestChannelEnum = {
    All: 'All',
    Residential: 'Residential',
    Commercial: 'Commercial'
};
/**
 * @export
 */
exports.PropertyenrichmentGetStateEnum = {
    Act: 'act',
    Nsw: 'nsw',
    Nt: 'nt',
    Qld: 'qld',
    Sa: 'sa',
    Vic: 'vic',
    Wa: 'wa'
};
/**
 * PropertyActivityApi - axios parameter creator
 * @export
 */
const PropertyActivityApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds properties to a portfolio by property id\'s and/or gnaf id\'s
         * @summary Add Properties to Portfolio
         * @param {string} portfolioId
         * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityAddToPortfolio: (portfolioId, propertyActivityAPIV1PortfolioDetails, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'portfolioId' is not null or undefined
            (0, common_1.assertParamExists)('propertyActivityAddToPortfolio', 'portfolioId', portfolioId);
            // verify required parameter 'propertyActivityAPIV1PortfolioDetails' is not null or undefined
            (0, common_1.assertParamExists)('propertyActivityAddToPortfolio', 'propertyActivityAPIV1PortfolioDetails', propertyActivityAPIV1PortfolioDetails);
            const localVarPath = `/v1/property/activity/portfolio/{PortfolioId}`
                .replace(`{${"PortfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(propertyActivityAPIV1PortfolioDetails, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates a portfolio and returns portfolio id
         * @summary Create Portfolio
         * @param {PropertyActivityCreatePortfolioRequest} propertyActivityCreatePortfolioRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityCreatePortfolio: (propertyActivityCreatePortfolioRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'propertyActivityCreatePortfolioRequest' is not null or undefined
            (0, common_1.assertParamExists)('propertyActivityCreatePortfolio', 'propertyActivityCreatePortfolioRequest', propertyActivityCreatePortfolioRequest);
            const localVarPath = `/v1/property/activity/portfolio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(propertyActivityCreatePortfolioRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a portfolio and all associated properties
         * @summary Delete Portfolio
         * @param {string} portfolioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityDeletePortfolio: (portfolioId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'portfolioId' is not null or undefined
            (0, common_1.assertParamExists)('propertyActivityDeletePortfolio', 'portfolioId', portfolioId);
            const localVarPath = `/v1/property/activity/portfolio/{PortfolioId}`
                .replace(`{${"PortfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List all portfolios for the customer with a count of associated property and gnaf id\'s
         * @summary List Portfolios
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityListPortfolios: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/property/activity/portfoliosummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Removes properties from a portfolio by property id\'s and/or gnaf id\'s, returning any id\'s that did not exist within the portfolio
         * @summary Remove Properties from Portfolio
         * @param {string} portfolioId
         * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityRemoveFromPortfolio: (portfolioId, propertyActivityAPIV1PortfolioDetails, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'portfolioId' is not null or undefined
            (0, common_1.assertParamExists)('propertyActivityRemoveFromPortfolio', 'portfolioId', portfolioId);
            // verify required parameter 'propertyActivityAPIV1PortfolioDetails' is not null or undefined
            (0, common_1.assertParamExists)('propertyActivityRemoveFromPortfolio', 'propertyActivityAPIV1PortfolioDetails', propertyActivityAPIV1PortfolioDetails);
            const localVarPath = `/v1/property/activity/portfolio/{PortfolioId}/property/delete`
                .replace(`{${"PortfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(propertyActivityAPIV1PortfolioDetails, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List property and gnaf id\'s for an existing portfolio
         * @summary View Properties in Portfolio
         * @param {string} portfolioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityViewPortfolio: (portfolioId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'portfolioId' is not null or undefined
            (0, common_1.assertParamExists)('propertyActivityViewPortfolio', 'portfolioId', portfolioId);
            const localVarPath = `/v1/property/activity/portfolio/{PortfolioId}`
                .replace(`{${"PortfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_propertyportfolio_readwrite"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.PropertyActivityApiAxiosParamCreator = PropertyActivityApiAxiosParamCreator;
/**
 * PropertyActivityApi - functional programming interface
 * @export
 */
const PropertyActivityApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PropertyActivityApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds properties to a portfolio by property id\'s and/or gnaf id\'s
         * @summary Add Properties to Portfolio
         * @param {string} portfolioId
         * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityAddToPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.propertyActivityAddToPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Creates a portfolio and returns portfolio id
         * @summary Create Portfolio
         * @param {PropertyActivityCreatePortfolioRequest} propertyActivityCreatePortfolioRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityCreatePortfolio(propertyActivityCreatePortfolioRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.propertyActivityCreatePortfolio(propertyActivityCreatePortfolioRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes a portfolio and all associated properties
         * @summary Delete Portfolio
         * @param {string} portfolioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityDeletePortfolio(portfolioId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.propertyActivityDeletePortfolio(portfolioId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List all portfolios for the customer with a count of associated property and gnaf id\'s
         * @summary List Portfolios
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityListPortfolios(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.propertyActivityListPortfolios(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Removes properties from a portfolio by property id\'s and/or gnaf id\'s, returning any id\'s that did not exist within the portfolio
         * @summary Remove Properties from Portfolio
         * @param {string} portfolioId
         * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityRemoveFromPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.propertyActivityRemoveFromPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List property and gnaf id\'s for an existing portfolio
         * @summary View Properties in Portfolio
         * @param {string} portfolioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityViewPortfolio(portfolioId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.propertyActivityViewPortfolio(portfolioId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.PropertyActivityApiFp = PropertyActivityApiFp;
/**
 * PropertyActivityApi - factory interface
 * @export
 */
const PropertyActivityApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PropertyActivityApiFp)(configuration);
    return {
        /**
         * Adds properties to a portfolio by property id\'s and/or gnaf id\'s
         * @summary Add Properties to Portfolio
         * @param {string} portfolioId
         * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityAddToPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options) {
            return localVarFp.propertyActivityAddToPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a portfolio and returns portfolio id
         * @summary Create Portfolio
         * @param {PropertyActivityCreatePortfolioRequest} propertyActivityCreatePortfolioRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityCreatePortfolio(propertyActivityCreatePortfolioRequest, options) {
            return localVarFp.propertyActivityCreatePortfolio(propertyActivityCreatePortfolioRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a portfolio and all associated properties
         * @summary Delete Portfolio
         * @param {string} portfolioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityDeletePortfolio(portfolioId, options) {
            return localVarFp.propertyActivityDeletePortfolio(portfolioId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all portfolios for the customer with a count of associated property and gnaf id\'s
         * @summary List Portfolios
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityListPortfolios(options) {
            return localVarFp.propertyActivityListPortfolios(options).then((request) => request(axios, basePath));
        },
        /**
         * Removes properties from a portfolio by property id\'s and/or gnaf id\'s, returning any id\'s that did not exist within the portfolio
         * @summary Remove Properties from Portfolio
         * @param {string} portfolioId
         * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityRemoveFromPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options) {
            return localVarFp.propertyActivityRemoveFromPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * List property and gnaf id\'s for an existing portfolio
         * @summary View Properties in Portfolio
         * @param {string} portfolioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyActivityViewPortfolio(portfolioId, options) {
            return localVarFp.propertyActivityViewPortfolio(portfolioId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PropertyActivityApiFactory = PropertyActivityApiFactory;
/**
 * PropertyActivityApi - object-oriented interface
 * @export
 * @class PropertyActivityApi
 * @extends {BaseAPI}
 */
class PropertyActivityApi extends base_1.BaseAPI {
    /**
     * Adds properties to a portfolio by property id\'s and/or gnaf id\'s
     * @summary Add Properties to Portfolio
     * @param {string} portfolioId
     * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyActivityApi
     */
    propertyActivityAddToPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options) {
        return (0, exports.PropertyActivityApiFp)(this.configuration).propertyActivityAddToPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a portfolio and returns portfolio id
     * @summary Create Portfolio
     * @param {PropertyActivityCreatePortfolioRequest} propertyActivityCreatePortfolioRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyActivityApi
     */
    propertyActivityCreatePortfolio(propertyActivityCreatePortfolioRequest, options) {
        return (0, exports.PropertyActivityApiFp)(this.configuration).propertyActivityCreatePortfolio(propertyActivityCreatePortfolioRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a portfolio and all associated properties
     * @summary Delete Portfolio
     * @param {string} portfolioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyActivityApi
     */
    propertyActivityDeletePortfolio(portfolioId, options) {
        return (0, exports.PropertyActivityApiFp)(this.configuration).propertyActivityDeletePortfolio(portfolioId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all portfolios for the customer with a count of associated property and gnaf id\'s
     * @summary List Portfolios
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyActivityApi
     */
    propertyActivityListPortfolios(options) {
        return (0, exports.PropertyActivityApiFp)(this.configuration).propertyActivityListPortfolios(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes properties from a portfolio by property id\'s and/or gnaf id\'s, returning any id\'s that did not exist within the portfolio
     * @summary Remove Properties from Portfolio
     * @param {string} portfolioId
     * @param {PropertyActivityAPIV1PortfolioDetails | null} propertyActivityAPIV1PortfolioDetails
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyActivityApi
     */
    propertyActivityRemoveFromPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options) {
        return (0, exports.PropertyActivityApiFp)(this.configuration).propertyActivityRemoveFromPortfolio(portfolioId, propertyActivityAPIV1PortfolioDetails, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List property and gnaf id\'s for an existing portfolio
     * @summary View Properties in Portfolio
     * @param {string} portfolioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyActivityApi
     */
    propertyActivityViewPortfolio(portfolioId, options) {
        return (0, exports.PropertyActivityApiFp)(this.configuration).propertyActivityViewPortfolio(portfolioId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PropertyActivityApi = PropertyActivityApi;
/**
 * SalesResultsApi - axios parameter creator
 * @export
 */
const SalesResultsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves sales results for a given city
         * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsGet: (city, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'city' is not null or undefined
            (0, common_1.assertParamExists)('salesResultsGet', 'city', city);
            const localVarPath = `/v1/salesResults/{city}`
                .replace(`{${"city"}}`, encodeURIComponent(String(city)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_salesresults_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_salesresults_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves metadata regarding sales result data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsHead: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/salesResults/_head`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_salesresults_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_salesresults_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves listing summaries corresponding to the sales results
         * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsListings: (city, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'city' is not null or undefined
            (0, common_1.assertParamExists)('salesResultsListings', 'city', city);
            const localVarPath = `/v1/salesResults/{city}/listings`
                .replace(`{${"city"}}`, encodeURIComponent(String(city)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_salesresults_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_salesresults_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SalesResultsApiAxiosParamCreator = SalesResultsApiAxiosParamCreator;
/**
 * SalesResultsApi - functional programming interface
 * @export
 */
const SalesResultsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SalesResultsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves sales results for a given city
         * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsGet(city, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.salesResultsGet(city, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves metadata regarding sales result data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsHead(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.salesResultsHead(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves listing summaries corresponding to the sales results
         * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsListings(city, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.salesResultsListings(city, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.SalesResultsApiFp = SalesResultsApiFp;
/**
 * SalesResultsApi - factory interface
 * @export
 */
const SalesResultsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SalesResultsApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves sales results for a given city
         * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsGet(city, options) {
            return localVarFp.salesResultsGet(city, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves metadata regarding sales result data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsHead(options) {
            return localVarFp.salesResultsHead(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves listing summaries corresponding to the sales results
         * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesResultsListings(city, options) {
            return localVarFp.salesResultsListings(city, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SalesResultsApiFactory = SalesResultsApiFactory;
/**
 * SalesResultsApi - object-oriented interface
 * @export
 * @class SalesResultsApi
 * @extends {BaseAPI}
 */
class SalesResultsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves sales results for a given city
     * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesResultsApi
     */
    salesResultsGet(city, options) {
        return (0, exports.SalesResultsApiFp)(this.configuration).salesResultsGet(city, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves metadata regarding sales result data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesResultsApi
     */
    salesResultsHead(options) {
        return (0, exports.SalesResultsApiFp)(this.configuration).salesResultsHead(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves listing summaries corresponding to the sales results
     * @param {string} city City. Supported cities are: &#x60;Sydney&#x60;, &#x60;Melbourne&#x60;, &#x60;Brisbane&#x60;, &#x60;Adelaide&#x60;, &#x60;Canberra&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesResultsApi
     */
    salesResultsListings(city, options) {
        return (0, exports.SalesResultsApiFp)(this.configuration).salesResultsListings(city, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SalesResultsApi = SalesResultsApi;
/**
 * SchoolsApi - axios parameter creator
 * @export
 */
const SchoolsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Domain School Ids can be obtained from the search by location endpoint.
         * @summary Retrieve the details of a school by Id
         * @param {number} id School id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolsGetById: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('schoolsGetById', 'id', id);
            const localVarPath = `/v2/schools/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_locations_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_locations_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Search for a school in a location
         * @param {number} latitude Latitude to search
         * @param {number} longitude Longitude to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolsSearchByLocation: (latitude, longitude, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'latitude' is not null or undefined
            (0, common_1.assertParamExists)('schoolsSearchByLocation', 'latitude', latitude);
            // verify required parameter 'longitude' is not null or undefined
            (0, common_1.assertParamExists)('schoolsSearchByLocation', 'longitude', longitude);
            const localVarPath = `/v2/schools/{latitude}/{longitude}`
                .replace(`{${"latitude"}}`, encodeURIComponent(String(latitude)))
                .replace(`{${"longitude"}}`, encodeURIComponent(String(longitude)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_locations_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_locations_read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SchoolsApiAxiosParamCreator = SchoolsApiAxiosParamCreator;
/**
 * SchoolsApi - functional programming interface
 * @export
 */
const SchoolsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SchoolsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Domain School Ids can be obtained from the search by location endpoint.
         * @summary Retrieve the details of a school by Id
         * @param {number} id School id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolsGetById(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.schoolsGetById(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Search for a school in a location
         * @param {number} latitude Latitude to search
         * @param {number} longitude Longitude to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolsSearchByLocation(latitude, longitude, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.schoolsSearchByLocation(latitude, longitude, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.SchoolsApiFp = SchoolsApiFp;
/**
 * SchoolsApi - factory interface
 * @export
 */
const SchoolsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SchoolsApiFp)(configuration);
    return {
        /**
         * Domain School Ids can be obtained from the search by location endpoint.
         * @summary Retrieve the details of a school by Id
         * @param {number} id School id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolsGetById(id, options) {
            return localVarFp.schoolsGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Search for a school in a location
         * @param {number} latitude Latitude to search
         * @param {number} longitude Longitude to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolsSearchByLocation(latitude, longitude, options) {
            return localVarFp.schoolsSearchByLocation(latitude, longitude, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SchoolsApiFactory = SchoolsApiFactory;
/**
 * SchoolsApi - object-oriented interface
 * @export
 * @class SchoolsApi
 * @extends {BaseAPI}
 */
class SchoolsApi extends base_1.BaseAPI {
    /**
     * Domain School Ids can be obtained from the search by location endpoint.
     * @summary Retrieve the details of a school by Id
     * @param {number} id School id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApi
     */
    schoolsGetById(id, options) {
        return (0, exports.SchoolsApiFp)(this.configuration).schoolsGetById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Search for a school in a location
     * @param {number} latitude Latitude to search
     * @param {number} longitude Longitude to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApi
     */
    schoolsSearchByLocation(latitude, longitude, options) {
        return (0, exports.SchoolsApiFp)(this.configuration).schoolsSearchByLocation(latitude, longitude, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SchoolsApi = SchoolsApi;
/**
 * StatisticsApi - axios parameter creator
 * @export
 */
const StatisticsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Record a statistic event along with its associated metadata (if applicable)
         * @param {StatisticsPostEventEnum} event The event type
         * @param {object} body A JSON object dictionary of the metadata associated with the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsPost: (event, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'event' is not null or undefined
            (0, common_1.assertParamExists)('statisticsPost', 'event', event);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('statisticsPost', 'body', body);
            const localVarPath = `/v1/statistics/{event}`
                .replace(`{${"event"}}`, encodeURIComponent(String(event)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_statistics_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_statistics_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
         * @summary Search for sales statistics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
         * @param {SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {number} [bedrooms] Number of bedrooms to use in the sales search
         * @param {SuburbPerformanceGetByNamedSuburbPeriodSizeEnum} [periodSize] Unit of the measurement period to use
         * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
         * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suburbPerformanceGetByNamedSuburb: (state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'state' is not null or undefined
            (0, common_1.assertParamExists)('suburbPerformanceGetByNamedSuburb', 'state', state);
            // verify required parameter 'suburb' is not null or undefined
            (0, common_1.assertParamExists)('suburbPerformanceGetByNamedSuburb', 'suburb', suburb);
            // verify required parameter 'postcode' is not null or undefined
            (0, common_1.assertParamExists)('suburbPerformanceGetByNamedSuburb', 'postcode', postcode);
            const localVarPath = `/v2/suburbPerformanceStatistics/{state}/{suburb}/{postcode}`
                .replace(`{${"state"}}`, encodeURIComponent(String(state)))
                .replace(`{${"suburb"}}`, encodeURIComponent(String(suburb)))
                .replace(`{${"postcode"}}`, encodeURIComponent(String(postcode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_suburbperformance_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_suburbperformance_read"], configuration);
            if (propertyCategory !== undefined) {
                localVarQueryParameter['propertyCategory'] = propertyCategory;
            }
            if (bedrooms !== undefined) {
                localVarQueryParameter['bedrooms'] = bedrooms;
            }
            if (periodSize !== undefined) {
                localVarQueryParameter['periodSize'] = periodSize;
            }
            if (startingPeriodRelativeToCurrent !== undefined) {
                localVarQueryParameter['startingPeriodRelativeToCurrent'] = startingPeriodRelativeToCurrent;
            }
            if (totalPeriods !== undefined) {
                localVarQueryParameter['totalPeriods'] = totalPeriods;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
         * @summary Search for sales statistics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {number} [bedrooms] Number of bedrooms to use in the sales search
         * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum} [periodSize] Unit of the measurement period to use
         * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
         * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suburbPerformanceGetByNamedSuburbWithoutPostcode: (state, suburb, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'state' is not null or undefined
            (0, common_1.assertParamExists)('suburbPerformanceGetByNamedSuburbWithoutPostcode', 'state', state);
            // verify required parameter 'suburb' is not null or undefined
            (0, common_1.assertParamExists)('suburbPerformanceGetByNamedSuburbWithoutPostcode', 'suburb', suburb);
            const localVarPath = `/v2/suburbPerformanceStatistics/{state}/{suburb}`
                .replace(`{${"state"}}`, encodeURIComponent(String(state)))
                .replace(`{${"suburb"}}`, encodeURIComponent(String(suburb)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_suburbperformance_read"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_suburbperformance_read"], configuration);
            if (propertyCategory !== undefined) {
                localVarQueryParameter['propertyCategory'] = propertyCategory;
            }
            if (bedrooms !== undefined) {
                localVarQueryParameter['bedrooms'] = bedrooms;
            }
            if (periodSize !== undefined) {
                localVarQueryParameter['periodSize'] = periodSize;
            }
            if (startingPeriodRelativeToCurrent !== undefined) {
                localVarQueryParameter['startingPeriodRelativeToCurrent'] = startingPeriodRelativeToCurrent;
            }
            if (totalPeriods !== undefined) {
                localVarQueryParameter['totalPeriods'] = totalPeriods;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.StatisticsApiAxiosParamCreator = StatisticsApiAxiosParamCreator;
/**
 * StatisticsApi - functional programming interface
 * @export
 */
const StatisticsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StatisticsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Record a statistic event along with its associated metadata (if applicable)
         * @param {StatisticsPostEventEnum} event The event type
         * @param {object} body A JSON object dictionary of the metadata associated with the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsPost(event, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.statisticsPost(event, body, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
         * @summary Search for sales statistics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
         * @param {SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {number} [bedrooms] Number of bedrooms to use in the sales search
         * @param {SuburbPerformanceGetByNamedSuburbPeriodSizeEnum} [periodSize] Unit of the measurement period to use
         * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
         * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suburbPerformanceGetByNamedSuburb(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suburbPerformanceGetByNamedSuburb(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
         * @summary Search for sales statistics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {number} [bedrooms] Number of bedrooms to use in the sales search
         * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum} [periodSize] Unit of the measurement period to use
         * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
         * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suburbPerformanceGetByNamedSuburbWithoutPostcode(state, suburb, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suburbPerformanceGetByNamedSuburbWithoutPostcode(state, suburb, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.StatisticsApiFp = StatisticsApiFp;
/**
 * StatisticsApi - factory interface
 * @export
 */
const StatisticsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StatisticsApiFp)(configuration);
    return {
        /**
         *
         * @summary Record a statistic event along with its associated metadata (if applicable)
         * @param {StatisticsPostEventEnum} event The event type
         * @param {object} body A JSON object dictionary of the metadata associated with the event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsPost(event, body, options) {
            return localVarFp.statisticsPost(event, body, options).then((request) => request(axios, basePath));
        },
        /**
         * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
         * @summary Search for sales statistics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
         * @param {SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {number} [bedrooms] Number of bedrooms to use in the sales search
         * @param {SuburbPerformanceGetByNamedSuburbPeriodSizeEnum} [periodSize] Unit of the measurement period to use
         * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
         * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suburbPerformanceGetByNamedSuburb(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options) {
            return localVarFp.suburbPerformanceGetByNamedSuburb(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options).then((request) => request(axios, basePath));
        },
        /**
         * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
         * @summary Search for sales statistics in a given geographic level.
         * @param {string} state The Australian state abbreviation
         * @param {string} suburb Suburb name to retrieve data for
         * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
         * @param {number} [bedrooms] Number of bedrooms to use in the sales search
         * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum} [periodSize] Unit of the measurement period to use
         * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
         * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suburbPerformanceGetByNamedSuburbWithoutPostcode(state, suburb, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options) {
            return localVarFp.suburbPerformanceGetByNamedSuburbWithoutPostcode(state, suburb, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options).then((request) => request(axios, basePath));
        },
    };
};
exports.StatisticsApiFactory = StatisticsApiFactory;
/**
 * StatisticsApi - object-oriented interface
 * @export
 * @class StatisticsApi
 * @extends {BaseAPI}
 */
class StatisticsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Record a statistic event along with its associated metadata (if applicable)
     * @param {StatisticsPostEventEnum} event The event type
     * @param {object} body A JSON object dictionary of the metadata associated with the event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    statisticsPost(event, body, options) {
        return (0, exports.StatisticsApiFp)(this.configuration).statisticsPost(event, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
     * @summary Search for sales statistics in a given geographic level.
     * @param {string} state The Australian state abbreviation
     * @param {string} suburb Suburb name to retrieve data for
     * @param {string} postcode Suburb Post Code, optional, but required for suburbs with official post codes.
     * @param {SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
     * @param {number} [bedrooms] Number of bedrooms to use in the sales search
     * @param {SuburbPerformanceGetByNamedSuburbPeriodSizeEnum} [periodSize] Unit of the measurement period to use
     * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
     * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    suburbPerformanceGetByNamedSuburb(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options) {
        return (0, exports.StatisticsApiFp)(this.configuration).suburbPerformanceGetByNamedSuburb(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - Standard Auction Clearance Rate formula is: `AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)`  - The Rate is considered Not Statistic Reliable if: `AuctionNumberAuctioned + AuctionNumberWithdrawn < 10`  - APM Standard Gross Rental Yield formula is: `(MedianRentListingPrice* 52) / MedianSoldPrice`  - The Yield is considered Not Available if: `MedianRentListingPrice is null or MedianSoldPrice is null`
     * @summary Search for sales statistics in a given geographic level.
     * @param {string} state The Australian state abbreviation
     * @param {string} suburb Suburb name to retrieve data for
     * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum} [propertyCategory] Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60;
     * @param {number} [bedrooms] Number of bedrooms to use in the sales search
     * @param {SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum} [periodSize] Unit of the measurement period to use
     * @param {number} [startingPeriodRelativeToCurrent] When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc.
     * @param {number} [totalPeriods] Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    suburbPerformanceGetByNamedSuburbWithoutPostcode(state, suburb, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options) {
        return (0, exports.StatisticsApiFp)(this.configuration).suburbPerformanceGetByNamedSuburbWithoutPostcode(state, suburb, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StatisticsApi = StatisticsApi;
/**
 * @export
 */
exports.StatisticsPostEventEnum = {
    ListingViewed: 'listingViewed',
    ListingImageGalleryViewed: 'listingImageGalleryViewed',
    ListingImageViewed: 'listingImageViewed',
    ListingMapViewed: 'listingMapViewed',
    ListingVideoViewed: 'listingVideoViewed',
    ListingFloorPlanViewed: 'listingFloorPlanViewed',
    ListingAddedToShortlist: 'listingAddedToShortlist',
    ListingAgentCalled: 'listingAgentCalled',
    ListingAgentPhoneRevealed: 'listingAgentPhoneRevealed',
    ListingNotesAdded: 'listingNotesAdded',
    ListingEmailedToAFriend: 'listingEmailedToAFriend',
    ListingEnquirySent: 'listingEnquirySent',
    LoanEventRaised: 'loanEventRaised'
};
/**
 * @export
 */
exports.SuburbPerformanceGetByNamedSuburbPropertyCategoryEnum = {
    House: 'house',
    Unit: 'unit'
};
/**
 * @export
 */
exports.SuburbPerformanceGetByNamedSuburbPeriodSizeEnum = {
    Quarters: 'quarters',
    HalfYears: 'halfYears',
    Years: 'years'
};
/**
 * @export
 */
exports.SuburbPerformanceGetByNamedSuburbWithoutPostcodePropertyCategoryEnum = {
    House: 'house',
    Unit: 'unit'
};
/**
 * @export
 */
exports.SuburbPerformanceGetByNamedSuburbWithoutPostcodePeriodSizeEnum = {
    Quarters: 'quarters',
    HalfYears: 'halfYears',
    Years: 'years'
};
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
const WebhooksApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a subscription to notifications
         * @param {string} id Subscriber (Webhook) Id
         * @param {WebhooksV1AddSubscriptionRequest} [webhooksV1AddSubscriptionRequest] New Subscription Details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksCreateSubscription: (id, webhooksV1AddSubscriptionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('webhooksCreateSubscription', 'id', id);
            const localVarPath = `/v1/webhooks/{id}/subscriptions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(webhooksV1AddSubscriptionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a single subscription
         * @param {string} id Subscription identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksDeleteSubscription: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('webhooksDeleteSubscription', 'id', id);
            const localVarPath = `/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieve the details of a single subscription
         * @param {string} id Subscription identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksGetSubscription: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('webhooksGetSubscription', 'id', id);
            const localVarPath = `/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all subscriptions to the specified webhook
         * @param {string} id Subscriber (Webhook) ID
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksListSubscriptions: (id, pageNumber, pageSize, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('webhooksListSubscriptions', 'id', id);
            const localVarPath = `/v1/webhooks/{id}/subscriptions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["api_webhooks_write"], configuration);
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.WebhooksApiAxiosParamCreator = WebhooksApiAxiosParamCreator;
/**
 * WebhooksApi - functional programming interface
 * @export
 */
const WebhooksApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.WebhooksApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create a subscription to notifications
         * @param {string} id Subscriber (Webhook) Id
         * @param {WebhooksV1AddSubscriptionRequest} [webhooksV1AddSubscriptionRequest] New Subscription Details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksCreateSubscription(id, webhooksV1AddSubscriptionRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.webhooksCreateSubscription(id, webhooksV1AddSubscriptionRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete a single subscription
         * @param {string} id Subscription identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksDeleteSubscription(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.webhooksDeleteSubscription(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieve the details of a single subscription
         * @param {string} id Subscription identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksGetSubscription(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.webhooksGetSubscription(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary List all subscriptions to the specified webhook
         * @param {string} id Subscriber (Webhook) ID
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksListSubscriptions(id, pageNumber, pageSize, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.webhooksListSubscriptions(id, pageNumber, pageSize, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.WebhooksApiFp = WebhooksApiFp;
/**
 * WebhooksApi - factory interface
 * @export
 */
const WebhooksApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.WebhooksApiFp)(configuration);
    return {
        /**
         *
         * @summary Create a subscription to notifications
         * @param {string} id Subscriber (Webhook) Id
         * @param {WebhooksV1AddSubscriptionRequest} [webhooksV1AddSubscriptionRequest] New Subscription Details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksCreateSubscription(id, webhooksV1AddSubscriptionRequest, options) {
            return localVarFp.webhooksCreateSubscription(id, webhooksV1AddSubscriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a single subscription
         * @param {string} id Subscription identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksDeleteSubscription(id, options) {
            return localVarFp.webhooksDeleteSubscription(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve the details of a single subscription
         * @param {string} id Subscription identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksGetSubscription(id, options) {
            return localVarFp.webhooksGetSubscription(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all subscriptions to the specified webhook
         * @param {string} id Subscriber (Webhook) ID
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksListSubscriptions(id, pageNumber, pageSize, options) {
            return localVarFp.webhooksListSubscriptions(id, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};
exports.WebhooksApiFactory = WebhooksApiFactory;
/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
class WebhooksApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create a subscription to notifications
     * @param {string} id Subscriber (Webhook) Id
     * @param {WebhooksV1AddSubscriptionRequest} [webhooksV1AddSubscriptionRequest] New Subscription Details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    webhooksCreateSubscription(id, webhooksV1AddSubscriptionRequest, options) {
        return (0, exports.WebhooksApiFp)(this.configuration).webhooksCreateSubscription(id, webhooksV1AddSubscriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a single subscription
     * @param {string} id Subscription identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    webhooksDeleteSubscription(id, options) {
        return (0, exports.WebhooksApiFp)(this.configuration).webhooksDeleteSubscription(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve the details of a single subscription
     * @param {string} id Subscription identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    webhooksGetSubscription(id, options) {
        return (0, exports.WebhooksApiFp)(this.configuration).webhooksGetSubscription(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all subscriptions to the specified webhook
     * @param {string} id Subscriber (Webhook) ID
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    webhooksListSubscriptions(id, pageNumber, pageSize, options) {
        return (0, exports.WebhooksApiFp)(this.configuration).webhooksListSubscriptions(id, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.WebhooksApi = WebhooksApi;
